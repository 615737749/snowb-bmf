{"version":3,"sources":["store/ui.ts","workers/AutoPacker.worker.ts","utils/is.ts","utils/getTextBaselines.ts","utils/use.ts","store/base/ui.ts","utils/fontStyleStringify.ts","utils/updateFontFace.ts","store/base/font.ts","store/base/gradient.ts","utils/getFontBaselines.ts","utils/base64ToArrayBuffer.ts","store/base/patternTexture.ts","store/base/fill.ts","store/base/stroke.ts","store/base/shadow.ts","store/base/style.ts","store/base/layout.ts","store/base/metric.ts","utils/trimImageData.ts","utils/getPointOnCircle.ts","utils/getCanvasStyle.ts","utils/getTextSize.ts","utils/pathDoSharp.ts","utils/ctxDoPath.ts","utils/getFontGlyphInfo.ts","utils/getGlyphInfo.ts","store/base/glyphBase.ts","store/base/glyphFont.ts","store/index.ts","store/base/glyphImage.ts","utils/getTrimImageInfo.ts","store/project.ts","store/workspace.ts","app/theme/props.ts","app/theme/overrides.ts","app/theme/index.ts","store/hooks.ts","utils/readFile.ts","app/layout/LeftBar/modules/Font/FontFamily.tsx","app/components/GridInput/GridInput.tsx","app/layout/LeftBar/modules/Font/FontSize.tsx","app/layout/LeftBar/modules/Font/Sharp.tsx","app/layout/LeftBar/modules/Font/Font.tsx","app/layout/LeftBar/modules/Glyphs/Glyphs.tsx","app/layout/LeftBar/modules/PackConfig/Padding.tsx","app/layout/LeftBar/modules/PackConfig/Spacing.tsx","app/layout/LeftBar/modules/PackConfig/AutoPack.tsx","app/layout/LeftBar/modules/PackConfig/FixedSize.tsx","app/layout/LeftBar/modules/PackConfig/PackWidth.tsx","app/layout/LeftBar/modules/PackConfig/PackHeight.tsx","app/layout/LeftBar/modules/PackConfig/PackConfig.tsx","app/layout/common/FormAdjustMetric/FormAdjustMetric.tsx","app/layout/LeftBar/modules/GlobalMetric/GlobalMetric.tsx","app/layout/LeftBar/LeftBar.tsx","app/layout/TitleBar/ButtonNew.tsx","utils/getVersionNumber.ts","file/conversion/types/sbf/prefix.ts","file/conversion/types/sbf/getVersion.ts","file/conversion/types/sbf/check.ts","file/conversion/types/sbf/proto/1.0.0/project.js","file/conversion/types/sbf/proto/1.0.0/updateToNext.ts","file/conversion/types/sbf/proto/1.0.1/project.js","file/conversion/types/sbf/proto/1.0.1/updateToNext.ts","file/conversion/types/sbf/proto/1.0.2/project.js","file/conversion/types/sbf/proto/1.0.2/updateToNext.ts","file/conversion/types/sbf/proto/project.js","file/conversion/types/sbf/proto/index.ts","file/conversion/types/sbf/updateOldProject.ts","file/conversion/types/sbf/encode.ts","file/conversion/types/sbf/proto/encodeProject.ts","file/conversion/types/sbf/index.ts","file/conversion/types/sbf/decode.ts","file/conversion/types/sbf/proto/toOriginBuffer.ts","file/conversion/types/littera/schema/index.ts","file/conversion/types/littera/schema/glow.ts","file/conversion/types/littera/schema/fill.ts","file/conversion/types/littera/schema/settings.ts","file/conversion/types/littera/schema/shadow.ts","file/conversion/types/littera/schema/stroke.ts","file/conversion/types/littera/schema/background.ts","file/conversion/types/littera/schema/bevel.ts","file/conversion/types/littera/schema/glyphs.ts","file/conversion/types/littera/schema/font.ts","file/conversion/types/littera/check.ts","file/conversion/types/littera/decode.ts","file/conversion/types/index.ts","file/conversion/types/littera/index.ts","file/conversion/index.ts","app/layout/TitleBar/ButtonOpen.tsx","app/layout/TitleBar/ButtonSave.tsx","utils/formatStr.ts","file/export/types/text.ts","file/export/types/xml.ts","file/export/toBmfInfo.ts","file/export/index.ts","app/layout/TitleBar/ButtonExport.tsx","file/export/exportFile.ts","app/layout/TitleBar/TitleBar.tsx","app/components/WrappedSketchPicker/WrappedSketchPicker.tsx","app/components/ColorInput/ColorInput.tsx","app/layout/common/FormColor/FormColor.tsx","app/components/GradientPicker/ColorStop.tsx","app/components/GradientPicker/ColorStopsHolder.tsx","app/components/Palette/Palette.tsx","app/components/GradientPicker/GradientBuilder.tsx","app/components/AnglePicker/AnglePicker.tsx","app/layout/common/FormAngle/FormAngle.tsx","app/layout/common/FormGradient/FormGradient.tsx","app/layout/common/FormImage/FileSelector.tsx","app/layout/common/FormImage/FormImage.tsx","app/layout/common/FormFill/FormFill.tsx","app/layout/RightBar/modules/Fill/Fill.tsx","app/layout/RightBar/modules/Stroke/Stroke.tsx","app/layout/RightBar/modules/Shadow/Shadow.tsx","app/layout/RightBar/modules/BackgroundColor/BackgroundColor.tsx","app/layout/RightBar/RightBar.tsx","app/hooks/useWheel.ts","app/hooks/useSpaceDrag.ts","app/layout/WorkSpace/modules/PackView/PackCanvas.tsx","app/layout/WorkSpace/modules/PackView/PackSizeBar.tsx","app/layout/WorkSpace/modules/PackView/PackView.tsx","app/layout/WorkSpace/modules/Preview/LetterList.tsx","app/layout/WorkSpace/modules/Preview/PreviewCanvas.tsx","app/layout/WorkSpace/modules/Preview/getPreviewCanvas.ts","app/layout/WorkSpace/modules/Preview/PreviewText.tsx","app/layout/WorkSpace/modules/Preview/PreviewMertic.tsx","app/layout/WorkSpace/modules/Preview/PreviewKerning.tsx","app/layout/WorkSpace/modules/Preview/Preview.tsx","app/layout/WorkSpace/modules/MainView/MainView.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTab.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTabs.tsx","app/layout/WorkSpace/modules/ControlerBar/ControlerBar.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyph.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyphList.tsx","app/layout/WorkSpace/modules/ImageGlyphList/LayerBox.tsx","app/layout/WorkSpace/WorkSpace.tsx","app/layout/Wrap/UpdateToast.tsx","app/layout/Wrap/Wrap.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Ui","action","bound","num","this","globalLoader","observable","Worker_fn","Worker","canvas","is","n","Number","isNaN","use","a","b","ui","previewText","offsetX","Math","min","max","width","offsetY","height","scale","trans","reOffset","text","showPreview","previewScale","previewOffsetX","previewOffsetY","letter","next","selectLetter","selectNextLetter","packFailed","defaultConfig","fontSize","fontFamily","fontStyleStringify","fontStyleConfig","config","arr","fontStyle","push","fontVariant","fontWeight","lineHeight","join","fontTargeCache","loadDiv","GradientType","DEFAULT_FAMILY","Font","font","size","sharp","fonts","length","forEach","fontResource","addFont","updateBaseines","mainFont","family","opentype","map","middle","hanging","top","alphabetic","ideographic","bottom","bls","unitsPerEm","ascender","descender","fontHeight","getFontBaselines","styleConig","document","createElement","ctx","getContext","Error","textBaseline","measureText","baselines","actualBoundingBoxAscent","actualBoundingBoxDescent","getTextBaselines","parse","lowMemory","e","Promise","reject","names","postScriptName","Object","keys","find","url","URL","createObjectURL","Blob","name","cssNode","createTextNode","appendChild","textNode","head","style","position","left","opacity","pointerEvents","body","resolve","setTimeout","updateFontFace","then","runInAction","idx","indexOf","splice","computed","Gradient","shallow","gradient","type","angle","palette","item","id","nextId","addColor","color","ids","offset","base64ToArrayBuffer","base64","binaryString","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","FillType","PatternTexture","ref","pt","repetition","setImage","src","img","Image","onload","image","Fill","fill","patternTexture","Stroke","stroke","lineCap","lineJoin","Shadow","shadow","blur","Style","useShadow","useStroke","bgColor","Layout","layout","padding","spacing","auto","fixedSize","Metric","metric","xAdvance","xOffset","yOffset","trimImageData","imageData","threshold","data","topTrim","bottomTrim","leftTrim","rightTrim","topStatus","bottomStatus","leftStatus","rightStatus","h","ceil","w","j","trimOffsetLeft","trimOffsetTop","getPointOnCircle","x","y","r","cos","PI","sin","matrix","createElementNS","createSVGMatrix","getCanvasStyle","cx","cy","startPoint","endPoint","createLinearGradient","createRadialGradient","addColorStop","pattern","createPattern","setTransform","translate","v","distance","strength","round","ctxDoPath","commands","beginPath","cmd","moveTo","lineTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","closePath","getFontGlyphInfo","charToGlyph","unicode","glyph","baseline","path","getPath","snapDistance","snapX","snapY","pathDoSharp","boundingBox","getBoundingBox","fontWidth","getAdvanceWidth","trimInfo","floor","trimOffsetRight","trimOffsetBottom","lineWidth","addX","addY","abs","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","strokCanvas","sctx","strokeWidth","strokeStyle","globalCompositeOperation","fillStyle","drawImage","imgData","getImageData","styleTrimInfo","putImageData","getGlyphInfo","textAlign","testA","actualBoundingBoxLeft","parseInt","testB","actualBoundingBoxRight","getTextSize","styleX","styleY","strokeText","fillText","cvs","newCtx","GlyphBase","adjustMetric","kerning","set","Map","GlyphFont","galyphFont","textStyle","setGlyphInfo","glyphInfo","source","store","GlyphImage","glyphImage","fileName","fileType","initImage","naturalWidth","naturalHeight","getTrimImageInfo","isSelect","selected","Project","project","worker","packStart","packTimer","idleId","Date","now","globalAdjustMetric","glyphs","value","key","glyphImages","has","addGlyphs","addAutoRun","pack","obj","split","get","glyphList","isUnEmpty","terminate","isPacking","packList","rectangleList","sort","packer","GuillotineBinPack","list","filter","InsertSizes","setPack","usedRectangles","AutoPacker","addEventListener","messageEvent","postMessage","failedList","imgList","maxWidth","maxHeight","rectangle","gi","setPackFailed","setSize","cancel","tasks","runTasks","request","deadline","tr","timeRemaining","start","shift","window","clearTimeout","isName","deepObserve","throttlePack","change","packStyle","str","oldText","replace","currentList","Array","from","Set","oldList","diffList","concat","t","includes","delete","all","packCanvas","Workspace","activeId","projectList","namedList","p","named","match","setName","configure","enforceActions","computedRequiresReaction","props","MuiButton","MuiButtonBase","disableRipple","MuiFilledInput","margin","MuiFormControl","MuiFormHelperText","MuiIconButton","MuiInputBase","MuiInputLabel","MuiListItem","dense","MuiOutlinedInput","MuiFab","MuiTable","MuiTextField","MuiToolbar","variant","overrides","MuiCssBaseline","html","WebkitFontSmoothing","MozOsxFontSmoothing","userSelect","minWidth","marginLeft","background","input","MuiSlider","root","verticalAlign","theme","createTheme","primary","main","secondary","paper","default","activityBar","titleBar","sidebar","common","black","white","hover","bgPixel","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","typography","transitions","create","shape","borderRadius","responsiveFontSizes","useStores","useContext","MobXProviderContext","useWorkspace","workspace","useLayout","currentProject","useProject","useStyle","useFont","useProjectUi","readFile","file","isText","arrayBuffer","reader","FileReader","readAsText","readAsArrayBuffer","target","result","observer","useState","loading","setLoading","removeFont","enqueueSnackbar","useSnackbar","List","disablePadding","ListItem","disableGutters","divider","ListItemText","ListItemSecondaryAction","IconButton","edge","onClick","Button","component","fullWidth","startIcon","CircularProgress","disabled","hidden","onChange","event","files","arrBuf","ArrayBuffer","catch","message","Sentry","accept","GridInput","before","children","after","childrenWidth","other","Grid","container","wrap","justifyContent","alignItems","xs","Typography","noWrap","align","Input","inputProps","setSharp","undefined","Slider","Box","paddingX","marginY","setText","isIME","setIsIME","inputText","setInputText","handleCompositionStart","useCallback","useEffect","TextField","multiline","rows","spellCheck","onCompositionStart","onCompositionEnd","setPadding","setSpacing","setAuto","Checkbox","checked","setFixedSize","setWidth","setHeight","PackConfig","FormAdjustMetric","setXAdvance","setXOffset","setYOffset","getHandle","handleSet","useStyles","makeStyles","createStyles","overflow","LeftBar","classes","bgcolor","display","flexDirection","className","boxShadow","flex","Divider","addProject","handleNewProject","preventDefault","hotkeys","unbind","title","getVersionNumber","version","isArray","reverse","reduce","previousValue","currentValue","currentIndex","pow","prefix","s","decode","byteLength","perfixBuffer","perfixName","slice","filePrefix","versionBuffer","isSbf","check","getVersion","$Reader","$protobuf","$Writer","$util","$root","properties","prototype","encode","writer","hasOwnProperty","call","uint32","sint32","encodeDelimited","ldelim","end","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","toObject","options","defaults","toJSON","constructor","toJSONOptions","GradientColor","int32","string","isString","String","emptyArray","float","fork","error","TypeError","arrays","json","isFinite","newBuffer","double","emptyObject","end2","tag2","isObject","keys2","objects","bool","Boolean","power","Long","fromBits","int64","low","high","fromValue","unsigned","LongBits","toNumber","long","longs","toString","updateToNext","fixOffset","FontResource","oldProto","proto1000000","proto1000001","proto1000002","verions","verion","updateOldProject","projectBuffer","ProjectProto","finish","encodeProject","sbfFile","ext","u8","protoProject","imgKerning","k","gl","glyphKerning","toOriginBuffer","schema","glow","quality","colors","elements","glowEnabled","alphas","ratios","blurX","blurY","gradientAlphas","gradientType","enum","gradientRotation","fillType","textureScale","distanceFieldEnabled","distanceFieldColor","gradientColors","distanceFieldDownscale","distanceFieldSpread","distanceFieldType","gradientRatios","optionalProperties","texture","settings","postfixes","filename","scalings","shadowEnabled","alpha","pixelHinting","strokeEnabled","miterLimit","jointStyle","bevel","bevelEnabled","highlightColor","highlightAlpha","shadowAlpha","powerOfTwo","canvasHeight","packMethod","canvasWidth","roundValues","descriptionFormat","fallbackfont","validate","Ajv","compile","litteraStr","litteraData","JSON","isLittera","errors","category","level","Info","transformFill","litteraFill","SOLID","Color","hex","GRADIENT","RADIAL","LINEAR","assign","conversionList","sbf","conversion","inputFile","worckSpace","labelRef","useRef","test","console","log","handleSaveProject","toJS","saveAs","formatStr","matchs","returns","outputConfig","exts","getString","bmfont","info","pages","chars","kernings","charset","char","count","parser","DOMParser","xmlDOM","implementation","createDocument","infoDoc","parseFromString","documentElement","childNodes","commonDoc","pagesDoc","charsDoc","charDoc","kerningsDoc","kerningDoc","XMLSerializer","serializeToString","toBmfInfo","fontScale","face","mainFamily","bold","italic","stretchH","smooth","aa","base","scaleW","scaleH","packed","xoffset","yoffset","xadvance","page","chnl","amount","getKerningValue","charToGlyphIndex","first","second","configList","xml","setShowPreview","open","setOpen","val","setVal","handleOpen","handleClose","handleSave","zip","JSZip","toBlob","blob","generateAsync","content","exportFile","Dialog","onClose","DialogTitle","DialogContent","dividers","Select","displayEmpty","MenuItem","toUpperCase","DialogActions","autoFocus","zIndex","appBar","appName","marginRight","appNameSup","btn","textTransform","TitleBar","href","picker","borderColor","border","WrappedSketchPicker","anchorEl","placement","pickerStyle","useTheme","shadows","usePickerStyle","Popper","styles","rgb","g","swatch","cursor","ColorInput","ClickAwayListener","mouseEvent","onClickAway","current","FormColor","borderWidth","isActive","borderStyle","dark","activeColor","grey","ColorStop","divProps","clsx","ColorStopsHolder","onAdd","onUpdate","onSelect","setStartPoint","isDragging","setIsDragging","rootRef","clientWidth","handleMouseMove","buttons","findIndex","paletteItem","newPalette","clientY","clientX","handleMouseUp","stopPropagation","removeEventListener","onMouseDown","getBoundingClientRect","handleMouseDown","svg","Palette","random","substr","sortedPalette","stopColor","GradientBuilder","rootEl","oldPalette","setOldPalette","setActiveId","setActiveColor","isAdd","setIsAdd","newIds","oldIds","diff","handleUpdate","isDelete","updateItem","right","offsetSpace","leftColor","rightColor","red","green","blue","React","cloneElement","point","marginTop","transformOrigin","transform","AnglePicker","bounds","radians","atan2","FormAngle","updatePalette","setAngle","setType","RadioGroup","row","flexWrap","FormControlLabel","control","Radio","label","FileSelector","multiple","alt","FormImage","setRepetition","setScale","step","setColor","IMAGE","setUseStroke","setLineJoin","setLineCap","Switch","ButtonGroup","setUseShadow","setOffsetX","setOffsetY","setBlur","setBgColor","RightBar","useWheel","onWheel","deps","callback","handleWheel","ctrlKey","altKey","deltaX","deltaY","d","deltaScale","dom","passive","useSpaceDrag","onMove","ks","ms","moveState","setMoveState","dragStatus","useMemo","moveCallback","handleKeyEvent","state","keyCode","handleMove","handleEnd","dragState","imageRendering","packWidth","packHeight","setCanvas","canvasRef","domRef","offsetInfo","ix","iy","os","ox","oy","fillRect","animationDuration","LinearProgress","PackView","outline","select","setSelectLetter","handleSelect","setData","minBaseLine","maxBaseLine","setPreviewTransform","lh","index","baseLine","basey","setLineDash","lines","autorun","kerningMap","charMap","minX","minY","maxX","maxY","lk","kering","getPreviewCanvas","setPreviewText","setOffset","setGlyph","setKerning","disposer","steKerning","Preview","PreviewText","PreviewMertic","PreviewKerning","to","toast","animationName","icon","minHeight","borderRight","whiteSpace","editor","appearance","ProjectTab","useRemove","onRemove","onRename","setEditor","sname","setSName","editorRef","handleRemove","focus","onDoubleClick","onKeyDown","onBlur","workSpace","selectProject","removeProject","setProjectName","Tabs","indicatorColor","textColor","scrollButtons","selectionFollowsFocus","TabIndicatorProps","slider","anchorRef","handleChange","prevOpen","Paper","contains","MenuList","actions","inputLabel","removeImage","inputValue","setInputValue","changeSelect","direction","InputBase","onFocus","onInput","iv","fixed","panel","continer","overflowY","listWrap","addImages","isFullscreen","setFullscreen","handleLoadFile","matched","fileList","f","handleKeyDown","tagName","onDragEnter","onDragOver","onDrop","dataTransfer","Accordion","expanded","o","TransitionProps","AccordionSummary","expandIcon","AccordionDetails","tabsRoot","tabRoot","tabSelected","tabWrapper","WorkSpace","close","ConsecutiveSnackbars","reason","updateVersion","detail","Snackbar","anchorOrigin","vertical","horizontal","Fragment","location","reload","loadingBackdrop","drawer","Backdrop","App","ThemeProvider","CssBaseline","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","dsn","process","release","integrations","Integrations","BrowserTracing","tracesSampleRate","environment","ReactDOM","render","getElementById","origin","fetch","headers","response","contentType","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","waiting","channel","MessageChannel","port1","onmessage","dispatchEvent","CustomEvent","port2"],"mappings":"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","file":"static/js/main.9f583fcc.chunk.js","sourcesContent":["import { action, observable } from 'mobx'\n\nclass Ui {\n  @observable globalLoader = 0\n\n  @action.bound showGlobalLoader(num = 1): void {\n    this.globalLoader += num\n  }\n\n  @action.bound hideGlobalLoader(num = -1): void {\n    this.globalLoader += num\n  }\n}\n\nexport default Ui\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/AutoPacker.d4f5dd9550ff18a5dd82.worker.js\");\n}\n","const num = (n: unknown): n is number => {\r\n  return typeof n === 'number' && !Number.isNaN(n)\r\n}\r\n\r\nconst is = {\r\n  num,\r\n}\r\n\r\nexport default is\r\n","import fontStyleStringify from './fontStyleStringify'\r\n\r\ninterface StyleConig {\r\n  fontFamily: string\r\n  fontSize: number\r\n}\r\ninterface Baselines {\r\n  middle: number\r\n  hanging: number\r\n  top: number\r\n  alphabetic: number\r\n  ideographic: number\r\n  bottom: number\r\n  lineHeight: number\r\n}\r\n\r\nlet canvas: HTMLCanvasElement\r\n\r\nexport default function getTextBaselines(\r\n  text: string,\r\n  styleConig: StyleConig,\r\n): Baselines {\r\n  if (!canvas) canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n  if (!ctx) throw new Error('Get context 2d failed.')\r\n  const font = fontStyleStringify(styleConig)\r\n\r\n  // clear before settings\r\n  canvas.width = 1\r\n  canvas.height = 1\r\n\r\n  ctx.font = font\r\n\r\n  ctx.textBaseline = 'middle'\r\n  const middle = ctx.measureText(text)\r\n  ctx.textBaseline = 'hanging'\r\n  const hanging = ctx.measureText(text)\r\n  ctx.textBaseline = 'top'\r\n  const top = ctx.measureText(text)\r\n  ctx.textBaseline = 'alphabetic'\r\n  const alphabetic = ctx.measureText(text)\r\n  ctx.textBaseline = 'ideographic'\r\n  const ideographic = ctx.measureText(text)\r\n  ctx.textBaseline = 'bottom'\r\n  const bottom = ctx.measureText(text)\r\n\r\n  const baselines = {\r\n    middle: 0,\r\n    hanging: hanging.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\r\n    top: top.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\r\n    alphabetic:\r\n      middle.actualBoundingBoxDescent - alphabetic.actualBoundingBoxDescent,\r\n    ideographic:\r\n      middle.actualBoundingBoxDescent - ideographic.actualBoundingBoxDescent,\r\n    bottom: middle.actualBoundingBoxDescent - bottom.actualBoundingBoxDescent,\r\n    lineHeight: 1,\r\n  }\r\n\r\n  baselines.lineHeight =\r\n    (Math.max(baselines.ideographic, baselines.bottom) -\r\n      Math.min(baselines.hanging, baselines.top)) /\r\n    styleConig.fontSize\r\n\r\n  return baselines\r\n}\r\n","import is from './is'\r\n\r\nconst num = (a: unknown, b: number): number => {\r\n  if (is.num(a)) return a\r\n  return b\r\n}\r\n\r\nconst use = {\r\n  num,\r\n}\r\n\r\nexport default use\r\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Ui {\n  @observable scale = 1\n\n  @observable offsetX = 0\n\n  @observable offsetY = 0\n\n  @observable width = 0\n\n  @observable height = 0\n\n  @observable previewText = 'Hello World!\\nHello Snow Bamboo!' // /\\r\\n|\\r|\\n/\n\n  @observable selectLetter = ''\n\n  @observable selectNextLetter = ''\n\n  @observable showPreview = false\n\n  @observable previewScale = 1\n\n  @observable previewOffsetX = 0\n\n  @observable previewOffsetY = 0\n\n  @observable packFailed = false\n\n  constructor(ui: Partial<Ui> = {}) {\n    if (ui.previewText) {\n      this.previewText = ui.previewText\n    }\n  }\n\n  reOffset() {\n    this.offsetX = Math.min(\n      Math.max(this.width / -2, this.offsetX),\n      this.width / 2,\n    )\n    this.offsetY = Math.min(\n      Math.max(this.height / -2, this.offsetY),\n      this.height / 2,\n    )\n    this.scale = Math.max(this.scale, 0.01)\n  }\n\n  @action.bound setTransform(trans: Partial<Ui>): void {\n    this.scale = use.num(trans.scale, this.scale)\n    this.offsetX = use.num(trans.offsetX, this.offsetX)\n    this.offsetY = use.num(trans.offsetY, this.offsetY)\n    this.reOffset()\n  }\n\n  @action.bound setSize(width: number, height: number): void {\n    this.width = width\n    this.height = height\n    this.reOffset()\n  }\n\n  @action.bound setPreviewText(text: string): void {\n    this.previewText = text\n  }\n\n  @action.bound setShowPreview(showPreview: boolean): void {\n    this.showPreview = showPreview\n  }\n\n  @action.bound setPreviewTransform(trans: Partial<Ui>): void {\n    this.previewScale = Math.max(\n      use.num(trans.previewScale, this.previewScale),\n      0.01,\n    )\n    this.previewOffsetX = use.num(trans.previewOffsetX, this.previewOffsetX)\n    this.previewOffsetY = use.num(trans.previewOffsetY, this.previewOffsetY)\n  }\n\n  @action.bound setSelectLetter(letter: string = '', next: string = ''): void {\n    this.selectLetter = letter\n    this.selectNextLetter = next\n  }\n\n  @action.bound setPackFailed(packFailed: boolean): void {\n    this.packFailed = packFailed\n  }\n}\n\nexport default Ui\n","import is from './is'\n\nexport interface FontStyleConfig {\n  fontStyle?: 'normal' | 'italic' | 'oblique' | string\n  fontVariant?: 'normal' | 'none' | 'small-caps' | string\n  fontWeight?:\n    | 'normal'\n    | 'bold'\n    | 'lighter'\n    | 'bolder'\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 100\n    | 200\n    | 300\n    | 400\n    | 500\n    | 600\n    | 700\n    | 800\n    | 900\n    | 'inherit'\n    | 'initial'\n    | 'unset'\n  fontSize?: string | number\n  lineHeight?: string | number\n  fontFamily?: string\n}\n\nconst defaultConfig: FontStyleConfig = {\n  fontSize: '14px',\n  fontFamily: 'sans-serif',\n}\n\n// https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\nexport default function fontStyleStringify(\n  fontStyleConfig: FontStyleConfig,\n): string {\n  const config = { ...defaultConfig, ...fontStyleConfig }\n  const arr = []\n\n  if (config.fontStyle) arr.push(config.fontStyle)\n\n  if (config.fontVariant) arr.push(config.fontVariant)\n\n  if (config.fontWeight) arr.push(config.fontWeight)\n\n  if (is.num(config.fontSize)) {\n    config.fontSize = `${config.fontSize}px`\n  } else {\n    config.fontSize = defaultConfig.fontSize\n  }\n\n  if (config.lineHeight) {\n    arr.push(`${config.fontSize}/${config.lineHeight}`)\n  } else {\n    arr.push(config.fontSize)\n  }\n\n  arr.push(config.fontFamily)\n\n  return arr.join(' ')\n}\n","let fontTargeCache: HTMLStyleElement\nlet loadDiv: HTMLDivElement\n\nexport default function updateFontFace(\n  name: string,\n  url: string,\n): Promise<void> {\n  const cssNode = document.createTextNode(`\n    @font-face {\n        font-family: \"${name}\";\n        src: url(\"${url}\") format('truetype');\n    }`)\n\n  if (!fontTargeCache) {\n    const textNode = document.createTextNode(`A`)\n    fontTargeCache = document.createElement('style')\n    loadDiv = document.createElement('div')\n    document.head.appendChild(fontTargeCache)\n    fontTargeCache.appendChild(cssNode)\n    loadDiv.appendChild(textNode)\n    loadDiv.style.position = 'absolute'\n    loadDiv.style.left = '-1000px'\n    loadDiv.style.top = '-1000px'\n    loadDiv.style.opacity = '0'\n    loadDiv.style.fontSize = '12px'\n    loadDiv.style.pointerEvents = 'none'\n    document.body.appendChild(loadDiv)\n  } else {\n    fontTargeCache.appendChild(cssNode)\n  }\n  loadDiv.style.fontFamily = name\n  return new Promise((resolve) => setTimeout(resolve, 200))\n}\n","import { action, observable, computed, runInAction } from 'mobx'\r\nimport getTextBaselines from 'src/utils/getTextBaselines'\r\nimport { parse, Font as OpenType } from 'opentype.js'\r\nimport updateFontFace from 'src/utils/updateFontFace'\r\nimport getFontBaselines from 'src/utils/getFontBaselines'\r\nimport is from 'src/utils/is'\r\n\r\nexport interface FontResource {\r\n  font: ArrayBuffer\r\n  family: string\r\n  opentype: OpenType\r\n}\r\n\r\nconst DEFAULT_FAMILY = 'sans-serif'\r\n\r\nclass Font {\r\n  @observable fonts: FontResource[] = []\r\n\r\n  @observable size: number\r\n\r\n  @observable lineHeight = 1\r\n\r\n  @observable middle = 0\r\n\r\n  @observable hanging = 0\r\n\r\n  @observable top = 0\r\n\r\n  @observable alphabetic = 0\r\n\r\n  @observable ideographic = 0\r\n\r\n  @observable bottom = 0\r\n\r\n  @observable sharp = 80\r\n\r\n  @computed get mainFont() {\r\n    if (this.fonts.length > 0) return this.fonts[0]\r\n    return null\r\n  }\r\n\r\n  @computed get mainFamily() {\r\n    if (this.mainFont) return this.mainFont.family\r\n    return DEFAULT_FAMILY\r\n  }\r\n\r\n  @computed get opentype() {\r\n    if (this.mainFont) return this.mainFont.opentype\r\n    return null\r\n  }\r\n\r\n  @computed get family(): string {\r\n    return (\r\n      this.fonts.map((fontResource) => `\"${fontResource.family}\"`).join(',') ||\r\n      DEFAULT_FAMILY\r\n    )\r\n  }\r\n\r\n  @computed get minBaseLine() {\r\n    const min = Math.min(\r\n      this.middle,\r\n      this.hanging,\r\n      this.top,\r\n      this.alphabetic,\r\n      this.ideographic,\r\n      this.bottom,\r\n    )\r\n    if (Number.isNaN(Number(min))) return 0\r\n    return min\r\n  }\r\n\r\n  @computed get maxBaseLine() {\r\n    const max = Math.max(\r\n      this.middle,\r\n      this.hanging,\r\n      this.top,\r\n      this.alphabetic,\r\n      this.ideographic,\r\n      this.bottom,\r\n    )\r\n    if (Number.isNaN(Number(max))) return this.size\r\n    return max\r\n  }\r\n\r\n  constructor(font: Partial<Font> = {}) {\r\n    this.size = font.size || 72\r\n    // this.lineHeight = font.lineHeight || 1.25\r\n    this.sharp = is.num(font.sharp) ? font.sharp : 80\r\n    if (font.fonts && font.fonts.length) {\r\n      font.fonts.forEach((fontResource) => this.addFont(fontResource.font))\r\n    } else {\r\n      this.updateBaseines()\r\n    }\r\n  }\r\n\r\n  updateBaseines(): void {\r\n    let bls\r\n    if (this.mainFont?.opentype) {\r\n      bls = getFontBaselines(this.mainFont.opentype, this.size)\r\n    } else {\r\n      bls = getTextBaselines('x', {\r\n        fontFamily: this.family,\r\n        fontSize: this.size,\r\n      })\r\n    }\r\n    this.lineHeight = bls.lineHeight\r\n    this.middle = bls.middle\r\n    this.hanging = bls.hanging\r\n    this.top = bls.top\r\n    this.alphabetic = bls.alphabetic\r\n    this.ideographic = bls.ideographic\r\n    this.bottom = bls.bottom\r\n  }\r\n\r\n  @action.bound addFont(font: ArrayBuffer): Promise<void> {\r\n    let opentype: OpenType\r\n    try {\r\n      opentype = parse(font, { lowMemory: true })\r\n    } catch (e) {\r\n      return Promise.reject(e)\r\n    }\r\n    const { names } = opentype\r\n    const family = names.postScriptName[Object.keys(names.postScriptName)[0]]\r\n    const hasFont = this.fonts.find(\r\n      (fontResource) => fontResource.family === family,\r\n    )\r\n    if (hasFont) {\r\n      return Promise.reject(new Error('Font already exists.'))\r\n    }\r\n    const url = URL.createObjectURL(new Blob([font]))\r\n    return updateFontFace(family, url).then(() => {\r\n      runInAction(() => {\r\n        this.fonts.push({\r\n          font,\r\n          family,\r\n          opentype,\r\n        })\r\n        this.updateBaseines()\r\n      })\r\n    })\r\n  }\r\n\r\n  @action.bound removeFont(fontResource: FontResource) {\r\n    const idx = this.fonts.indexOf(fontResource)\r\n    if (idx === -1) return\r\n    this.fonts.splice(idx, 1)\r\n    if (idx === 0) {\r\n      this.updateBaseines()\r\n    }\r\n  }\r\n\r\n  @action.bound setSize(size: number): void {\r\n    this.size = size\r\n    this.updateBaseines()\r\n  }\r\n\r\n  @action.bound setLineHeight(lineHeight: number): void {\r\n    this.lineHeight = lineHeight\r\n  }\r\n\r\n  @action.bound setSharp(sharp: number): void {\r\n    this.sharp = sharp\r\n  }\r\n}\r\n\r\nexport default Font\r\n","import { action, computed, observable } from 'mobx'\n\n// import GradientPaletteItem from './gradientPaletteItem'\n\nexport enum GradientType {\n  LINEAR,\n  RADIAL,\n}\n\nexport interface GradientColor {\n  offset: number\n  color: string\n}\n\nexport interface GradientPaletteItem extends GradientColor {\n  id: number\n}\n\nexport interface GradientColorOption extends GradientColor {\n  id?: number\n}\n\nclass Gradient {\n  @observable type: GradientType = 0\n\n  @observable angle: number\n\n  @observable.shallow palette: GradientPaletteItem[] = []\n\n  constructor(gradient: Partial<Gradient> = {}) {\n    this.type = gradient.type && GradientType[gradient.type] ? gradient.type : 0\n    this.angle = gradient.angle || 0\n    if (gradient.palette) {\n      gradient.palette.forEach((item) => {\n        this.palette.push({\n          ...item,\n          id: item.id || this.nextId,\n        })\n      })\n    } else {\n      this.addColor(0, 'rgba(255,255,255,1)')\n      this.addColor(1)\n    }\n  }\n\n  @computed get ids(): number[] {\n    return this.palette.map((color) => color.id)\n  }\n\n  @computed get nextId(): number {\n    if (this.ids.length === 0) return 1\n    return Math.max(...this.ids) + 1\n  }\n\n  @action.bound setType(type: GradientType): void {\n    this.type = type\n  }\n\n  @action.bound setAngle(angle: number): void {\n    this.angle = angle\n  }\n\n  @action.bound addColor(offset = 0, color = 'rgba(0,0,0,1)'): void {\n    this.palette.push({ offset, color, id: this.nextId })\n  }\n\n  @action.bound updatePalette(palette: GradientPaletteItem[]): void {\n    this.palette = palette\n  }\n}\n\nexport default Gradient\n","import { Font } from 'opentype.js'\r\n\r\ninterface Baselines {\r\n  middle: number\r\n  hanging: number\r\n  top: number\r\n  alphabetic: number\r\n  ideographic: number\r\n  bottom: number\r\n  lineHeight: number\r\n}\r\n\r\nexport default function getFontBaselines(\r\n  font: Font,\r\n  fontSize: number,\r\n): Baselines {\r\n  const scale = fontSize / font.unitsPerEm\r\n  const height = font.ascender - font.descender\r\n  const fontHeight = height * scale\r\n  const alphabetic = font.ascender * scale\r\n\r\n  return {\r\n    middle: 0,\r\n    hanging: 0,\r\n    top: fontHeight / -2,\r\n    alphabetic: alphabetic - fontHeight / 2,\r\n    ideographic: 0,\r\n    bottom: fontHeight / 2,\r\n    lineHeight: height / font.unitsPerEm,\r\n  }\r\n}\r\n","export default function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = atob(base64)\n  const len = binaryString.length\n  const bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i += 1) {\n    bytes[i] = binaryString.charCodeAt(i)\n  }\n  return bytes.buffer\n}\n","import { action, observable, runInAction } from 'mobx'\nimport use from 'src/utils/use'\nimport base64ToArrayBuffer from 'src/utils/base64ToArrayBuffer'\n\nexport type Repetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat'\n\nconst DEFAULT_IMAGE =\n  'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX////MzMw46qqDAAAADklEQVQI12Pgh8IPEAgAEeAD/Xk4HBcAAAAASUVORK5CYII='\n\nclass PatternTexture {\n  @observable.ref buffer: ArrayBuffer = base64ToArrayBuffer(DEFAULT_IMAGE)\n\n  @observable.ref image: HTMLImageElement | null = null\n\n  @observable src = ''\n\n  @observable repetition: Repetition = 'repeat'\n\n  @observable scale: number\n\n  constructor(pt: Partial<PatternTexture> = {}) {\n    this.scale = use.num(pt.scale, 1)\n    this.repetition = pt.repetition || 'repeat'\n    this.setImage(pt.buffer || this.buffer)\n  }\n\n  @action.bound setImage(buffer: ArrayBuffer): void {\n    const src = URL.createObjectURL(new Blob([buffer]))\n    const img = new Image()\n    img.onload = () => {\n      runInAction('setPatternTextureImage', () => {\n        this.buffer = buffer\n        this.image = img\n        this.src = src\n        img.onload = null\n      })\n    }\n    img.src = src\n  }\n\n  @action.bound setRepetition(repetition: Repetition): void {\n    this.repetition = repetition\n  }\n\n  @action.bound setScale(scale: number): void {\n    this.scale = scale\n  }\n}\n\nexport default PatternTexture\n","import { action, observable } from 'mobx'\n\nimport Gradient from './gradient'\nimport PatternTexture from './patternTexture'\n\nexport enum FillType {\n  SOLID,\n  GRADIENT,\n  IMAGE,\n}\n\nclass Fill {\n  @observable type: FillType\n\n  @observable color: string\n\n  @observable.shallow gradient: Gradient\n\n  @observable.shallow patternTexture: PatternTexture\n\n  constructor(fill: Partial<Fill> = {}) {\n    this.color = fill.color || '#000000'\n    this.type = fill.type && FillType[fill.type] ? fill.type : 0\n    this.gradient = new Gradient(fill.gradient)\n    this.patternTexture = new PatternTexture(fill.patternTexture)\n  }\n\n  @action.bound setType(type: FillType = 0): void {\n    this.type = type\n  }\n\n  @action.bound setColor(color = '#000000'): void {\n    this.color = color\n  }\n}\n\nexport default Fill\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nimport Fill from './fill'\n\nclass Stroke extends Fill {\n  @observable width = 1\n\n  /**\n   * butt   默认。向线条的每个末端添加平直的边缘。\n   * round  向线条的每个末端添加圆形线帽。\n   * square 向线条的每个末端添加正方形线帽。\n   */\n  @observable lineCap: CanvasLineCap\n\n  /**\n   * bevel 创建斜角。\n   * round 创建圆角。\n   * miter 默认。创建尖角。\n   */\n  @observable lineJoin: CanvasLineJoin\n\n  constructor(stroke: Partial<Stroke> = {}) {\n    super(stroke)\n    this.width = use.num(stroke.width, 1)\n    this.lineCap = stroke.lineCap || 'round'\n    this.lineJoin = stroke.lineJoin || 'round'\n  }\n\n  @action.bound setWidth(width: number): void {\n    this.width = width\n  }\n\n  @action.bound setLineCap(lineCap: CanvasLineCap): void {\n    this.lineCap = lineCap\n  }\n\n  @action.bound setLineJoin(lineJoin: CanvasLineJoin): void {\n    this.lineJoin = lineJoin\n  }\n}\n\nexport default Stroke\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Shadow {\n  @observable color: string\n\n  @observable blur = 1\n\n  @observable offsetX = 1\n\n  @observable offsetY = 1\n\n  constructor(shadow: Partial<Shadow> = {}) {\n    this.color = shadow.color || '#000000'\n    this.blur = use.num(shadow.blur, 1)\n    this.offsetX = use.num(shadow.offsetX, 1)\n    this.offsetY = use.num(shadow.offsetY, 1)\n  }\n\n  @action.bound setColor(color: string): void {\n    this.color = color\n  }\n\n  @action.bound setBlur(blur: number): void {\n    this.blur = blur\n  }\n\n  @action.bound setOffsetX(offsetX: number): void {\n    this.offsetX = offsetX\n  }\n\n  @action.bound setOffsetY(offsetY: number): void {\n    this.offsetY = offsetY\n  }\n\n  @action.bound setOffset(offsetX: number, offsetY: number): void {\n    this.offsetX = offsetX\n    this.offsetY = offsetY\n  }\n}\n\nexport default Shadow\n","import { action, observable } from 'mobx'\n\nimport Font from './font'\nimport Fill from './fill'\nimport Stroke from './stroke'\nimport Shadow from './shadow'\n\nclass Style {\n  @observable readonly font: Font\n\n  @observable readonly fill: Fill\n\n  @observable useStroke: boolean\n\n  @observable readonly stroke: Stroke\n\n  @observable useShadow: boolean\n\n  @observable readonly shadow: Shadow\n\n  @observable bgColor = 'rgba(0,0,0,0)'\n\n  constructor(style: Partial<Style> = {}) {\n    this.font = new Font(style.font)\n    this.fill = new Fill(style.fill)\n    this.stroke = new Stroke(style.stroke)\n    this.shadow = new Shadow(style.shadow)\n    this.useShadow = !!style.useShadow\n    this.useStroke = !!style.useStroke\n  }\n\n  @action.bound setUseStroke(useStroke: boolean): void {\n    this.useStroke = useStroke\n  }\n\n  @action.bound setUseShadow(useShadow: boolean): void {\n    this.useShadow = useShadow\n  }\n\n  @action.bound setBgColor(bgColor: string): void {\n    this.bgColor = bgColor\n  }\n}\n\nexport default Style\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Layout {\n  @observable padding = 1\n\n  @observable spacing = 1\n\n  @observable width = 1024\n\n  @observable height = 1024\n\n  @observable auto = true\n\n  @observable fixedSize = false\n\n  constructor(layout: Partial<Layout> = {}) {\n    this.padding = use.num(layout.padding, 1)\n\n    this.spacing = use.num(layout.spacing, 1)\n\n    this.width = use.num(layout.width, 1024)\n\n    this.height = use.num(layout.height, 1024)\n\n    // Compatible with old files, default true.\n    this.auto = layout.auto === false ? false : true\n\n    this.fixedSize = !!layout.fixedSize\n  }\n\n  @action.bound setPadding(padding: number): void {\n    this.padding = padding\n  }\n\n  @action.bound setSpacing(spacing: number): void {\n    this.spacing = spacing\n  }\n\n  @action.bound setWidth(width: number): void {\n    this.width = width\n  }\n\n  @action.bound setHeight(height: number): void {\n    this.height = height\n  }\n\n  @action.bound setAuto(auto: boolean): void {\n    this.auto = auto\n  }\n\n  @action.bound setFixedSize(fixedSize: boolean): void {\n    this.fixedSize = fixedSize\n  }\n}\n\nexport default Layout\n","import { action, observable } from 'mobx'\n\nclass Metric {\n  @observable xAdvance = 0\n\n  @observable xOffset = 0\n\n  @observable yOffset = 0\n\n  constructor(metric: Partial<Metric> = {}) {\n    this.xAdvance = metric.xAdvance || 0\n    this.xOffset = metric.xOffset || 0\n    this.yOffset = metric.yOffset || 0\n  }\n\n  @action.bound setXAdvance(xAdvance: number): void {\n    this.xAdvance = xAdvance\n  }\n\n  @action.bound setXOffset(xOffset: number): void {\n    this.xOffset = xOffset\n  }\n\n  @action.bound setYOffset(yOffset: number): void {\n    this.yOffset = yOffset\n  }\n}\n\nexport default Metric\n","export interface TrimImageInfo {\n  width: number\n  height: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n}\n\nexport default function trimImageData(\n  imageData: ImageData,\n  threshold = 0,\n): TrimImageInfo {\n  const { data, width, height } = imageData\n  let topTrim = 0\n  let bottomTrim = 0\n  let leftTrim = 0\n  let rightTrim = 0\n  let topStatus = true\n  let bottomStatus = true\n  let leftStatus = true\n  let rightStatus = true\n\n  let h: number = Math.ceil(height / 2)\n  const w: number = Math.ceil(width / 2)\n\n  for (let i = 0; i < h; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      if (topStatus && data[(i * width + j) * 4 + 3] > threshold) {\n        topStatus = false\n      }\n      if (\n        bottomStatus &&\n        data[((height - i - 1) * width + j) * 4 + 3] > threshold\n      ) {\n        bottomStatus = false\n      }\n      if (!topStatus && !bottomStatus) {\n        break\n      }\n    }\n    if (!topStatus && !bottomStatus) {\n      break\n    }\n    if (topStatus) topTrim += 1\n    if (bottomStatus) bottomTrim += 1\n  }\n\n  if (topTrim + bottomTrim >= height) {\n    // Is empty image.\n    return {\n      trimOffsetLeft: width * -1,\n      trimOffsetTop: height * -1,\n      width: 0,\n      height: 0,\n    }\n  }\n\n  h = height - bottomTrim\n\n  for (let i = 0; i < w; i += 1) {\n    for (let j = topTrim; j < h; j += 1) {\n      if (leftStatus && data[(width * j + i) * 4 + 3] > threshold) {\n        leftStatus = false\n      }\n      if (\n        rightStatus &&\n        data[(width * j + width - i - 1) * 4 + 3] > threshold\n      ) {\n        rightStatus = false\n      }\n      if (!leftStatus && !rightStatus) {\n        break\n      }\n    }\n    if (!leftStatus && !rightStatus) {\n      break\n    }\n    if (leftStatus) leftTrim += 1\n    if (rightStatus) rightTrim += 1\n  }\n\n  return {\n    trimOffsetLeft: leftTrim * -1,\n    trimOffsetTop: topTrim * -1,\n    width: width - leftTrim - rightTrim,\n    height: height - topTrim - bottomTrim,\n  }\n}\n","export interface Point {\n  x: number\n  y: number\n}\n\nexport default function getPointOnCircle(\n  x: number,\n  y: number,\n  r: number,\n  angle: number,\n): Point {\n  return {\n    x: x + r * Math.cos((Math.PI / 180) * angle),\n    y: y + r * Math.sin((Math.PI / 180) * angle),\n  }\n}\n","import getPointOnCircle from './getPointOnCircle'\n\ninterface GarentColor {\n  offset: number\n  color: string\n}\n\ninterface Pradient {\n  type: 0 | 1\n  palette: GarentColor[]\n  angle: number\n}\n\ninterface PatternTexture {\n  image: HTMLImageElement | null\n  repetition: string\n  scale: number\n}\n\ninterface Config {\n  type: number\n  color: string\n  gradient: Pradient\n  patternTexture: PatternTexture\n}\n\nconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\nconst matrix = svg.createSVGMatrix()\n\nexport default function getCanvasStyle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  config: Config,\n): string | CanvasGradient | CanvasPattern {\n  // 纯色\n  if (config.type === 0) {\n    return config.color\n  }\n\n  // 渐变\n  if (config.type === 1) {\n    const { type, palette, angle } = config.gradient\n    let gradient: CanvasGradient\n    const cx = x + width / 2\n    const cy = y + height / 2\n    const r = Math.max(width, height) / 2\n    if (type === 0) {\n      const startPoint = getPointOnCircle(cx, cy, r, angle + 180)\n      const endPoint = getPointOnCircle(cx, cy, r, angle)\n      gradient = ctx.createLinearGradient(\n        startPoint.x,\n        startPoint.y,\n        endPoint.x,\n        endPoint.y,\n      )\n    } else {\n      gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, r)\n    }\n\n    palette.forEach((color) => {\n      gradient.addColorStop(color.offset, color.color)\n    })\n\n    return gradient\n  }\n\n  const { image, repetition, scale } = config.patternTexture\n  if (!image) return 'rgba(0,0,0,0)'\n\n  const pattern = ctx.createPattern(image, repetition)\n  if (!pattern) return 'rgba(0,0,0,0)'\n  // TODO: Add trim translate and rotate.\n  pattern.setTransform(matrix.scale(scale).translate(x, y))\n  return pattern\n}\n","import fontStyleStringify, { FontStyleConfig } from './fontStyleStringify'\n\nexport interface TextSize {\n  text: string\n  font: string\n  width: number\n  height: number\n  fontWidth: number\n  fontHeight: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n  trimOffsetRight: number\n  trimOffsetBottom: number\n}\n\nlet canvas: HTMLCanvasElement\n\nexport default function getTextSize(\n  text: string,\n  config: FontStyleConfig,\n): TextSize {\n  if (!canvas) canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  if (!ctx) throw new Error('Get context 2d failed.')\n\n  // clear before settings\n  canvas.width = 1\n  canvas.height = 1\n\n  const font = fontStyleStringify(config)\n\n  ctx.font = font\n\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'bottom'\n\n  const testA = ctx.measureText(text)\n\n  if (typeof testA.actualBoundingBoxLeft === 'undefined') {\n    return {\n      text,\n      font,\n      width: testA.width,\n      height: parseInt(`${config.fontSize ?? '14'}`, 10),\n      fontWidth: testA.width,\n      fontHeight: parseInt(`${config.fontSize ?? '14'}`, 10),\n      trimOffsetTop: 0,\n      trimOffsetLeft: 0,\n      trimOffsetRight: 0,\n      trimOffsetBottom: 0,\n    }\n  }\n\n  ctx.textAlign = 'right'\n  ctx.textBaseline = 'top'\n\n  const testB = ctx.measureText(text)\n\n  const trimOffsetLeft = Math.ceil(testA.actualBoundingBoxLeft)\n  const trimOffsetRight = Math.ceil(testB.actualBoundingBoxRight)\n  const trimOffsetTop = Math.ceil(testB.actualBoundingBoxAscent)\n  const trimOffsetBottom = Math.ceil(testA.actualBoundingBoxDescent)\n  const width = trimOffsetLeft + Math.ceil(testA.actualBoundingBoxRight)\n  const height = trimOffsetBottom + Math.ceil(testA.actualBoundingBoxAscent)\n  const fontWidth = Math.ceil(testA.width)\n  const fontHeight =\n    testA.actualBoundingBoxAscent - testB.actualBoundingBoxAscent\n\n  return {\n    text,\n    font,\n    width,\n    height,\n    fontWidth,\n    fontHeight,\n    trimOffsetTop,\n    trimOffsetLeft,\n    trimOffsetRight,\n    trimOffsetBottom,\n  }\n}\n","/**\r\n * Snap code from: https://opentype.js.org/\r\n */\r\n\r\nimport type { Path } from 'opentype.js'\r\n\r\nfunction sharp(v: number, distance: number = 1, strength: number = 80) {\r\n  return v * (1.0 - strength) + strength * Math.round(v / distance) * distance\r\n}\r\n\r\nexport default function pathDoSharp(\r\n  path: Path,\r\n  snapStrength = 80,\r\n  snapDistance = 1,\r\n  snapX = 0,\r\n  snapY = 0,\r\n) {\r\n  const strength = snapStrength / 100.0\r\n  for (let i = 0; i < path.commands.length; i++) {\r\n    const cmd = path.commands[i]\r\n    if (cmd.type !== 'Z') {\r\n      cmd.x = sharp(cmd.x + snapX, snapDistance, strength) - snapX\r\n      cmd.y = sharp(cmd.y + snapY, snapDistance, strength) - snapY\r\n    }\r\n    if (cmd.type === 'Q' || cmd.type === 'C') {\r\n      cmd.x1 = sharp(cmd.x1 + snapX, snapDistance, strength) - snapX\r\n      cmd.y1 = sharp(cmd.y1 + snapY, snapDistance, strength) - snapY\r\n    }\r\n    if (cmd.type === 'C') {\r\n      cmd.x2 = sharp(cmd.x2 + snapX, snapDistance, strength) - snapX\r\n      cmd.y2 = sharp(cmd.y2 + snapY, snapDistance, strength) - snapY\r\n    }\r\n  }\r\n}\r\n","import { PathCommand } from 'opentype.js'\r\n\r\nexport default function ctxDoPath(\r\n  ctx: CanvasRenderingContext2D,\r\n  commands: PathCommand[],\r\n) {\r\n  ctx.beginPath()\r\n  for (let i = 0; i < commands.length; i += 1) {\r\n    const cmd = commands[i]\r\n    if (cmd.type === 'M') {\r\n      ctx.moveTo(cmd.x, cmd.y)\r\n    } else if (cmd.type === 'L') {\r\n      ctx.lineTo(cmd.x, cmd.y)\r\n    } else if (cmd.type === 'C') {\r\n      ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y)\r\n    } else if (cmd.type === 'Q') {\r\n      ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y)\r\n    } else if (cmd.type === 'Z') {\r\n      ctx.closePath()\r\n    }\r\n  }\r\n}\r\n","import trimImageData from './trimImageData'\r\nimport { TextSize } from './getTextSize'\r\nimport getCanvasStyle from './getCanvasStyle'\r\nimport { Style } from 'src/store'\r\nimport pathDoSharp from './pathDoSharp'\r\nimport ctxDoPath from './ctxDoPath'\r\n\r\nexport interface GlyphInfo extends TextSize {\r\n  canvas: HTMLCanvasElement | null\r\n}\r\n\r\ninterface ParentColor {\r\n  offset: number\r\n  color: string\r\n}\r\n\r\ninterface Gradient {\r\n  type: 0 | 1\r\n  palette: ParentColor[]\r\n  angle: number\r\n}\r\n\r\ninterface PatternTexture {\r\n  image: HTMLImageElement | null\r\n  repetition: string\r\n  scale: number\r\n}\r\n\r\ninterface Fill {\r\n  type: number\r\n  color: string\r\n  gradient: Gradient\r\n  patternTexture: PatternTexture\r\n}\r\n\r\ninterface Stroke extends Fill {\r\n  width: number\r\n  lineJoin: CanvasLineJoin\r\n  lineCap: CanvasLineCap\r\n}\r\n\r\ninterface Font {\r\n  family: string\r\n  size: number\r\n}\r\n\r\ninterface Shadow {\r\n  color: string\r\n  blur: number\r\n  offsetX: number\r\n  offsetY: number\r\n}\r\n\r\nexport interface Config {\r\n  font: Font\r\n  fill: Fill\r\n  stroke?: Stroke\r\n  shadow?: Shadow\r\n}\r\n\r\nexport default function getFontGlyphInfo(\r\n  text: string,\r\n  config: Style,\r\n): GlyphInfo {\r\n  const { font, stroke, shadow, fill } = config\r\n\r\n  const fontResource = font.fonts.find(({ opentype }) => {\r\n    if (!opentype) return false\r\n\r\n    const glyph = opentype.charToGlyph(text)\r\n    if (glyph.unicode) {\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n\r\n  if (!fontResource) {\r\n    throw new Error('Not Find Font.')\r\n  }\r\n\r\n  const opentype = fontResource.opentype\r\n\r\n  const glyph = opentype.charToGlyph(text)\r\n  const scale = font.size / opentype.unitsPerEm\r\n  const baseline = Math.ceil(opentype.ascender * scale)\r\n\r\n  let path = glyph.getPath(0, baseline, font.size)\r\n  pathDoSharp(path, font.sharp)\r\n  let boundingBox = path.getBoundingBox()\r\n\r\n  const fontWidth = opentype.getAdvanceWidth(text, font.size)\r\n  const fontHeight = (opentype.ascender - opentype.descender) * scale\r\n  const trimInfo = {\r\n    text,\r\n    font: font.family,\r\n    width: Math.ceil(boundingBox.x2) - Math.floor(boundingBox.x1),\r\n    height: Math.ceil(boundingBox.y2) - Math.floor(boundingBox.y1),\r\n    fontWidth,\r\n    fontHeight,\r\n    trimOffsetTop: boundingBox.y1 * -1,\r\n    trimOffsetLeft: boundingBox.x1 * -1,\r\n    trimOffsetRight: (fontWidth - boundingBox.x1) * -1,\r\n    trimOffsetBottom: (fontHeight - boundingBox.y2) * -1,\r\n  }\r\n\r\n  const { width, height, trimOffsetLeft, trimOffsetTop } = trimInfo\r\n  if (width === 0 || height === 0) return { canvas: null, ...trimInfo }\r\n\r\n  const lineWidth = stroke ? stroke.width * 2 : 0 // canvas is center stroke\r\n  let addX = lineWidth\r\n  let addY = lineWidth\r\n\r\n  if (shadow) {\r\n    const blur = Math.ceil(shadow.blur * 1.5)\r\n    addX += Math.abs(shadow.offsetX) + blur\r\n    addY += Math.abs(shadow.offsetY) + blur\r\n  }\r\n\r\n  let canvas = document.createElement('canvas')\r\n  let ctx = canvas.getContext('2d') as CanvasRenderingContext2D\r\n  canvas.width = width + addX * 2\r\n  canvas.height = height + addY * 2\r\n\r\n  if (shadow) {\r\n    ctx.shadowColor = shadow.color\r\n    ctx.shadowBlur = shadow.blur\r\n    ctx.shadowOffsetX = shadow.offsetX\r\n    ctx.shadowOffsetY = shadow.offsetY\r\n  }\r\n\r\n  if (stroke && lineWidth) {\r\n    const strokCanvas = document.createElement('canvas')\r\n    strokCanvas.width = canvas.width\r\n    strokCanvas.height = canvas.height\r\n    const sctx = strokCanvas.getContext('2d') as CanvasRenderingContext2D\r\n    sctx.translate(addX + trimOffsetLeft, addY + trimOffsetTop)\r\n\r\n    sctx.lineCap = stroke.lineCap\r\n    sctx.lineJoin = stroke.lineJoin\r\n    sctx.lineWidth = path.strokeWidth = lineWidth\r\n    sctx.strokeStyle = path.stroke = getCanvasStyle(\r\n      sctx,\r\n      0,\r\n      0,\r\n      fontWidth,\r\n      fontHeight,\r\n      stroke,\r\n    ) as string\r\n\r\n    ctxDoPath(sctx, path.commands)\r\n    sctx.stroke()\r\n    sctx.globalCompositeOperation = 'destination-out'\r\n    sctx.fill()\r\n    sctx.globalCompositeOperation = 'source-over'\r\n    sctx.fillStyle = getCanvasStyle(sctx, 0, 0, fontWidth, fontHeight, fill)\r\n    sctx.fill()\r\n    ctx.drawImage(strokCanvas, 0, 0)\r\n  } else {\r\n    ctx.translate(addX + trimOffsetLeft, addY + trimOffsetTop)\r\n    ctxDoPath(ctx, path.commands)\r\n    ctx.fillStyle = getCanvasStyle(ctx, 0, 0, fontWidth, fontHeight, fill)\r\n    ctx.fill()\r\n  }\r\n\r\n  if (canvas.width === 0 || canvas.height === 0) {\r\n    return {\r\n      canvas,\r\n      ...trimInfo,\r\n    }\r\n  }\r\n\r\n  const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n  const styleTrimInfo = trimImageData(imgData)\r\n  canvas.width = trimInfo.width = styleTrimInfo.width\r\n  canvas.height = trimInfo.height = styleTrimInfo.height\r\n\r\n  ctx.putImageData(\r\n    imgData,\r\n    styleTrimInfo.trimOffsetLeft,\r\n    styleTrimInfo.trimOffsetTop,\r\n  )\r\n\r\n  trimInfo.trimOffsetLeft += addX + styleTrimInfo.trimOffsetLeft\r\n  trimInfo.trimOffsetTop += addY + styleTrimInfo.trimOffsetTop\r\n  trimInfo.trimOffsetBottom +=\r\n    addY +\r\n    (height + addY * 2 + styleTrimInfo.trimOffsetTop - styleTrimInfo.height)\r\n\r\n  return {\r\n    canvas,\r\n    ...trimInfo,\r\n  }\r\n}\r\n","import trimImageData from './trimImageData'\nimport getTextSize, { TextSize } from './getTextSize'\nimport fontStyleStringify from './fontStyleStringify'\nimport getCanvasStyle from './getCanvasStyle'\n\nexport interface GlyphInfo extends TextSize {\n  canvas: HTMLCanvasElement | null\n}\n\ninterface ParentColor {\n  offset: number\n  color: string\n}\n\ninterface Gradient {\n  type: 0 | 1\n  palette: ParentColor[]\n  angle: number\n}\n\ninterface PatternTexture {\n  image: HTMLImageElement | null\n  repetition: string\n  scale: number\n}\n\ninterface Fill {\n  type: number\n  color: string\n  gradient: Gradient\n  patternTexture: PatternTexture\n}\n\ninterface Stroke extends Fill {\n  width: number\n  lineJoin: CanvasLineJoin\n  lineCap: CanvasLineCap\n}\n\ninterface Font {\n  family: string\n  size: number\n}\n\ninterface Shadow {\n  color: string\n  blur: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface Config {\n  font: Font\n  fill: Fill\n  stroke?: Stroke\n  shadow?: Shadow\n}\n\nexport default function getGlyphInfo(text: string, config: Config): GlyphInfo {\n  const { font, stroke, shadow, fill } = config\n\n  const styleConig = {\n    fontSize: font.size,\n    fontFamily: font.family,\n  }\n\n  const trimInfo = getTextSize(text, styleConig)\n  const { width, height, trimOffsetLeft, trimOffsetTop } = trimInfo\n  if (width === 0 || height === 0) return { canvas: null, ...trimInfo }\n\n  const lineWidth = stroke ? stroke.width * 2 : 0 // canvas is center stroke\n  let addX = lineWidth\n  let addY = lineWidth\n  let styleX = (width - font.size) / 2\n  let styleY = trimOffsetTop\n\n  if (shadow) {\n    const blur = Math.ceil(shadow.blur * 1.5)\n    addX += Math.abs(shadow.offsetX) + blur\n    addY += Math.abs(shadow.offsetY) + blur\n  }\n\n  styleX += addX\n  styleY += addY\n\n  let canvas = document.createElement('canvas')\n  let ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n  canvas.width = width + addX * 2\n  canvas.height = height + addY * 2\n\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'top'\n\n  ctx.font = fontStyleStringify({\n    fontSize: font.size,\n    fontFamily: font.family,\n  })\n\n  if (stroke && lineWidth) {\n    ctx.lineWidth = lineWidth\n    ctx.lineCap = stroke.lineCap\n    ctx.lineJoin = stroke.lineJoin\n    ctx.strokeStyle = getCanvasStyle(\n      ctx,\n      styleX,\n      styleY,\n      font.size,\n      font.size,\n      stroke,\n    )\n    ctx.strokeText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\n  }\n\n  ctx.fillStyle = getCanvasStyle(\n    ctx,\n    styleX,\n    styleY,\n    font.size,\n    font.size,\n    fill,\n  )\n  ctx.fillText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\n\n  if (shadow) {\n    const cvs = document.createElement('canvas')\n    cvs.width = width + addX * 2\n    cvs.height = height + addY * 2\n    const newCtx = cvs.getContext('2d') as CanvasRenderingContext2D\n\n    newCtx.shadowColor = shadow.color\n    newCtx.shadowBlur = shadow.blur\n    newCtx.shadowOffsetX = shadow.offsetX\n    newCtx.shadowOffsetY = shadow.offsetY\n\n    newCtx.drawImage(canvas, 0, 0)\n\n    canvas = cvs\n    ctx = newCtx\n  }\n\n  if (canvas.width === 0 || canvas.height === 0) {\n    return {\n      canvas,\n      ...trimInfo,\n    }\n  }\n\n  const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  const styleTrimInfo = trimImageData(imgData)\n  canvas.width = styleTrimInfo.width\n  canvas.height = styleTrimInfo.height\n  trimInfo.width = styleTrimInfo.width\n  trimInfo.height = styleTrimInfo.height\n  ctx.putImageData(\n    imgData,\n    styleTrimInfo.trimOffsetLeft,\n    styleTrimInfo.trimOffsetTop,\n  )\n  trimInfo.trimOffsetLeft += addX + styleTrimInfo.trimOffsetLeft\n  trimInfo.trimOffsetTop += addY + styleTrimInfo.trimOffsetTop\n  trimInfo.trimOffsetBottom +=\n    addY +\n    (height + addY * 2 + styleTrimInfo.trimOffsetTop - styleTrimInfo.height)\n\n  return {\n    canvas,\n    ...trimInfo,\n  }\n}\n","import { observable, action } from 'mobx'\n\nimport Metric from './metric'\n\nexport type GlyphType = 'text' | 'image'\n\nclass GlyphBase {\n  readonly type: GlyphType = 'text'\n\n  @observable letter = ''\n\n  @observable.ref source: HTMLImageElement | HTMLCanvasElement | null = null\n\n  @observable width = 0\n\n  @observable height = 0\n\n  @observable x = 0\n\n  @observable y = 0\n\n  @observable fontWidth = 0\n\n  @observable fontHeight = 0\n\n  @observable trimOffsetTop = 0\n\n  @observable trimOffsetLeft = 0\n\n  @observable trimOffsetRight = 0\n\n  @observable trimOffsetBottom = 0\n\n  @observable.ref adjustMetric: Metric\n\n  @observable kerning: Map<string, number> = new Map()\n\n  constructor(glyph: Partial<GlyphBase> = {}) {\n    this.letter = glyph.letter || ''\n    this.adjustMetric = new Metric(glyph.adjustMetric)\n\n    if (glyph.kerning) {\n      this.kerning = glyph.kerning\n    }\n  }\n\n  @action.bound steKerning(text: string, kerning: number) {\n    this.kerning.set(text, kerning)\n  }\n}\n\nexport default GlyphBase\n","import { action } from 'mobx'\r\nimport getFontGlyphInfo from 'src/utils/getFontGlyphInfo'\r\nimport getGlyphInfo, { Config } from 'src/utils/getGlyphInfo'\r\nimport GlyphBase from './glyphBase'\r\n\r\nimport Style from './style'\r\n\r\nclass GlyphFont extends GlyphBase {\r\n  constructor(galyphFont: Partial<GlyphFont> = {}, textStyle: Style) {\r\n    super(galyphFont)\r\n    this.setGlyphInfo(textStyle)\r\n  }\r\n\r\n  @action setGlyphInfo(textStyle: Style): void {\r\n    const { font, fill, useStroke, stroke, useShadow, shadow } = textStyle\r\n    const config: Config = { font, fill }\r\n    if (useStroke) config.stroke = stroke\r\n    if (useShadow) config.shadow = shadow\r\n\r\n    let glyphInfo\r\n    try {\r\n      glyphInfo = getFontGlyphInfo(this.letter, config as Style)\r\n    } catch (e) {\r\n      glyphInfo = getGlyphInfo(this.letter, config)\r\n    }\r\n    this.source = glyphInfo.canvas\r\n    this.width = glyphInfo.width\r\n    this.height = glyphInfo.height\r\n    this.fontWidth = glyphInfo.fontWidth\r\n    this.fontHeight = glyphInfo.fontHeight\r\n    this.trimOffsetTop = glyphInfo.trimOffsetTop\r\n    this.trimOffsetLeft = glyphInfo.trimOffsetLeft\r\n    this.trimOffsetRight = glyphInfo.trimOffsetRight\r\n    this.trimOffsetBottom = glyphInfo.trimOffsetBottom\r\n  }\r\n}\r\n\r\nexport default GlyphFont\r\n","import { configure } from 'mobx'\n\nimport Ui from './ui'\nimport Workspace from './workspace'\n\nconfigure({\n  enforceActions: 'always',\n  computedRequiresReaction: true,\n})\n\nexport interface Store {\n  ui: Ui\n  workspace: Workspace\n}\n\nlet store: Store\n\nexport default function createStore(): Store {\n  if (!store) store = { ui: new Ui(), workspace: new Workspace() }\n  return store\n}\n\nexport type TStore = ReturnType<typeof createStore>\n\nexport { default as Ui } from './ui'\nexport { default as Project } from './project'\nexport { default as Workspace } from './workspace'\n\nexport * from './base'\n","import { action, observable, runInAction } from 'mobx'\nimport getTrimImageInfo from 'src/utils/getTrimImageInfo'\n\nimport GlyphBase, { GlyphType } from './glyphBase'\n\nexport interface FileInfo {\n  letter?: string\n  fileName: string\n  fileType: string\n  buffer: ArrayBuffer\n}\n\nclass GlyphImage extends GlyphBase {\n  readonly type: GlyphType = 'image'\n\n  @observable src = '' // 仅显示列表中\n\n  @observable.ref buffer: ArrayBuffer | null = null\n\n  @observable fileName = ''\n\n  @observable fileType = ''\n\n  @observable selected = true\n\n  constructor(glyphImage: Partial<GlyphImage>) {\n    super(glyphImage)\n    this.letter = glyphImage.letter || ''\n    this.fileName = glyphImage.fileName || ''\n    this.fileType = glyphImage.fileType || ''\n    this.buffer = glyphImage.buffer || null\n    if (glyphImage.buffer) {\n      this.src = URL.createObjectURL(new Blob([glyphImage.buffer]))\n      this.initImage()\n    }\n  }\n\n  @action.bound initImage(): Promise<void> {\n    return new Promise((resolve) => {\n      const image = new Image()\n      image.onload = () => {\n        runInAction('trimImage', () => {\n          const { naturalWidth, naturalHeight } = image\n          this.fontWidth = naturalWidth\n          this.fontHeight = naturalHeight\n\n          const trimInfo = getTrimImageInfo(image)\n          this.width = trimInfo.width\n          this.height = trimInfo.height\n          this.trimOffsetLeft = trimInfo.trimOffsetLeft\n          this.trimOffsetTop = trimInfo.trimOffsetTop\n          this.trimOffsetRight =\n            trimInfo.width - trimInfo.trimOffsetLeft - naturalWidth\n          this.trimOffsetBottom =\n            trimInfo.height - trimInfo.trimOffsetTop - naturalHeight\n\n          this.source = trimInfo.canvas\n          resolve()\n        })\n      }\n      image.src = this.src\n    })\n  }\n\n  @action.bound setGlyph(text: string): void {\n    this.letter = text[0] || ''\n  }\n\n  @action.bound changeSelect(isSelect: boolean): void {\n    this.selected = isSelect\n  }\n}\n\nexport default GlyphImage\n","import trimImageData, { TrimImageInfo } from './trimImageData'\n\ninterface TrimInfo extends TrimImageInfo {\n  canvas: HTMLCanvasElement\n}\n\nexport default function getTrimImageInfo(\n  image: HTMLImageElement,\n  threshold = 10,\n): TrimInfo {\n  const width = image.naturalWidth\n  const height = image.naturalHeight\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n  ctx.drawImage(image, 0, 0)\n  const imageData = ctx.getImageData(0, 0, width, height)\n  const trimInfo = trimImageData(imageData, threshold)\n  canvas.width = trimInfo.width\n  canvas.height = trimInfo.height\n  ctx.drawImage(image, trimInfo.trimOffsetLeft, trimInfo.trimOffsetTop)\n\n  return {\n    canvas,\n    ...trimInfo,\n  }\n}\n","import { observable, action, computed } from 'mobx'\r\nimport { deepObserve } from 'mobx-utils'\r\nimport { cancel, request } from 'requestidlecallback'\r\nimport { GuillotineBinPack } from 'rectangle-packer'\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\n// import RectanglePacker from 'worker-loader?filename=static/js/RectanglePacker.[hash].worker.js!src/workers/RectanglePacker.worker'\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport AutoPacker from 'worker-loader?filename=static/js/AutoPacker.[hash].worker.js!src/workers/AutoPacker.worker'\r\n\r\nimport Ui from './base/ui'\r\nimport Style from './base/style'\r\nimport Layout from './base/layout'\r\nimport Metric from './base/metric'\r\nimport GlyphFont from './base/glyphFont'\r\nimport GlyphImage, { FileInfo } from './base/glyphImage'\r\nimport { GlyphType } from './base/glyphBase'\r\ninterface TextRectangle {\r\n  width: number\r\n  height: number\r\n  x: number\r\n  y: number\r\n  letter: string\r\n  type: GlyphType\r\n}\r\n\r\nclass Project {\r\n  @observable name = 'Unnamed'\r\n\r\n  id: number\r\n\r\n  worker: AutoPacker | null = null\r\n\r\n  packStart = 0\r\n\r\n  packTimer = 0\r\n\r\n  idleId = 0\r\n\r\n  @observable isPacking = false\r\n\r\n  @observable text =\r\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!№;%:?*()_+-=.,/|\"\\'@#$^&{}[]'\r\n\r\n  @observable.shallow glyphs: Map<string, GlyphFont> = new Map()\r\n\r\n  @observable.shallow glyphImages: GlyphImage[] = []\r\n\r\n  @observable.ref style: Style\r\n\r\n  @observable.ref layout: Layout\r\n\r\n  @observable.ref globalAdjustMetric: Metric\r\n\r\n  @observable.ref packCanvas: HTMLCanvasElement | null = null\r\n\r\n  @observable.ref ui: Ui = new Ui()\r\n\r\n  constructor(project: Partial<Project> = {}) {\r\n    this.id = project.id || Date.now()\r\n    this.name = project.name || 'Unnamed'\r\n    this.text = project.text || this.text\r\n    this.ui = new Ui(project.ui)\r\n    this.style = new Style(project.style)\r\n    this.layout = new Layout(project.layout)\r\n    this.globalAdjustMetric = new Metric(project.globalAdjustMetric)\r\n\r\n    if (project.glyphs) {\r\n      project.glyphs.forEach((value, key) => {\r\n        this.glyphs.set(key, new GlyphFont(value, this.style))\r\n      })\r\n    }\r\n\r\n    project.glyphImages?.forEach((img) => {\r\n      this.glyphImages.push(new GlyphImage(img))\r\n    })\r\n\r\n    if (!this.glyphs.has(' '))\r\n      this.glyphs.set(' ', new GlyphFont({ letter: ' ' }, this.style))\r\n\r\n    this.addGlyphs(project.text || '')\r\n    this.addAutoRun()\r\n    this.pack()\r\n  }\r\n\r\n  @computed get glyphList(): (GlyphFont | GlyphImage)[] {\r\n    const obj: { [key: string]: GlyphImage } = {}\r\n\r\n    this.glyphImages.forEach((glyph) => {\r\n      if (glyph.letter && glyph.selected) {\r\n        obj[glyph.letter] = glyph\r\n      }\r\n    })\r\n\r\n    return ` ${this.text}`.split('').map((letter) => {\r\n      if (obj[letter]) return obj[letter]\r\n      return this.glyphs.get(letter) as GlyphFont\r\n    })\r\n  }\r\n\r\n  @computed get rectangleList(): TextRectangle[] {\r\n    const { padding, spacing } = this.layout\r\n    return this.glyphList.map((glyph) => {\r\n      const isUnEmpty = !!(glyph.width && glyph.height)\r\n      return {\r\n        letter: glyph.letter,\r\n        type: glyph.type,\r\n        width: isUnEmpty ? glyph.width + padding * 2 + spacing : 0,\r\n        height: isUnEmpty ? glyph.height + padding * 2 + spacing : 0,\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    })\r\n  }\r\n\r\n  @action.bound pack(): void {\r\n    if (this.idleId) return\r\n    if (this.worker) this.worker.terminate()\r\n    this.isPacking = true\r\n    const packList = this.rectangleList.sort((a, b) => b.height - a.height)\r\n    if (!this.layout.auto) {\r\n      const packer = new GuillotineBinPack<TextRectangle>(\r\n        this.layout.width + this.layout.spacing,\r\n        this.layout.height + this.layout.spacing,\r\n      )\r\n\r\n      const list = packList.filter(({ width, height }) => !!(width && height))\r\n\r\n      packer.InsertSizes(list, true, 1, 1)\r\n\r\n      this.setPack(packer.usedRectangles, list)\r\n\r\n      this.isPacking = false\r\n      return\r\n    }\r\n    this.worker = new AutoPacker()\r\n    this.worker.addEventListener(\r\n      'message',\r\n      action('PackerWorkerCallback', (messageEvent) => {\r\n        const { data } = messageEvent\r\n        this.setPack(data)\r\n\r\n        this.isPacking = false\r\n        this.worker?.terminate()\r\n        this.worker = null\r\n      }),\r\n      false,\r\n    )\r\n\r\n    this.worker.postMessage(\r\n      packList.filter(({ width, height }) => !!(width && height)),\r\n    )\r\n  }\r\n\r\n  @action.bound setPack(\r\n    list: TextRectangle[],\r\n    failedList?: TextRectangle[],\r\n  ): void {\r\n    const imgList = this.glyphImages\r\n    let maxWidth = 0\r\n    let maxHeight = 0\r\n    const { auto, fixedSize, width, height, spacing } = this.layout\r\n\r\n    list.forEach((rectangle) => {\r\n      const { letter, x, y, type, width, height } = rectangle\r\n      let glyph: GlyphFont | GlyphImage | undefined\r\n\r\n      if (type === 'image') {\r\n        glyph = imgList.find((gi) => {\r\n          if (gi && gi.letter === letter) return true\r\n          return false\r\n        })\r\n      }\r\n\r\n      if (!glyph) {\r\n        glyph = this.glyphs.get(letter)\r\n      }\r\n\r\n      if (glyph) {\r\n        glyph.x = x || 0\r\n        glyph.y = y || 0\r\n      }\r\n\r\n      maxWidth = Math.max(maxWidth, x + width)\r\n      maxHeight = Math.max(maxHeight, y + height)\r\n    })\r\n\r\n    if (failedList?.length) {\r\n      failedList.forEach((rectangle) => {\r\n        const { letter, type } = rectangle\r\n        let glyph: GlyphFont | GlyphImage | undefined\r\n\r\n        if (type === 'image') {\r\n          glyph = imgList.find((gi) => {\r\n            if (gi && gi.letter === letter) return true\r\n            return false\r\n          })\r\n        }\r\n\r\n        if (!glyph) {\r\n          glyph = this.glyphs.get(letter)\r\n        }\r\n\r\n        if (glyph) {\r\n          glyph.x = 0\r\n          glyph.y = 0\r\n        }\r\n      })\r\n      this.ui.setPackFailed(true)\r\n    } else {\r\n      this.ui.setPackFailed(false)\r\n    }\r\n\r\n    if (!auto && fixedSize) {\r\n      this.ui.setSize(width, height)\r\n      return\r\n    }\r\n\r\n    this.ui.setSize(maxWidth - spacing, maxHeight - spacing)\r\n  }\r\n\r\n  @action.bound packStyle(): void {\r\n    this.isPacking = true\r\n    if (this.worker) {\r\n      this.worker.terminate()\r\n      this.worker = null\r\n    }\r\n    cancel(this.idleId)\r\n\r\n    const tasks: GlyphFont[] = []\r\n\r\n    this.glyphs.forEach((glyph) => {\r\n      tasks.push(glyph)\r\n    })\r\n\r\n    const runTasks = () => {\r\n      this.idleId = request((deadline) => {\r\n        const tr = deadline.timeRemaining()\r\n        const start = Date.now()\r\n        while (tasks.length && tr - (Date.now() - start) > -100) {\r\n          // while (tasks.length) {\r\n          const glyph = tasks.shift()\r\n          if (glyph) glyph.setGlyphInfo(this.style)\r\n        }\r\n\r\n        if (tasks.length) {\r\n          runTasks()\r\n        } else {\r\n          this.idleId = 0\r\n          this.pack()\r\n        }\r\n      })\r\n    }\r\n\r\n    runTasks()\r\n  }\r\n\r\n  @action.bound throttlePack(): void {\r\n    if (this.idleId) return\r\n    window.clearTimeout(this.packTimer)\r\n    if (Date.now() - this.packStart > 500) {\r\n      Promise.resolve().then(this.pack)\r\n    } else {\r\n      this.packTimer = window.setTimeout(() => {\r\n        this.pack()\r\n      }, 500)\r\n    }\r\n    this.packStart = Date.now()\r\n  }\r\n\r\n  addAutoRun(): void {\r\n    const isName = (obj: { name?: unknown }, name: string): boolean =>\r\n      !!(obj.name && obj.name === name)\r\n\r\n    deepObserve(this.glyphs, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.glyphImages, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.layout, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.style, (change) => {\r\n      if (isName(change, 'bgColor') || isName(change, 'lineHeight')) return\r\n      this.packStyle()\r\n    })\r\n  }\r\n\r\n  @action.bound setText(str: string): void {\r\n    const oldText = this.text\r\n    this.text = str.replace(/\\s/gm, '')\r\n    this.addGlyphs(oldText)\r\n  }\r\n\r\n  @action.bound addGlyphs(oldText = ''): void {\r\n    const currentList = Array.from(new Set(this.text.split('')))\r\n    const oldList = Array.from(new Set(oldText.split('')))\r\n    this.text = currentList.join('')\r\n    const diffList = oldText\r\n      ? Array.from(new Set(currentList.concat(oldList))).filter(\r\n          (t) => !(currentList.includes(t) && oldList.includes(t)),\r\n        )\r\n      : currentList\r\n\r\n    if (!diffList.length) return\r\n\r\n    diffList.forEach((letter) => {\r\n      if (currentList.includes(letter)) {\r\n        this.glyphs.set(letter, new GlyphFont({ letter }, this.style))\r\n      } else {\r\n        // in diff\r\n        this.glyphs.delete(letter)\r\n      }\r\n    })\r\n  }\r\n\r\n  @action.bound addImages<T extends FileInfo>(list: T[]): void {\r\n    Promise.all(\r\n      list.map((img) => {\r\n        const glyphImage = new GlyphImage(img)\r\n        this.glyphImages.push(glyphImage)\r\n        return glyphImage.initImage()\r\n      }),\r\n    ).then(this.pack)\r\n  }\r\n\r\n  @action.bound removeImage(image: GlyphImage): void {\r\n    const idx = this.glyphImages.indexOf(image)\r\n    if (idx > -1) this.glyphImages.splice(idx, 1)\r\n  }\r\n\r\n  @action.bound setCanvas(canvas: HTMLCanvasElement): void {\r\n    this.packCanvas = canvas\r\n  }\r\n\r\n  @action.bound setName(name: string): void {\r\n    this.name = name || this.name\r\n  }\r\n}\r\n\r\nexport default Project\r\n","import { action, observable, runInAction, computed } from 'mobx'\n\nimport Project from './project'\n\nclass Workspace {\n  @observable activeId = 0\n\n  @observable.shallow projectList: Map<number, Project> = new Map()\n\n  constructor() {\n    runInAction(() => {\n      this.activeId = Date.now()\n      const project = new Project({ id: this.activeId })\n      this.projectList.set(project.id, project)\n    })\n  }\n\n  @computed get currentProject(): Project {\n    return this.projectList.get(this.activeId) as Project\n  }\n\n  @computed get namedList(): { id: number; name: string }[] {\n    const list: { id: number; name: string }[] = []\n    this.projectList.forEach((value) => {\n      list.push({\n        id: value.id,\n        name: value.name,\n      })\n    })\n    return list\n  }\n\n  @action.bound selectProject(id: number): void {\n    if (this.projectList.has(id)) this.activeId = id\n  }\n\n  @action.bound removeProject(id: number): void {\n    const list = this.namedList.filter((item) => item.id !== id)\n    if (list.length === 0) return\n    this.activeId = list[0].id\n    this.projectList.delete(id)\n  }\n\n  @action.bound addProject(p: Partial<Project> = {}): void {\n    if (p.id && this.projectList.has(p.id)) {\n      this.activeId = p.id\n      return\n    }\n    if (!p.name) {\n      p.name = 'Unnamed'\n      const namedList: number[] = []\n      this.projectList.forEach((item) => {\n        const named = item.name.match(/^Unnamed-?(\\d+)?$/)\n        if (named) {\n          namedList.push(Number(named[1]) || 0)\n        }\n      })\n      if (namedList.length > 0) {\n        p.name += `-${Math.max(...namedList) + 1}`\n      }\n    }\n\n    const project = new Project(p)\n    this.projectList.set(project.id, project)\n    this.activeId = project.id\n  }\n\n  @action.bound setProjectName(name: string, value: number): void {\n    const project = this.projectList.get(value)\n    if (project) {\n      project.setName(name)\n    }\n  }\n}\n\nexport default Workspace\n","import { ComponentsProps } from '@material-ui/core/styles/props'\n\nconst props: ComponentsProps = {\n  MuiButton: {\n    size: 'small',\n  },\n  MuiButtonBase: {\n    disableRipple: true,\n  },\n  MuiFilledInput: {\n    margin: 'dense',\n  },\n  MuiFormControl: {\n    margin: 'dense',\n  },\n  MuiFormHelperText: {\n    margin: 'dense',\n  },\n  MuiIconButton: {\n    size: 'small',\n  },\n  MuiInputBase: {\n    margin: 'dense',\n  },\n  MuiInputLabel: {\n    margin: 'dense',\n  },\n  MuiListItem: {\n    dense: true,\n  },\n  MuiOutlinedInput: {\n    margin: 'dense',\n  },\n  MuiFab: {\n    size: 'small',\n  },\n  MuiTable: {\n    size: 'small',\n  },\n  MuiTextField: {\n    margin: 'dense',\n  },\n  MuiToolbar: {\n    variant: 'dense',\n  },\n}\n\nexport default props\n","import { Overrides } from '@material-ui/core/styles/overrides'\r\n\r\nconst overrides: Overrides = {\r\n  MuiCssBaseline: {\r\n    '@global': {\r\n      'html,body,#root': {\r\n        width: '100%',\r\n        height: '100%',\r\n      },\r\n      html: {\r\n        fontSize: '14px',\r\n      },\r\n      body: {\r\n        margin: 0,\r\n        // fontFamily: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\r\n        WebkitFontSmoothing: 'antialiased',\r\n        MozOsxFontSmoothing: 'grayscale',\r\n        userSelect: 'none',\r\n      },\r\n      '#root': {\r\n        minWidth: 900,\r\n      },\r\n      'input::-webkit-inner-spin-button': {\r\n        marginLeft: '10px',\r\n      },\r\n      'input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-inner-spin-button':\r\n        {\r\n          opacity: 0.3,\r\n        },\r\n      '::-webkit-scrollbar': {\r\n        width: '4px',\r\n        height: '4px',\r\n      },\r\n      '::-webkit-scrollbar-thumb': {\r\n        background: 'rgba(255, 255, 255, 0.2)',\r\n      },\r\n      '::-webkit-scrollbar-track': {\r\n        background: 'rgba(0, 0, 0, 0.1)',\r\n      },\r\n    },\r\n  },\r\n  MuiInputBase: {\r\n    input: {\r\n      '&[type=number]': {\r\n        textAlign: 'right',\r\n      },\r\n    },\r\n  },\r\n  MuiSlider: {\r\n    root: {\r\n      verticalAlign: 'top',\r\n      '&.Mui-disabled': {\r\n        opacity: 0.2,\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\nexport default overrides\r\n","import { createTheme, responsiveFontSizes } from '@material-ui/core/styles'\n\nimport props from './props'\nimport overrides from './overrides'\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: '#444' },\n    secondary: { main: '#424242' },\n    background: {\n      paper: 'rgb(37, 37, 37)',\n      default: 'rgb(30, 30, 30)',\n      activityBar: 'rgb(51, 51, 51)',\n      titleBar: 'rgb(50, 50, 50)',\n      sidebar: 'rgb(37, 37, 37)',\n    },\n    common: {\n      black: 'rgb(30,30,30)',\n      white: 'rgb(204,204,204)',\n    },\n    action: {\n      hover: 'rgba(255, 255, 255, 0.1)',\n    },\n  },\n  bgPixel: {\n    backgroundColor: '#fff',\n    backgroundImage: `\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0),\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0)`,\n    backgroundSize: '8px 8px',\n    backgroundPosition: '0 0, 4px 4px',\n    backgroundRepeat: 'repeat',\n  },\n  spacing: 4,\n  typography: { fontSize: 13 },\n  transitions: {\n    create: () => 'none',\n  },\n  shape: { borderRadius: 0 },\n  props,\n  overrides,\n})\n\nexport default responsiveFontSizes(theme)\n","import { useContext } from 'react'\nimport { MobXProviderContext } from 'mobx-react'\nimport {\n  TStore,\n  Workspace,\n  Layout,\n  Project,\n  Style,\n  Font,\n  ProjectUi,\n  FontStyleConfig,\n} from '.'\n\nexport default function useStores(): TStore {\n  return useContext(MobXProviderContext) as TStore\n}\n\nexport function useWorkspace(): Workspace {\n  const store = useStores()\n  return store.workspace\n}\n\nexport function useLayout(): Layout {\n  const store = useStores()\n  return store.workspace.currentProject.layout\n}\n\nexport function useProject(): Project {\n  const store = useStores()\n  return store.workspace.currentProject\n}\n\nexport function useStyle(): Style {\n  const { style } = useProject()\n  return style\n}\n\nexport function useFont(): Font {\n  const { font } = useStyle()\n  return font\n}\n\nexport function useFill(): FontStyleConfig {\n  const { fill } = useStyle()\n  return fill\n}\n\nexport function useProjectUi(): ProjectUi {\n  const { ui } = useProject()\n  return ui\n}\n","function readFile(\n  file: File,\n  isText?: boolean,\n): Promise<string | ArrayBuffer | null> {\n  if (file.arrayBuffer && !isText) return file.arrayBuffer()\n\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n\n    if (isText) {\n      reader.readAsText(file)\n    } else {\n      reader.readAsArrayBuffer(file)\n    }\n\n    reader.onload = (e) => {\n      resolve(e?.target?.result || null)\n    }\n  })\n}\n\nexport default readFile\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { useSnackbar } from 'notistack'\nimport * as Sentry from '@sentry/react'\n\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport IconButton from '@material-ui/core/IconButton'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport FontDownload from '@material-ui/icons/FontDownload'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\n\nimport { useFont } from 'src/store/hooks'\nimport readFile from 'src/utils/readFile'\n\nconst FontFamily: FunctionComponent<unknown> = () => {\n  const [loading, setLoading] = useState(false)\n  const { fonts, addFont, removeFont } = useFont()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const hanleUploadFile = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    if (\n      !event ||\n      !event.target ||\n      !event.target.files ||\n      !event.target.files[0]\n    )\n      return\n\n    const file = event.target.files[0]\n    const ext = file.name.match(/\\.([A-Z0-9]+)$/i)\n    if (!ext) return\n\n    setLoading(true)\n\n    readFile(file).then((arrBuf) => {\n      if (!(arrBuf instanceof ArrayBuffer)) {\n        setLoading(false)\n        return\n      }\n\n      event.target.value = ''\n\n      addFont(arrBuf)\n        .then(() => setLoading(false))\n        .catch((e) => {\n          setLoading(false)\n          enqueueSnackbar(e.message, { variant: 'error' })\n          Sentry.captureException(e)\n        })\n    })\n  }\n\n  // TODO: List add sort.\n  return (\n    <div>\n      <List dense={true} disablePadding={true}>\n        {fonts.map((fontResource) => (\n          <ListItem\n            key={fontResource.family}\n            disableGutters={true}\n            divider={true}\n            dense={true}\n          >\n            <ListItemText primary={fontResource.family} />\n            <ListItemSecondaryAction>\n              <IconButton\n                edge='end'\n                aria-label='delete'\n                onClick={() => removeFont(fontResource)}\n              >\n                <HighlightOffIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n      <Button\n        component='label'\n        variant='contained'\n        color='primary'\n        fullWidth\n        size='large'\n        startIcon={\n          loading ? (\n            <CircularProgress size={22} color='inherit' />\n          ) : (\n            <FontDownload />\n          )\n        }\n        disabled={loading}\n      >\n        Add Font File\n        <input\n          hidden\n          type='file'\n          onChange={hanleUploadFile}\n          accept='.ttf,.otf,.woff'\n        />\n      </Button>\n    </div>\n  )\n}\n\nexport default observer(FontFamily)\n","import React, {\r\n  ReactNode,\r\n  FunctionComponent,\r\n  PropsWithChildren,\r\n  ElementType,\r\n  CSSProperties,\r\n} from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\ninterface GridInputProps {\r\n  before?: ReactNode\r\n  after?: ReactNode\r\n  component?: ElementType\r\n  childrenWidth?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\r\n  style?: CSSProperties\r\n}\r\n\r\nconst GridInput: FunctionComponent<GridInputProps> = (\r\n  props: PropsWithChildren<GridInputProps>,\r\n): JSX.Element => {\r\n  const { before, children, component, after, childrenWidth, ...other } = props\r\n  return (\r\n    <Grid\r\n      component={component || 'label'}\r\n      container\r\n      spacing={2}\r\n      wrap='nowrap'\r\n      justifyContent='center'\r\n      alignItems='center'\r\n      {...other}\r\n    >\r\n      <Grid item xs={4}>\r\n        {typeof before === 'object' ? (\r\n          before\r\n        ) : (\r\n          <Typography noWrap align='right'>\r\n            {before}\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={childrenWidth || 5}>\r\n        {children}\r\n      </Grid>\r\n      <Grid item xs>\r\n        {typeof after === 'object' ? (\r\n          after\r\n        ) : (\r\n          <Typography noWrap variant='caption'>\r\n            {after}\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GridInput\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\nimport { useFont } from 'src/store/hooks'\n\nconst FontSize: FunctionComponent<unknown> = () => {\n  const { size, setSize } = useFont()\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setSize(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Font Size:' after='px'>\n      <Input\n        value={size}\n        fullWidth\n        type='number'\n        inputProps={{ min: 1 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(FontSize)\n","import React, { FunctionComponent, ChangeEvent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Slider from '@material-ui/core/Slider'\r\n\r\nimport GridInput from 'src/app/components/GridInput/GridInput'\r\n\r\nimport { useFont } from 'src/store/hooks'\r\n\r\nconst Sharp: FunctionComponent<unknown> = () => {\r\n  const { sharp, setSharp, mainFont } = useFont()\r\n\r\n  const handleInput = (\r\n    event: ChangeEvent<{}>,\r\n    value: number | number[],\r\n  ): void => {\r\n    setSharp(value as unknown as number)\r\n  }\r\n\r\n  return (\r\n    <GridInput\r\n      style={!mainFont ? { opacity: 0.5 } : undefined}\r\n      before='Sharp:'\r\n      after={`${sharp}%`}\r\n    >\r\n      <Slider value={sharp} onChange={handleInput} disabled={!mainFont} />\r\n    </GridInput>\r\n  )\r\n}\r\n\r\nexport default observer(Sharp)\r\n","import React, { FunctionComponent } from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport FontFamily from './FontFamily'\r\nimport FontSize from './FontSize'\r\nimport Sharp from './Sharp'\r\n\r\nconst Font: FunctionComponent<unknown> = () => {\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Typography>Font</Typography>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <FontFamily />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <FontSize />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Sharp />\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Font\r\n","import React, {\n  useState,\n  FunctionComponent,\n  useCallback,\n  useEffect,\n} from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { observer } from 'mobx-react'\n\nimport { useProject } from 'src/store/hooks'\n\nconst Glyphs: FunctionComponent<unknown> = () => {\n  const { text, setText } = useProject()\n  const [isIME, setIsIME] = useState(false)\n  const [inputText, setInputText] = useState(text)\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = event.target\n    const str = Array.from(new Set(value.split(''))).join('')\n    if (isIME) {\n      setInputText(value)\n    } else {\n      setInputText(str)\n      if (str !== text) setText(str)\n    }\n  }\n\n  const handleCompositionStart = useCallback((): void => {\n    setInputText(text)\n    setIsIME(true)\n  }, [text])\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    const str = Array.from(new Set(inputText.split(''))).join('')\n    setInputText(str)\n    if (str !== text) setText(str)\n  }\n\n  useEffect(() => {\n    setInputText(text)\n  }, [text])\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Glyphs</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <TextField\n          margin='none'\n          value={isIME ? inputText : text}\n          fullWidth\n          multiline\n          rows={4}\n          variant='outlined'\n          inputProps={{ spellCheck: false }}\n          onChange={handleInput}\n          onCompositionStart={handleCompositionStart}\n          onCompositionEnd={handleCompositionEnd}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default observer(Glyphs)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst Padding: FunctionComponent<unknown> = () => {\n  const { padding, setPadding } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setPadding(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Padding:' after='px'>\n      <Input\n        value={padding}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Padding)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst Spacing: FunctionComponent<unknown> = () => {\n  const { spacing, setSpacing } = useLayout()\n\n  return (\n    <GridInput before='Spacing:' after='px'>\n      <Input\n        value={spacing}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={(e) => setSpacing(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Spacing)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst AutoPack: FunctionComponent<unknown> = () => {\n  const { auto, setAuto } = useLayout()\n\n  return (\n    <GridInput before='Auto Pack:'>\n      <Checkbox\n        checked={auto}\n        size='small'\n        color='default'\n        onChange={(e) => setAuto(e.target.checked)}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(AutoPack)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst FixedSize: FunctionComponent<unknown> = () => {\n  const { auto, fixedSize, setFixedSize } = useLayout()\n\n  return (\n    <GridInput before='Fixed Size:'>\n      <Checkbox\n        checked={fixedSize}\n        size='small'\n        color='default'\n        onChange={(e) => setFixedSize(e.target.checked)}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(FixedSize)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst PackWidth: FunctionComponent<unknown> = () => {\n  const { width, auto, fixedSize, setWidth } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setWidth(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before={fixedSize ? 'Width:' : 'Max Width:'} after='px'>\n      <Input\n        value={width}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(PackWidth)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst PackHeight: FunctionComponent<unknown> = () => {\n  const { height, auto, fixedSize, setHeight } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setHeight(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before={fixedSize ? 'Height:' : 'Max Height:'} after='px'>\n      <Input\n        value={height}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(PackHeight)\n","import React, { FunctionComponent } from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport Padding from './Padding'\nimport Spacing from './Spacing'\nimport AutoPack from './AutoPack'\nimport FixedSize from './FixedSize'\nimport PackWidth from './PackWidth'\nimport PackHeight from './PackHeight'\n\nconst PackConfig: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Layout</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <Padding />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <Spacing />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <AutoPack />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FixedSize />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <PackWidth />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <PackHeight />\n      </Box>\n    </>\n  )\n}\n\nexport default PackConfig\n","import React, { FunctionComponent } from 'react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Input from '@material-ui/core/Input'\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\ninterface SetHandle {\r\n  (value: number): void\r\n}\r\n\r\ninterface FormAdjustMetricProps {\r\n  xAdvance: number\r\n  xOffset: number\r\n  yOffset: number\r\n  setXAdvance: SetHandle\r\n  setXOffset: SetHandle\r\n  setYOffset: SetHandle\r\n}\r\n\r\nconst FormAdjustMetric: FunctionComponent<FormAdjustMetricProps> = (\r\n  props: FormAdjustMetricProps,\r\n) => {\r\n  const { xAdvance, xOffset, yOffset, setXAdvance, setXOffset, setYOffset } =\r\n    props\r\n\r\n  const getHandle =\r\n    (handleSet: SetHandle) => (e: React.ChangeEvent<HTMLInputElement>) =>\r\n      handleSet(Number(e.target.value))\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='xAdvance:' after='px'>\r\n          <Input\r\n            value={xAdvance}\r\n            fullWidth\r\n            type='number'\r\n            onChange={getHandle(setXAdvance)}\r\n          />\r\n        </GridInput>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='xOffset:' after='px'>\r\n          <Input\r\n            value={xOffset}\r\n            fullWidth\r\n            type='number'\r\n            onChange={getHandle(setXOffset)}\r\n          />\r\n        </GridInput>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='yOffset:' after='px'>\r\n          <Input\r\n            value={yOffset}\r\n            fullWidth\r\n            type='number'\r\n            onChange={getHandle(setYOffset)}\r\n          />\r\n        </GridInput>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormAdjustMetric\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\r\n\r\nconst GlobalMetric: FunctionComponent<unknown> = () => {\r\n  const { globalAdjustMetric } = useProject()\r\n  const { xAdvance, xOffset, yOffset, setXAdvance, setXOffset, setYOffset } =\r\n    globalAdjustMetric\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Typography>Global Metric Adjustment</Typography>\r\n      </Box>\r\n      <FormAdjustMetric\r\n        xAdvance={xAdvance}\r\n        xOffset={xOffset}\r\n        yOffset={yOffset}\r\n        setXAdvance={setXAdvance}\r\n        setXOffset={setXOffset}\r\n        setYOffset={setYOffset}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GlobalMetric)\r\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Font from './modules/Font'\nimport Glyphs from './modules/Glyphs'\nimport PackConfig from './modules/PackConfig'\nimport GlobalMetric from './modules/GlobalMetric'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      width: '256px',\n    },\n  }),\n)\n\nconst LeftBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  return (\n    <Box\n      bgcolor='background.sidebar'\n      display='flex'\n      flexDirection='column'\n      overflow='hidden'\n      className={classes.root}\n    >\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\n        <Typography variant='subtitle2'>Font Config</Typography>\n      </Box>\n      <Box flex={1} height={0} overflow='hidden auto'>\n        <Glyphs />\n        <Divider />\n        <Font />\n        <Divider />\n        <PackConfig />\n        <Divider />\n        <GlobalMetric />\n      </Box>\n    </Box>\n  )\n}\n\nexport default LeftBar\n","import React, { useEffect, FunctionComponent, useCallback } from 'react'\nimport hotkeys from 'hotkeys-js'\nimport { observer } from 'mobx-react'\nimport Button from '@material-ui/core/Button'\n\nimport { useWorkspace } from 'src/store/hooks'\n\ninterface ButtonNewProps {\n  className?: string\n}\n\nconst ButtonNew: FunctionComponent<ButtonNewProps> = (\n  props: ButtonNewProps,\n) => {\n  const { className } = props\n\n  const worckSpace = useWorkspace()\n  const { addProject } = worckSpace\n\n  const handleNewProject = useCallback(\n    (e: { preventDefault(): void }) => {\n      e.preventDefault()\n      addProject()\n      return false\n    },\n    [addProject],\n  )\n\n  useEffect(() => {\n    hotkeys.unbind('alt+n,control+n')\n    hotkeys('alt+n,control+n', handleNewProject)\n    return () => {\n      hotkeys.unbind('alt+n,control+n')\n    }\n  }, [handleNewProject])\n\n  return (\n    <Button\n      className={className}\n      title='New Project (ALT + N)'\n      onClick={handleNewProject}\n    >\n      New\n    </Button>\n  )\n}\n\nexport default observer(ButtonNew)\n","function getVersionNumber(version: string | string[] | number[]): number {\n  if (typeof version === 'string') {\n    version = version.split('.')\n  }\n\n  if (!Array.isArray(version)) return 0\n\n  version = [...version] as number[]\n\n  return version\n    .reverse()\n    .reduce<number>(\n      (previousValue: number, currentValue: number, currentIndex: number) => {\n        return (\n          previousValue + Number(currentValue) * Math.pow(1000, currentIndex)\n        )\n      },\n      0,\n    )\n}\n\nexport default getVersionNumber\n","export const PREFIX_STR = 'SnowBambooBMF'\nconst prefix = (): Uint8Array =>\n  new Uint8Array([...PREFIX_STR.split('').map((s) => s.charCodeAt(0)), 1, 1, 0])\n\nexport default prefix\n","import getVersionNumber from 'src/utils/getVersionNumber'\nimport prefix from './prefix'\n\nexport default function decode(buffer: unknown): number {\n  if (!(buffer instanceof ArrayBuffer) || buffer.byteLength < 17) return 0\n  const perfixBuffer = prefix()\n  const perfixName = perfixBuffer.slice(0, perfixBuffer.byteLength - 3)\n  const u8 = new Uint8Array(buffer)\n  const filePrefix = u8.slice(0, perfixBuffer.byteLength)\n  const versionBuffer = filePrefix.slice(filePrefix.byteLength - 3)\n  let isSbf = true\n\n  perfixName.forEach((e, i) => {\n    if (filePrefix[i] !== e) isSbf = false\n  })\n\n  if (!isSbf) return 0\n\n  return getVersionNumber(Array.from(versionBuffer))\n}\n","import { CheckFunction } from '../type'\nimport getVersion from './getVersion'\n\nconst check: CheckFunction = (buffer) => getVersion(buffer) > 0\n\nexport default check\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = {}\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.sint32()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = object.offset | 0\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset = message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {boolean|null} [power] Layout power\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout power.\n   * @member {boolean} power\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.power = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.power != null && Object.hasOwnProperty.call(message, 'power'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.power)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.power = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.power != null && message.hasOwnProperty('power'))\n      if (typeof message.power !== 'boolean') return 'power: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.power != null) message.power = Boolean(object.power)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.power = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.power != null && message.hasOwnProperty('power'))\n      object.power = message.power\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","import { IProject } from './project'\nimport { IProject as IProjectNext } from '../1.0.1'\n\nexport default function updateToNext(project: IProject): IProjectNext {\n  const next = project as IProjectNext\n  next.layout = { ...project.layout }\n  next.layout.width = 1024\n  next.layout.height = 1024\n  next.layout.auto = true\n  next.layout.fixedSize = false\n  return next\n}\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = {}\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.sint32()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = object.offset | 0\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset = message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {number|null} [width] Layout width\n   * @property {number|null} [height] Layout height\n   * @property {boolean|null} [auto] Layout auto\n   * @property {boolean|null} [fixedSize] Layout fixedSize\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout width.\n   * @member {number} width\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.width = 0\n\n  /**\n   * Layout height.\n   * @member {number} height\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.height = 0\n\n  /**\n   * Layout auto.\n   * @member {boolean} auto\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.auto = false\n\n  /**\n   * Layout fixedSize.\n   * @member {boolean} fixedSize\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.fixedSize = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\n    if (\n      message.fixedSize != null &&\n      Object.hasOwnProperty.call(message, 'fixedSize')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.width = reader.int32()\n          break\n        case 4:\n          message.height = reader.int32()\n          break\n        case 5:\n          message.auto = reader.bool()\n          break\n        case 6:\n          message.fixedSize = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.height != null && message.hasOwnProperty('height'))\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      if (typeof message.fixedSize !== 'boolean')\n        return 'fixedSize: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.width != null) message.width = object.width | 0\n    if (object.height != null) message.height = object.height | 0\n    if (object.auto != null) message.auto = Boolean(object.auto)\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.width = 0\n      object.height = 0\n      object.auto = false\n      object.fixedSize = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.height != null && message.hasOwnProperty('height'))\n      object.height = message.height\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      object.auto = message.auto\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      object.fixedSize = message.fixedSize\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","import { IProject } from './project'\nimport { IProject as IProjectNext, IGradientColor } from '../1.0.2'\n\nexport default function updateToNext(project: IProject): IProjectNext {\n  function fixOffset(list: IGradientColor[]) {\n    const len = list.length - 1\n    list.forEach((item, idx) => {\n      item.offset = (1 / len) * idx\n    })\n  }\n  if (\n    project?.style?.fill?.gradient?.palette &&\n    project.style.fill.gradient.palette.length > 0\n  ) {\n    fixOffset(project.style.fill.gradient.palette)\n  }\n\n  if (\n    project?.style?.stroke?.gradient?.palette &&\n    project.style.stroke.gradient.palette.length > 0\n  ) {\n    fixOffset(project.style.stroke.gradient.palette)\n  }\n\n  return project\n}\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = {}\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.float()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (typeof message.offset !== 'number') return 'offset: number expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = Number(object.offset)\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset =\n        options.json && !isFinite(message.offset)\n          ? String(message.offset)\n          : message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {number|null} [width] Layout width\n   * @property {number|null} [height] Layout height\n   * @property {boolean|null} [auto] Layout auto\n   * @property {boolean|null} [fixedSize] Layout fixedSize\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout width.\n   * @member {number} width\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.width = 0\n\n  /**\n   * Layout height.\n   * @member {number} height\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.height = 0\n\n  /**\n   * Layout auto.\n   * @member {boolean} auto\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.auto = false\n\n  /**\n   * Layout fixedSize.\n   * @member {boolean} fixedSize\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.fixedSize = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\n    if (\n      message.fixedSize != null &&\n      Object.hasOwnProperty.call(message, 'fixedSize')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.width = reader.int32()\n          break\n        case 4:\n          message.height = reader.int32()\n          break\n        case 5:\n          message.auto = reader.bool()\n          break\n        case 6:\n          message.fixedSize = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.height != null && message.hasOwnProperty('height'))\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      if (typeof message.fixedSize !== 'boolean')\n        return 'fixedSize: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.width != null) message.width = object.width | 0\n    if (object.height != null) message.height = object.height | 0\n    if (object.auto != null) message.auto = Boolean(object.auto)\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.width = 0\n      object.height = 0\n      object.auto = false\n      object.fixedSize = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.height != null && message.hasOwnProperty('height'))\n      object.height = message.height\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      object.auto = message.auto\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      object.fixedSize = message.fixedSize\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","import { IProject } from './project'\nimport { IProject as IProjectNext, IFont } from '../project'\n\nexport default function updateToNext(project: IProject): IProjectNext {\n  if (project.style?.font?.font) {\n    ;(project.style.font as IFont).fonts = [{ font: project.style.font.font }]\n  }\n  return project\n}\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {})\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.float()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (typeof message.offset !== 'number') return 'offset: number expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = Number(object.offset)\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset =\n        options.json && !isFinite(message.offset)\n          ? String(message.offset)\n          : message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const FontResource = ($root.FontResource = (() => {\n  /**\n   * Properties of a FontResource.\n   * @exports IFontResource\n   * @interface IFontResource\n   * @property {Uint8Array|null} [font] FontResource font\n   */\n\n  /**\n   * Constructs a new FontResource.\n   * @exports FontResource\n   * @classdesc Represents a FontResource.\n   * @implements IFontResource\n   * @constructor\n   * @param {IFontResource=} [properties] Properties to set\n   */\n  function FontResource(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * FontResource font.\n   * @member {Uint8Array} font\n   * @memberof FontResource\n   * @instance\n   */\n  FontResource.prototype.font = $util.newBuffer([])\n\n  /**\n   * Creates a new FontResource instance using the specified properties.\n   * @function create\n   * @memberof FontResource\n   * @static\n   * @param {IFontResource=} [properties] Properties to set\n   * @returns {FontResource} FontResource instance\n   */\n  FontResource.create = function create(properties) {\n    return new FontResource(properties)\n  }\n\n  /**\n   * Encodes the specified FontResource message. Does not implicitly {@link FontResource.verify|verify} messages.\n   * @function encode\n   * @memberof FontResource\n   * @static\n   * @param {IFontResource} message FontResource message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  FontResource.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    return writer\n  }\n\n  /**\n   * Encodes the specified FontResource message, length delimited. Does not implicitly {@link FontResource.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof FontResource\n   * @static\n   * @param {IFontResource} message FontResource message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  FontResource.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a FontResource message from the specified reader or buffer.\n   * @function decode\n   * @memberof FontResource\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {FontResource} FontResource\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  FontResource.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.FontResource()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a FontResource message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof FontResource\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {FontResource} FontResource\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  FontResource.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a FontResource message.\n   * @function verify\n   * @memberof FontResource\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  FontResource.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    return null\n  }\n\n  /**\n   * Creates a FontResource message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FontResource\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {FontResource} FontResource\n   */\n  FontResource.fromObject = function fromObject(object) {\n    if (object instanceof $root.FontResource) return object\n    let message = new $root.FontResource()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    return message\n  }\n\n  /**\n   * Creates a plain object from a FontResource message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FontResource\n   * @static\n   * @param {FontResource} message FontResource\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  FontResource.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults)\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    return object\n  }\n\n  /**\n   * Converts this FontResource to JSON.\n   * @function toJSON\n   * @memberof FontResource\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  FontResource.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return FontResource\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Array.<IFontResource>|null} [fonts] Font fonts\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    this.fonts = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font fonts.\n   * @member {Array.<IFontResource>} fonts\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.fonts = $util.emptyArray\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.fonts != null && message.fonts.length)\n      for (let i = 0; i < message.fonts.length; ++i)\n        $root.FontResource.encode(\n          message.fonts[i],\n          writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n        ).ldelim()\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.fonts && message.fonts.length)) message.fonts = []\n          message.fonts.push($root.FontResource.decode(reader, reader.uint32()))\n          break\n        case 2:\n          message.size = reader.int32()\n          break\n        case 3:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.fonts != null && message.hasOwnProperty('fonts')) {\n      if (!Array.isArray(message.fonts)) return 'fonts: array expected'\n      for (let i = 0; i < message.fonts.length; ++i) {\n        let error = $root.FontResource.verify(message.fonts[i])\n        if (error) return 'fonts.' + error\n      }\n    }\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.fonts) {\n      if (!Array.isArray(object.fonts))\n        throw TypeError('.Font.fonts: array expected')\n      message.fonts = []\n      for (let i = 0; i < object.fonts.length; ++i) {\n        if (typeof object.fonts[i] !== 'object')\n          throw TypeError('.Font.fonts: object expected')\n        message.fonts[i] = $root.FontResource.fromObject(object.fonts[i])\n      }\n    }\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.fonts = []\n    if (options.defaults) {\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.fonts && message.fonts.length) {\n      object.fonts = []\n      for (let j = 0; j < message.fonts.length; ++j)\n        object.fonts[j] = $root.FontResource.toObject(message.fonts[j], options)\n    }\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {number|null} [width] Layout width\n   * @property {number|null} [height] Layout height\n   * @property {boolean|null} [auto] Layout auto\n   * @property {boolean|null} [fixedSize] Layout fixedSize\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout width.\n   * @member {number} width\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.width = 0\n\n  /**\n   * Layout height.\n   * @member {number} height\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.height = 0\n\n  /**\n   * Layout auto.\n   * @member {boolean} auto\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.auto = false\n\n  /**\n   * Layout fixedSize.\n   * @member {boolean} fixedSize\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.fixedSize = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\n    if (\n      message.fixedSize != null &&\n      Object.hasOwnProperty.call(message, 'fixedSize')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.width = reader.int32()\n          break\n        case 4:\n          message.height = reader.int32()\n          break\n        case 5:\n          message.auto = reader.bool()\n          break\n        case 6:\n          message.fixedSize = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.height != null && message.hasOwnProperty('height'))\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      if (typeof message.fixedSize !== 'boolean')\n        return 'fixedSize: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.width != null) message.width = object.width | 0\n    if (object.height != null) message.height = object.height | 0\n    if (object.auto != null) message.auto = Boolean(object.auto)\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.width = 0\n      object.height = 0\n      object.auto = false\n      object.fixedSize = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.height != null && message.hasOwnProperty('height'))\n      object.height = message.height\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      object.auto = message.auto\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      object.fixedSize = message.fixedSize\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","import * as proto1000000 from './1.0.0'\nimport * as proto1000001 from './1.0.1'\nimport * as proto1000002 from './1.0.2'\n\nexport interface OldProto {\n  1000000: typeof proto1000000\n  1000001: typeof proto1000001\n  1000002: typeof proto1000002\n}\n\nexport const oldProto: OldProto = {\n  1000000: proto1000000,\n  1000001: proto1000001,\n  1000002: proto1000002,\n}\n\nexport { default as encodeProject } from './encodeProject'\nexport { default as toOriginBuffer } from './toOriginBuffer'\nexport * from './project'\nexport { default } from './project'\n","import { IProject, oldProto, OldProto } from './proto'\n\ntype OldKey = keyof OldProto\n\nconst verions: OldKey[] = Object.keys(oldProto)\n  .map((verion) => `${Number(verion)}` as unknown as OldKey)\n  .sort()\n\nfunction updateOldProject(project: IProject, version: number): IProject {\n  verions.forEach((v) => {\n    if (version <= v && oldProto[v]) oldProto[v].updateToNext(project)\n  })\n  return project\n}\n\nexport default updateOldProject\n","import { Project } from 'src/store'\nimport { encodeProject } from './proto'\n\nimport prefix from './prefix'\n\nexport default function encode(project: Project): Uint8Array {\n  const perfixBuffer = prefix()\n  const projectBuffer = encodeProject(project)\n\n  const buffer = new Uint8Array(\n    perfixBuffer.byteLength + projectBuffer.byteLength,\n  )\n\n  buffer.set(perfixBuffer, 0)\n  buffer.set(projectBuffer, perfixBuffer.byteLength)\n\n  return buffer\n}\n","import { Project } from 'src/store'\nimport { Project as ProjectProto, IProject } from './project'\n\nexport default function saveProject(project: Project): Uint8Array {\n  // font\n  if (project.style.font.fonts && project.style.font.fonts.length) {\n    project.style.font.fonts.forEach(\n      (fontResource) => (fontResource.font = new Uint8Array(fontResource.font)),\n    )\n  }\n\n  // images\n  project.glyphImages.forEach((glyphImage) => {\n    if (glyphImage.buffer) glyphImage.buffer = new Uint8Array(glyphImage.buffer)\n  })\n\n  // fill\n  if (project.style.fill.patternTexture.buffer) {\n    project.style.fill.patternTexture.buffer = new Uint8Array(\n      project.style.fill.patternTexture.buffer,\n    )\n  }\n\n  // stroke\n  if (project.style.stroke.patternTexture.buffer) {\n    project.style.stroke.patternTexture.buffer = new Uint8Array(\n      project.style.stroke.patternTexture.buffer,\n    )\n  }\n\n  return ProjectProto.encode(\n    ProjectProto.create(project as unknown as IProject),\n  ).finish()\n}\n","import { ConversionFileItem } from '../type'\nimport check from './check'\nimport decode from './decode'\n\nconst sbfFile: ConversionFileItem = {\n  ext: '.sbf',\n  check,\n  decode,\n}\n\nexport { default as encode } from './encode'\nexport default sbfFile\n","import { DecodeProjectFunction } from '../type'\nimport {\n  Project as ProjectProto,\n  oldProto,\n  OldProto,\n  toOriginBuffer,\n} from './proto'\nimport prefix from './prefix'\nimport getVersion from './getVersion'\nimport updateOldProject from './updateOldProject'\n\nconst decode: DecodeProjectFunction = (buffer) => {\n  if (!(buffer instanceof ArrayBuffer)) throw new Error('unknow file')\n\n  const version = getVersion(buffer)\n\n  if (version === 0) throw new Error('unknow file')\n\n  const perfixBuffer = prefix()\n  const u8 = new Uint8Array(buffer)\n  const filePrefix = u8.slice(0, perfixBuffer.byteLength)\n\n  const decodeProto =\n    oldProto[version as keyof OldProto]?.Project || ProjectProto\n\n  const project = decodeProto.decode(u8.slice(filePrefix.byteLength))\n\n  return toOriginBuffer(updateOldProject(project, version))\n}\n\nexport default decode\n","import { Project } from 'src/store'\nimport { IProject } from './project'\n\nexport default function toOriginBuffer(protoProject: IProject): Project {\n  const project = protoProject as unknown as Project\n  const map = new Map()\n\n  // font\n  if (protoProject?.style?.font?.fonts) {\n    protoProject.style.font.fonts.forEach((fontResource, idx) => {\n      if (fontResource.font)\n        project.style.font.fonts[idx].font = fontResource.font.slice().buffer\n    })\n  }\n\n  // images\n  if (protoProject?.glyphImages) {\n    protoProject.glyphImages.forEach((glyphImage, idx) => {\n      if (glyphImage.buffer) {\n        project.glyphImages[idx].buffer = glyphImage.buffer.slice().buffer\n      }\n      if (glyphImage.kerning) {\n        const imgKerning = new Map()\n        Object.keys(glyphImage.kerning).forEach((key) => {\n          if (glyphImage && glyphImage.kerning && glyphImage.kerning[key])\n            imgKerning.set(key, glyphImage.kerning[key] || 0)\n        })\n        glyphImage.kerning = imgKerning as {}\n      }\n    })\n  }\n\n  if (protoProject?.glyphs) {\n    Object.keys(protoProject.glyphs).forEach((k) => {\n      if (protoProject && protoProject.glyphs && protoProject.glyphs[k]) {\n        const gl = protoProject.glyphs[k]\n        const glyphKerning = new Map()\n        if (gl && gl.kerning) {\n          Object.keys(gl.kerning).forEach((key) => {\n            if (gl.kerning) glyphKerning.set(key, gl.kerning[key] || 0)\n          })\n        }\n        map.set(k, { ...gl, kerning: glyphKerning })\n      }\n    })\n    project.glyphs = map\n  }\n\n  // fill\n  if (protoProject?.style?.fill?.patternTexture?.buffer) {\n    project.style.fill.patternTexture.buffer =\n      protoProject.style.fill.patternTexture.buffer.slice().buffer\n  }\n\n  // stroke\n  if (protoProject?.style?.stroke?.patternTexture?.buffer) {\n    project.style.stroke.patternTexture.buffer =\n      protoProject.style.stroke.patternTexture.buffer.slice().buffer\n  }\n\n  return project\n}\n","import Ajv, { JTDSchemaType } from 'ajv/dist/jtd'\nimport glow, { GlowData } from './glow'\nimport fill, { FillData } from './fill'\nimport settings, { SettingsData } from './settings'\nimport shadow, { ShadowData } from './shadow'\nimport stroke, { StrokeData } from './stroke'\nimport background, { BackgroundData } from './background'\nimport bevel, { BevelData } from './bevel'\nimport glyphs, { GlyphsData } from './glyphs'\nimport font, { FontData } from './font'\n\nconst ajv = new Ajv()\n\nexport interface LitteraData {\n  glow: GlowData\n  fill: FillData\n  settings: SettingsData\n  shadow: ShadowData\n  stroke: StrokeData\n  background: BackgroundData\n  bevel: BevelData\n  glyphs: GlyphsData\n  font: FontData\n  fallbackfont?: string\n}\n\nconst schema: JTDSchemaType<LitteraData> = {\n  properties: {\n    glow,\n    fill,\n    settings,\n    shadow,\n    stroke,\n    background,\n    bevel,\n    glyphs,\n    font,\n  },\n  optionalProperties: {\n    fallbackfont: { type: 'string' },\n  },\n}\n\nexport * from './glow'\nexport * from './fill'\nexport * from './settings'\nexport * from './shadow'\nexport * from './stroke'\nexport * from './background'\nexport * from './bevel'\nexport * from './glyphs'\nexport * from './font'\n\nexport const validate = ajv.compile(schema)\n\nexport default validate\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface GlowData {\n  quality: number\n  colors: number[]\n  glowEnabled: boolean\n  alphas: number[]\n  ratios: number[]\n  blurX: number\n  angle: number\n  blurY: number\n  strength: number\n  distance: number\n}\n\nconst glow: JTDSchemaType<GlowData> = {\n  properties: {\n    quality: { type: 'float32' },\n    colors: { elements: { type: 'float32' } },\n    glowEnabled: { type: 'boolean' },\n    alphas: { elements: { type: 'float32' } },\n    ratios: { elements: { type: 'float32' } },\n    blurX: { type: 'float32' },\n    angle: { type: 'float32' },\n    blurY: { type: 'float32' },\n    strength: { type: 'float32' },\n    distance: { type: 'float32' },\n  },\n}\n\nexport default glow\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface FillData {\n  gradientAlphas: number[]\n  yOffset: number\n  gradientType: 'linear' | 'radial'\n  gradientRotation: number\n  fillType: 'gradientFill' | 'textureFill'\n  textureScale: number\n  distanceFieldEnabled: boolean\n  distanceFieldColor: number\n  gradientColors: number[]\n  distanceFieldDownscale: number\n  distanceFieldSpread: number\n  distanceFieldType: 'Type 1' | 'Type 2'\n  gradientRatios: number[]\n  xOffset: number\n  texture?: string\n}\n\nconst fill: JTDSchemaType<FillData> = {\n  properties: {\n    gradientAlphas: { elements: { type: 'float32' } },\n    yOffset: { type: 'float32' },\n    gradientType: { enum: ['linear', 'radial'] },\n    gradientRotation: { type: 'float32' },\n    fillType: { enum: ['gradientFill', 'textureFill'] },\n    textureScale: { type: 'float32' },\n    distanceFieldEnabled: { type: 'boolean' },\n    distanceFieldColor: { type: 'float32' },\n    gradientColors: { elements: { type: 'float32' } },\n    distanceFieldDownscale: { type: 'float32' },\n    distanceFieldSpread: { type: 'float32' },\n    distanceFieldType: { enum: ['Type 1', 'Type 2'] },\n    gradientRatios: { elements: { type: 'float32' } },\n    xOffset: { type: 'float32' },\n  },\n  optionalProperties: {\n    texture: { type: 'string' },\n  },\n}\n\nexport default fill\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface SettingsData {\n  postfixes: string\n  filename: string\n  scalings: string\n}\n\nconst settings: JTDSchemaType<SettingsData> = {\n  properties: {\n    postfixes: { type: 'string' },\n    filename: { type: 'string' },\n    scalings: { type: 'string' },\n  },\n}\n\nexport default settings\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface ShadowData {\n  quality: number\n  color: number\n  strength: number\n  blurX: number\n  angle: number\n  blurY: number\n  shadowEnabled: boolean\n  alpha: number\n  distance: number\n}\n\nconst shadow: JTDSchemaType<ShadowData> = {\n  properties: {\n    quality: { type: 'float32' },\n    color: { type: 'float32' },\n    strength: { type: 'float32' },\n    blurX: { type: 'float32' },\n    angle: { type: 'float32' },\n    blurY: { type: 'float32' },\n    shadowEnabled: { type: 'boolean' },\n    alpha: { type: 'float32' },\n    distance: { type: 'float32' },\n  },\n}\n\nexport default shadow\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface StrokeData {\n  gradientAlphas: number[]\n  yOffset: number\n  gradientType: 'linear' | 'radial'\n  gradientRotation: number\n  fillType: 'gradientFill' | 'textureFill'\n  pixelHinting: boolean\n  textureScale: number\n  gradientColors: number[]\n  strokeEnabled: boolean\n  miterLimit: number\n  jointStyle: 'miter' | 'bevel' | 'round'\n  size: number\n  gradientRatios: number[]\n  xOffset: number\n  texture?: string\n}\n\nconst stroke: JTDSchemaType<StrokeData> = {\n  properties: {\n    gradientAlphas: { elements: { type: 'float32' } },\n    yOffset: { type: 'float32' },\n    gradientType: { enum: ['linear', 'radial'] },\n    gradientRotation: { type: 'float32' },\n    fillType: { enum: ['gradientFill', 'textureFill'] },\n    pixelHinting: { type: 'boolean' },\n    textureScale: { type: 'float32' },\n    gradientColors: { elements: { type: 'float32' } },\n    strokeEnabled: { type: 'boolean' },\n    miterLimit: { type: 'float32' },\n    jointStyle: { enum: ['miter', 'bevel', 'round'] },\n    size: { type: 'float32' },\n    gradientRatios: { elements: { type: 'float32' } },\n    xOffset: { type: 'float32' },\n  },\n  optionalProperties: {\n    texture: { type: 'string' },\n  },\n}\n\nexport default stroke\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface BackgroundData {\n  color: number\n  alpha: number\n}\n\nconst background: JTDSchemaType<BackgroundData> = {\n  properties: {\n    color: { type: 'float32' },\n    alpha: { type: 'float32' },\n  },\n}\n\nexport default background\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface BevelData {\n  bevelEnabled: boolean\n  highlightColor: number\n  highlightAlpha: number\n  quality: number\n  angle: number\n  shadowColor: number\n  shadowAlpha: number\n  blurX: number\n  blurY: number\n  type: 'inner' | 'outer' | 'full'\n  strength: number\n  distance: number\n}\n\nconst bevel: JTDSchemaType<BevelData> = {\n  properties: {\n    bevelEnabled: { type: 'boolean' },\n    highlightColor: { type: 'float32' },\n    highlightAlpha: { type: 'float32' },\n    quality: { type: 'float32' },\n    angle: { type: 'float32' },\n    shadowColor: { type: 'float32' },\n    shadowAlpha: { type: 'float32' },\n    blurX: { type: 'float32' },\n    blurY: { type: 'float32' },\n    type: { enum: ['inner', 'outer', 'full'] },\n    strength: { type: 'float32' },\n    distance: { type: 'float32' },\n  },\n}\n\nexport default bevel\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface GlyphsData {\n  glyphs: string\n  powerOfTwo: boolean\n  canvasHeight: string\n  padding: number\n  packMethod: number\n  canvasWidth: string\n  roundValues: boolean\n  descriptionFormat: number\n}\n\nconst glyphs: JTDSchemaType<GlyphsData> = {\n  properties: {\n    glyphs: { type: 'string' },\n    powerOfTwo: { type: 'boolean' },\n    canvasHeight: { type: 'string' },\n    padding: { type: 'float32' },\n    packMethod: { type: 'float32' },\n    canvasWidth: { type: 'string' },\n    roundValues: { type: 'boolean' },\n    descriptionFormat: { type: 'float32' },\n  },\n}\n\nexport default glyphs\n","import { JTDSchemaType } from 'ajv/dist/jtd'\n\nexport interface FontData {\n  size: number\n  data?: string\n  spacing: number\n}\n\nconst font: JTDSchemaType<FontData> = {\n  properties: {\n    size: { type: 'float32' },\n    spacing: { type: 'float32' },\n  },\n  optionalProperties: {\n    data: { type: 'string' },\n  },\n}\n\nexport default font\n","import * as Sentry from '@sentry/react'\nimport validate from './schema'\nimport { CheckFunction } from '../type'\n\nconst check: CheckFunction = (litteraStr) => {\n  let litteraData\n\n  if (typeof litteraStr === 'string') {\n    try {\n      litteraData = JSON.parse(litteraStr)\n    } catch (e) {\n      return false\n    }\n  }\n\n  if (typeof litteraData !== 'object') return false\n\n  const isLittera = validate(litteraData)\n\n  if (!isLittera) {\n    if (process.env.NODE_ENV === 'development')\n      console.log(isLittera, validate.errors)\n\n    validate.errors?.forEach((item) => {\n      Sentry.addBreadcrumb({\n        category: 'littera',\n        message: 'Littera validate error',\n        level: Sentry.Severity.Info,\n        data: item,\n      })\n    })\n    Sentry.captureMessage('Littera validate error')\n  }\n\n  return isLittera\n}\n\nexport default check\n","import Color from 'color'\nimport {\n  Font,\n  Style,\n  Layout,\n  Project,\n  FillType,\n  Gradient,\n  GlyphFont,\n  FontResource,\n  GradientType,\n  PatternTexture,\n  FontStyleConfig,\n  ShadowStyleConfig,\n  StrokeStyleConfig,\n} from 'src/store'\nimport base64ToArrayBuffer from 'src/utils/base64ToArrayBuffer'\nimport { DecodeProjectFunction } from '../type'\nimport { LitteraData, FillData, StrokeData } from './schema'\nimport check from './check'\n\nfunction transformFill(litteraFill: FillData | StrokeData): FontStyleConfig {\n  const fill = {} as FontStyleConfig\n  if (litteraFill.fillType === 'gradientFill') {\n    // solid color\n    if (litteraFill.gradientColors.length < 2) {\n      fill.type = FillType.SOLID\n      fill.color = Color(litteraFill.gradientColors[0])\n        .alpha(litteraFill.gradientAlphas[0])\n        .hex()\n    } else {\n      fill.type = FillType.GRADIENT\n      fill.gradient = {} as Gradient\n      fill.gradient.palette = []\n      fill.gradient.type =\n        litteraFill.gradientType === 'radial'\n          ? GradientType.RADIAL\n          : GradientType.LINEAR\n\n      litteraFill.gradientColors.forEach((color, idx) => {\n        fill.gradient.palette.push({\n          id: idx + 1,\n          color: Color(color).alpha(litteraFill.gradientAlphas[idx]).hex(),\n          offset: litteraFill.gradientRatios[idx] / 255,\n        })\n      })\n      fill.gradient.angle = litteraFill.gradientRotation\n    }\n  } else {\n    fill.patternTexture = {\n      scale: litteraFill.textureScale,\n    } as PatternTexture\n\n    if (litteraFill.texture) {\n      fill.patternTexture.buffer = base64ToArrayBuffer(litteraFill.texture)\n    }\n  }\n\n  return fill\n}\n\nconst decode: DecodeProjectFunction = (litteraData) => {\n  if (!check(litteraData)) throw new Error('unknow file')\n\n  if (typeof litteraData === 'string') litteraData = JSON.parse(litteraData)\n\n  const data = litteraData as LitteraData\n  const project: Partial<Project> = {}\n\n  project.text = data.glyphs.glyphs\n\n  project.glyphs = new Map()\n\n  data.glyphs.glyphs\n    .split('')\n    .forEach((letter) => project.glyphs?.set(letter, { letter } as GlyphFont))\n\n  /**\n   * style\n   */\n\n  /**\n   * style.font\n   */\n  //#region style.font\n  const font = {} as Font\n  font.size = data.font.size\n\n  if (data.font.data) {\n    font.fonts = []\n    font.fonts.push({\n      font: base64ToArrayBuffer(data.font.data),\n    } as FontResource)\n    if (data.fallbackfont) {\n      font.fonts.push({\n        font: base64ToArrayBuffer(data.fallbackfont),\n      } as FontResource)\n    }\n  }\n  //#endregion\n\n  /**\n   * style.fill\n   */\n  //#region style.fill\n  const fill = transformFill(data.fill) as FontStyleConfig\n  //#endregion\n\n  /**\n   * style.stroke\n   */\n  //#region style.stroke\n  const stroke = {} as StrokeStyleConfig\n  stroke.width = data.stroke.size\n  stroke.lineJoin = data.stroke.jointStyle\n  Object.assign(stroke, transformFill(data.stroke))\n  //#endregion\n\n  /**\n   * style.shadow\n   */\n  //#region style.shadow\n  const shadow = {} as ShadowStyleConfig\n  shadow.color = Color(data.shadow.color).alpha(data.shadow.alpha).hex()\n  shadow.blur = data.shadow.quality + data.shadow.blurX - data.shadow.strength\n  shadow.offsetX = Math.round(\n    Math.cos((data.shadow.angle * Math.PI) / 180) * data.shadow.distance,\n  )\n  shadow.offsetY = Math.round(\n    Math.sin((data.shadow.angle * Math.PI) / 180) * data.shadow.distance,\n  )\n  //#endregion\n\n  project.style = {\n    font,\n    fill,\n    useStroke: data.stroke.strokeEnabled,\n    stroke,\n    useShadow: data.shadow.shadowEnabled,\n    shadow,\n  } as Style\n\n  /**\n   * layout\n   */\n  project.layout = {} as Layout\n  project.layout.padding = data.glyphs.padding\n  if (!isNaN(Number(data.glyphs.canvasWidth))) {\n    project.layout.width = Number(data.glyphs.canvasWidth)\n  }\n  if (!isNaN(Number(data.glyphs.canvasHeight))) {\n    project.layout.width = Number(data.glyphs.canvasHeight)\n  }\n  if (project.layout.width && project.layout.height) {\n    project.layout.auto = false\n    project.layout.fixedSize = true\n  }\n\n  return project\n}\n\nexport default decode\n","import { ConversionFileItem } from './type'\nimport sbf from './sbf'\nimport littera from './littera'\n\nconst conversionList: ConversionFileItem[] = [sbf, littera]\n\nexport default conversionList\n","import { ConversionFileItem } from '../type'\nimport check from './check'\nimport decode from './decode'\n\nconst litteraFile: ConversionFileItem = {\n  ext: '.ltr',\n  check,\n  decode,\n}\n\nexport default litteraFile\n","import conversionList from './types'\nexport { encode } from './types/sbf'\n\nfunction conversion(inputFile: unknown) {\n  const conversion = conversionList.find((item) => item.check(inputFile))\n  if (!conversion) throw new Error('unknow file')\n  return conversion.decode(inputFile)\n}\n\nexport default conversion\n","import React, { FunctionComponent, useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { useSnackbar } from 'notistack'\nimport * as Sentry from '@sentry/react'\nimport Button from '@material-ui/core/Button'\nimport { useWorkspace } from 'src/store/hooks'\n\nimport readFile from 'src/utils/readFile'\nimport conversion from 'src/file/conversion'\n\ninterface ButtonOpenProps {\n  className?: string\n}\n\nconst ButtonOpen: FunctionComponent<ButtonOpenProps> = (\n  props: ButtonOpenProps,\n) => {\n  const { className } = props\n  const { enqueueSnackbar } = useSnackbar()\n\n  const worckSpace = useWorkspace()\n  const labelRef = useRef<HTMLLabelElement>(null)\n  const { addProject } = worckSpace\n\n  const handleLoad = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target?.files || !e.target.files[0]) return\n    const file = e.target.files[0]\n    const isText = /\\.ltr$/.test(file.name)\n\n    readFile(file, isText).then((buffer) => {\n      try {\n        const project = conversion(buffer)\n        if (!project.name) project.name = file.name\n        addProject(project)\n      } catch (e) {\n        console.log(e)\n        Sentry.captureException(e)\n        enqueueSnackbar((e as Error).toString(), { variant: 'error' })\n      }\n    })\n  }\n\n  return (\n    <Button\n      className={className}\n      title='Open Project (⌘ + O)'\n      component='label'\n      ref={labelRef}\n    >\n      Open\n      <input type='file' onChange={handleLoad} accept='.sbf,.ltr' hidden />\n    </Button>\n  )\n}\n\nexport default observer(ButtonOpen)\n","import React, { useEffect, FunctionComponent, useCallback } from 'react'\nimport { toJS } from 'mobx'\nimport hotkeys from 'hotkeys-js'\nimport { saveAs } from 'file-saver'\nimport { observer } from 'mobx-react'\nimport { useSnackbar } from 'notistack'\nimport * as Sentry from '@sentry/react'\nimport Button from '@material-ui/core/Button'\n\nimport { encode } from 'src/file/conversion'\nimport { useWorkspace } from 'src/store/hooks'\n\ninterface ButtonSaveProps {\n  className?: string\n}\n\nconst ButtonSave: FunctionComponent<ButtonSaveProps> = (\n  props: ButtonSaveProps,\n) => {\n  const { className } = props\n\n  const { enqueueSnackbar } = useSnackbar()\n  const worckSpace = useWorkspace()\n  const { currentProject: project } = worckSpace\n\n  const handleSaveProject = useCallback(\n    (e: { preventDefault(): void }) => {\n      e.preventDefault()\n      try {\n        const buffer = encode(toJS(project))\n        saveAs(new Blob([buffer]), `${project.name}.sbf`)\n      } catch (e) {\n        Sentry.captureException(e)\n        enqueueSnackbar((e as Error).message)\n      }\n    },\n    [enqueueSnackbar, project],\n  )\n\n  useEffect(() => {\n    hotkeys.unbind('ctrl+s')\n    hotkeys('ctrl+s', handleSaveProject)\n    return () => {\n      hotkeys.unbind('ctrl+s')\n    }\n  }, [handleSaveProject])\n\n  return (\n    <Button\n      className={className}\n      title='Save Project (⌘ + S)'\n      onClick={handleSaveProject}\n    >\n      Save\n    </Button>\n  )\n}\n\nexport default observer(ButtonSave)\n","export default function formatStr(\n  str: string,\n  obj: Record<string, unknown>,\n): string {\n  return str.replace(/\\$\\w+\\$/gi, (matchs: string): string => {\n    const returns = obj[matchs.replace(/\\$/g, '')]\n    return `${returns}` === 'undefined' ? '' : `${returns}`\n  })\n}\n","import formatStr from 'src/utils/formatStr'\nimport { Output, FontToString } from '../type'\n\nconst TEMP_INFO = `info face=\"$face$\" size=$size$ bold=$bold$ italic=$italic$ charset=$charset$ unicode=$unicode$ stretchH=$stretchH$ smooth=$smooth$ aa=$aa$ padding=$padding$ spacing=$spacing$\\n`\nconst TEMP_COMMON = `common lineHeight=$lineHeight$ base=$base$ scaleW=$scaleW$ scaleH=$scaleH$ pages=$pages$ packed=$packed$\\n`\nconst TEMP_PAGE = `page id=$id$ file=\"$file$\"\\n`\nconst TEMP_CHARS = `chars count=$count$\\n`\nconst TEMP_CHAR = `char id=$id$ x=$x$ y=$y$ width=$width$ height=$height$ xoffset=$xoffset$ yoffset=$yoffset$ xadvance=$xadvance$ page=$page$ chnl=$chnl$\\n`\nconst TEMP_KERNINGS = `kernings count=$count$\\n`\nconst TEMP_KERNING = `kerning first=$first$ second=$second$ amount=$amount$\\n`\n\nconst type = 'TEXT'\n\nconst exts = ['fnt', 'txt']\n\nconst getString: FontToString = (bmfont) => {\n  const { info, common, pages, chars, kernings } = bmfont\n\n  let str = ''\n\n  str += formatStr(TEMP_INFO, { ...info, charset: info.charset || '\"\"' })\n\n  str += formatStr(TEMP_COMMON, common)\n\n  pages.forEach((p) => {\n    str += formatStr(TEMP_PAGE, p)\n  })\n\n  str += formatStr(TEMP_CHARS, chars)\n\n  chars.list.forEach((char) => {\n    str += formatStr(TEMP_CHAR, char)\n  })\n\n  if (kernings.count) {\n    str += formatStr(TEMP_KERNINGS, kernings)\n\n    kernings.list.forEach((kerning) => {\n      str += formatStr(TEMP_KERNING, kerning)\n    })\n  }\n\n  return str\n}\n\nconst outputConfig: Output = { type, exts, getString }\n\nexport default outputConfig\n","import formatStr from 'src/utils/formatStr'\nimport { Output, FontToString } from '../type'\n\nconst TEMP_INFO = `<info face=\"$face$\" size=\"$size$\" bold=\"$bold$\" italic=\"$italic$\" charset=\"$charset$\" unicode=\"$unicode$\" stretchH=\"$stretchH$\" smooth=\"$smooth$\" aa=\"$aa$\" padding=\"$padding$\" spacing=\"$spacing$\" />`\nconst TEMP_COMMON = `<common lineHeight=\"$lineHeight$\" base=\"$base$\" scaleW=\"$scaleW$\" scaleH=\"$scaleH$\" pages=\"$pages$\" packed=\"$packed$\" />`\nconst TEMP_PAGE = `<page id=\"$id$\" file=\"$file$\" />`\nconst TEMP_CHARS = `<chars count=\"$count$\" />`\nconst TEMP_CHAR = `<char id=\"$id$\" x=\"$x$\" y=\"$y$\" width=\"$width$\" height=\"$height$\" xoffset=\"$xoffset$\" yoffset=\"$yoffset$\" xadvance=\"$xadvance$\" page=\"$page$\" chnl=\"$chnl$\" />`\nconst TEMP_KERNINGS = `<kernings count=\"$count$\" />`\nconst TEMP_KERNING = `<kerning first=\"$first$\" second=\"$second$\" amount=\"$amount$\" />`\n\nconst type = 'XML'\n\nconst exts = ['xml', 'fnt']\n\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\nconst getString: FontToString = (bmfont) => {\n  const { info, common, pages, chars, kernings } = bmfont\n\n  const parser = new DOMParser()\n  const xmlDOM = document.implementation.createDocument('', 'font', null)\n\n  const infoDoc = parser.parseFromString(formatStr(TEMP_INFO, info), 'text/xml')\n  xmlDOM.documentElement.appendChild(infoDoc.childNodes[0])\n\n  const commonDoc = parser.parseFromString(\n    formatStr(TEMP_COMMON, common),\n    'text/xml',\n  )\n  xmlDOM.documentElement.appendChild(commonDoc.childNodes[0])\n\n  const pagesDoc = parser.parseFromString(\n    `<pages>${pages.map((p) => formatStr(TEMP_PAGE, p))}</pages>`,\n    'text/xml',\n  )\n  xmlDOM.documentElement.appendChild(pagesDoc.childNodes[0])\n\n  const charsDoc = parser.parseFromString(\n    formatStr(TEMP_CHARS, chars),\n    'text/xml',\n  )\n\n  chars.list.forEach((char) => {\n    const charDoc = parser.parseFromString(\n      formatStr(TEMP_CHAR, char),\n      'text/xml',\n    )\n    charsDoc.childNodes[0].appendChild(charDoc.childNodes[0])\n  })\n\n  xmlDOM.documentElement.appendChild(charsDoc.childNodes[0])\n\n  if (kernings.count) {\n    const kerningsDoc = parser.parseFromString(\n      formatStr(TEMP_KERNINGS, kernings),\n      'text/xml',\n    )\n\n    kernings.list.forEach((kerning) => {\n      const kerningDoc = parser.parseFromString(\n        formatStr(TEMP_KERNING, kerning),\n        'text/xml',\n      )\n      kerningsDoc.childNodes[0].appendChild(kerningDoc.childNodes[0])\n    })\n\n    xmlDOM.documentElement.appendChild(kerningsDoc.childNodes[0])\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${new XMLSerializer().serializeToString(\n    xmlDOM,\n  )}`\n}\n\nconst outputConfig: Output = { type, exts, getString }\n\nexport default outputConfig\n","import { Project } from 'src/store'\nimport {\n  BMFont,\n  BMFontInfo,\n  BMFontPage,\n  BMFontChars,\n  BMFontCommon,\n  BMFontKernings,\n} from './type'\n\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\nexport default function toBmfInfo(project: Project): BMFont {\n  const {\n    name,\n    style,\n    layout,\n    globalAdjustMetric,\n    glyphList,\n    ui: { width, height },\n  } = project\n  const { opentype, size } = style.font\n  let fontScale = 1\n  if (opentype) {\n    fontScale = (1 / opentype.unitsPerEm) * size\n  }\n  const info: BMFontInfo = {\n    face: style.font.mainFamily,\n    size: style.font.size,\n    bold: 0,\n    italic: 0,\n    charset: '',\n    unicode: 1,\n    stretchH: 100,\n    smooth: 1,\n    aa: 1,\n    padding: new Array(4).fill(layout.padding),\n    spacing: new Array(2).fill(layout.spacing),\n  }\n\n  const common: BMFontCommon = {\n    lineHeight: style.font.size,\n    base: Math.round(style.font.alphabetic - style.font.top),\n    scaleW: width,\n    scaleH: height,\n    pages: 1,\n    packed: 0,\n  }\n\n  const pages: BMFontPage[] = [\n    {\n      id: 0,\n      file: `${name}.png`,\n    },\n  ]\n\n  const chars: BMFontChars = {\n    count: glyphList.length,\n    list: [],\n  }\n\n  const kernings: BMFontKernings = {\n    count: 0,\n    list: [],\n  }\n\n  glyphList.forEach((glyph) => {\n    const isUnEmpty = !!(glyph.width && glyph.height)\n    const info = {\n      letter: glyph.letter,\n      id: glyph.letter.charCodeAt(0),\n      source: glyph.source,\n      x: glyph.x,\n      y: glyph.y,\n      width: isUnEmpty ? glyph.width + layout.padding * 2 : 0,\n      height: isUnEmpty ? glyph.height + layout.padding * 2 : 0,\n      xoffset:\n        globalAdjustMetric.xOffset +\n        glyph.adjustMetric.xOffset -\n        (isUnEmpty ? glyph.trimOffsetLeft : 0) -\n        (isUnEmpty ? layout.padding : 0),\n      yoffset:\n        globalAdjustMetric.yOffset +\n        glyph.adjustMetric.yOffset -\n        (isUnEmpty ? glyph.trimOffsetTop : 0) -\n        (isUnEmpty ? layout.padding : 0),\n      xadvance:\n        Math.ceil(glyph.fontWidth) +\n        globalAdjustMetric.xAdvance +\n        glyph.adjustMetric.xAdvance,\n      page: 0,\n      chnl: 15,\n    }\n\n    info.xoffset = Math.round(info.xoffset)\n    info.yoffset = Math.round(info.yoffset)\n    chars.list.push(info)\n\n    if (opentype) {\n      glyphList.forEach(({ letter }) => {\n        const amount = Math.round(\n          opentype.getKerningValue(\n            opentype.charToGlyphIndex(glyph.letter),\n            opentype.charToGlyphIndex(letter),\n          ) *\n            fontScale +\n            (glyph.kerning.get(letter) || 0),\n        )\n        if (amount) {\n          kernings.list.push({\n            first: glyph.letter.charCodeAt(0),\n            second: letter.charCodeAt(0),\n            amount,\n          })\n        }\n      })\n    } else {\n      glyph.kerning.forEach((amount, letter) => {\n        if (amount)\n          kernings.list.push({\n            first: glyph.letter.charCodeAt(0),\n            second: letter.charCodeAt(0),\n            amount,\n          })\n      })\n    }\n  })\n  kernings.count = kernings.list.length\n\n  chars.list.sort((a, b) => a.id - b.id)\n\n  return {\n    info,\n    common,\n    pages,\n    chars,\n    kernings,\n  }\n}\n","import { ConfigItem } from './type'\nimport text from './types/text'\nimport xml from './types/xml'\n\nconst list = [text, xml]\n\nexport const configList: ConfigItem[] = []\n\nlist.forEach(({ type, exts, getString }) => {\n  exts.forEach((ext) => {\n    configList.push({\n      id: type + ext,\n      ext,\n      type,\n      getString,\n    })\n  })\n})\n\nexport * from './type'\nexport * from './toBmfInfo'\nexport { default as toBmfInfo } from './toBmfInfo'\nexport { default as exportFile } from './exportFile'\nexport default configList\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  FunctionComponent,\n} from 'react'\nimport hotkeys from 'hotkeys-js'\nimport { observer } from 'mobx-react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport { useProject } from 'src/store/hooks'\nimport { configList, exportFile } from 'src/file/export'\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\ninterface ButtonExportProps {\n  className?: string\n}\n\nconst ButtonExport: FunctionComponent<ButtonExportProps> = (\n  props: ButtonExportProps,\n) => {\n  const { className } = props\n  const project = useProject()\n  const { name, ui } = project\n  const { setShowPreview } = ui\n  const [open, setOpen] = useState(false)\n  const [list] = useState(configList)\n  const [val, setVal] = useState(0)\n\n  const handleOpen = useCallback(() => {\n    setShowPreview(false)\n    setOpen(true)\n  }, [setShowPreview])\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleChange = (\n    e: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n    }>,\n  ) => {\n    setVal(e.target.value as number)\n  }\n\n  const handleSave = useCallback(() => {\n    exportFile(project, list[val])\n    handleClose()\n  }, [list, project, val])\n\n  useEffect(() => {\n    hotkeys.unbind('ctrl+shift+s,command+shift+s')\n    hotkeys('ctrl+shift+s,command+shift+s', handleOpen)\n    return () => {\n      hotkeys.unbind('ctrl+shift+s,command+shift+s')\n    }\n  }, [handleOpen])\n\n  return (\n    <>\n      <Button\n        className={className}\n        title='Export BitmapFont (⌘⇧ + S)'\n        onClick={handleOpen}\n      >\n        Export\n      </Button>\n      <Dialog onClose={handleClose} open={open} fullWidth maxWidth='xs'>\n        <DialogTitle>Export Config</DialogTitle>\n        <DialogContent dividers>\n          <GridInput before='Export Type:' childrenWidth={8}>\n            <Select displayEmpty value={val} onChange={handleChange}>\n              {list.map((item, idx) => (\n                <MenuItem value={idx} key={item.id}>\n                  {`${name}.${item.ext} (BMFont ${item.type.toUpperCase()})`}\n                </MenuItem>\n              ))}\n            </Select>\n          </GridInput>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleSave} color='default'>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default observer(ButtonExport)\n","import JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\nimport { Project } from 'src/store'\nimport toBmfInfo from './toBmfInfo'\nimport { ConfigItem } from './type'\n\nexport default function exportFile(project: Project, config: ConfigItem): void {\n  const zip = new JSZip()\n  const { packCanvas, name } = project\n  const bmfont = toBmfInfo(project)\n  const text = config.getString(bmfont)\n\n  zip.file(`${name}.${config.ext}`, text)\n\n  if (packCanvas) {\n    packCanvas.toBlob((blob) => {\n      if (blob) zip.file(`${name}.png`, blob)\n      zip\n        .generateAsync({ type: 'blob' })\n        .then((content) => saveAs(content, `${name}.zip`))\n    })\n  }\n}\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport ButtonNew from './ButtonNew'\nimport ButtonOpen from './ButtonOpen'\nimport ButtonSave from './ButtonSave'\nimport ButtonExport from './ButtonExport'\n\nconst useStyles = makeStyles(({ zIndex, spacing }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      zIndex: zIndex.appBar,\n    },\n    appName: {\n      fontSize: '1.25rem',\n      fontWeight: 'bolder',\n      marginRight: spacing(4),\n    },\n    appNameSup: {\n      fontWeight: 'lighter',\n      fontSize: '0.5em',\n      marginLeft: '0.5rem',\n    },\n    btn: {\n      textTransform: 'none',\n    },\n  }),\n)\n\nconst TitleBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box\n      className={classes.root}\n      bgcolor='background.titleBar'\n      paddingX={4}\n      display='flex'\n      alignItems='center'\n    >\n      <Typography variant='h1' className={classes.appName}>\n        SnowB BMF\n        <sup className={classes.appNameSup}>BETA</sup>\n      </Typography>\n      <Box flex='auto' paddingX={4}>\n        <ButtonNew className={classes.btn} />\n        <ButtonOpen className={classes.btn} />\n        <ButtonSave className={classes.btn} />\n        <ButtonExport className={classes.btn} />\n      </Box>\n      <IconButton\n        size='small'\n        component='a'\n        href='https://github.com/SilenceLeo/snowb-bmf'\n        target='_blank'\n        title='GitHub'\n      >\n        <GitHubIcon />\n      </IconButton>\n    </Box>\n  )\n}\nexport default TitleBar\n","import React, { FunctionComponent } from 'react'\nimport { SketchPicker, ColorResult } from 'react-color'\nimport { useTheme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper'\n\nexport interface ChildrenProps {\n  open: boolean\n  color: string\n  placement: PopperPlacementType\n  anchorEl: HTMLDivElement | null\n  onChange(color: string): void\n}\n\nconst usePickerStyle = () => {\n  const theme = useTheme()\n  const { palette } = theme\n\n  if (palette.type === 'light') return {}\n\n  return {\n    default: {\n      picker: {\n        background: palette.background.titleBar,\n        shadow: theme.shadows[24],\n      },\n      alpha: {\n        background: '#fff',\n      },\n      color: {\n        background: '#fff',\n      },\n    },\n  }\n}\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    picker: {\n      '& *': {\n        color: `${palette.text.primary} !important`,\n        borderColor: `${palette.divider} !important`,\n      },\n      '& input': {\n        background: 'none',\n        color: `${palette.text.primary} !important`,\n        boxShadow: `none !important`,\n        border: `1px solid ${palette.divider} !important`,\n      },\n    },\n  }),\n)\n\nconst WrappedSketchPicker: FunctionComponent<Partial<ChildrenProps>> = (\n  props: Partial<ChildrenProps>,\n) => {\n  const { open, anchorEl, color, onChange, placement } = props\n  const classes = useStyles()\n  const pickerStyle = usePickerStyle()\n  return (\n    <Popper\n      open={!!open}\n      anchorEl={anchorEl}\n      placement={placement || 'bottom'}\n      style={{ zIndex: 999999 }}\n    >\n      <SketchPicker\n        color={color}\n        styles={pickerStyle}\n        className={classes.picker}\n        onChange={({ rgb }: ColorResult) => {\n          if (onChange)\n            onChange(\n              `rgba(${rgb.r},${rgb.g},${rgb.b},${\n                typeof rgb.a === 'undefined' ? 1 : rgb.a\n              })`,\n            )\n        }}\n      />\n    </Popper>\n  )\n}\n\nexport default WrappedSketchPicker\n","import React, { FunctionComponent, useRef, useState } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport WrappedSketchPicker from '../WrappedSketchPicker'\n\nexport interface ColorInputProps {\n  color?: string\n  onChange?: (color: string) => void\n}\n\nconst useStyles = makeStyles(({ palette, bgPixel }: Theme) =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n    swatch: {\n      ...bgPixel,\n      display: 'inline-block',\n      cursor: 'pointer',\n    },\n    color: {\n      width: '46px',\n      height: '24px',\n      border: `5px solid ${palette.primary.main}`,\n      backgroundColor: (props: ColorInputProps) => props.color || '',\n    },\n  }),\n)\n\nconst ColorInput: FunctionComponent<ColorInputProps> = (\n  props: ColorInputProps,\n) => {\n  const { color, onChange } = props\n  const classes = useStyles(props)\n  const anchorEl = useRef(null)\n  const [open, setOpen] = useState(false)\n\n  return (\n    <ClickAwayListener\n      mouseEvent='onMouseDown'\n      onClickAway={() => setOpen(false)}\n    >\n      <div aria-hidden className={classes.swatch} ref={anchorEl}>\n        <div\n          aria-hidden\n          className={classes.color}\n          onClick={() => setOpen(!open)}\n        />\n        <WrappedSketchPicker\n          open={open}\n          anchorEl={anchorEl.current}\n          color={color || '#000000'}\n          onChange={onChange}\n        />\n      </div>\n    </ClickAwayListener>\n  )\n}\n\nexport default ColorInput\n","import React, { FunctionComponent } from 'react'\n\nimport GridInput from 'src/app/components/GridInput'\nimport ColorInput from 'src/app/components/ColorInput'\n\ninterface FormColorProps {\n  color: string\n  onChange(color: string): void\n}\n\nconst FormColor: FunctionComponent<FormColorProps> = (\n  props: FormColorProps,\n) => {\n  const { color, onChange } = props\n\n  return (\n    <GridInput before='Color:' childrenWidth={3}>\n      <ColorInput color={color} onChange={onChange} />\n    </GridInput>\n  )\n}\n\nexport default FormColor\n","import React, {\n  FunctionComponent,\n  DetailedHTMLProps,\n  HTMLAttributes,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\ninterface ColorStopPorps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  left?: string | number\n  top?: string | number\n  color: string\n  isActive: boolean\n}\n\nconst useStyles = makeStyles(({ bgPixel, palette }: Theme) =>\n  createStyles({\n    root: {\n      ...bgPixel,\n      width: '12px',\n      height: '12px',\n      border: `solid ${palette.primary.main}`,\n      borderWidth: '0 1px 1px',\n      position: 'absolute',\n      cursor: 'pointer',\n      marginLeft: '-6px',\n      left: (props) => props.left || 0,\n      zIndex: (props) => (props.isActive ? 2 : 1),\n      '&:before,&:after': {\n        position: 'absolute',\n        content: '\"\"',\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        left: '0',\n      },\n      '&:before': {\n        top: '-6px',\n        left: '-1px',\n        borderWidth: '0 6px 6px 6px',\n        borderColor: `transparent transparent ${palette.primary.dark} transparent`,\n      },\n      '&:after': {\n        top: '-5px',\n        borderWidth: '0 5px 5px 5px',\n        borderColor: (props) => {\n          const activeColor =\n            palette.type === 'dark'\n              ? palette.common.white\n              : palette.common.black\n\n          return `transparent transparent ${\n            props.isActive ? activeColor : palette.grey[600]\n          } transparent`\n        },\n      },\n    },\n    color: {\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none',\n      backgroundColor: ({ color }: ColorStopPorps) => color || 'transparent',\n    },\n  }),\n)\n\nconst ColorStop: FunctionComponent<ColorStopPorps> = (\n  props: ColorStopPorps,\n) => {\n  const { left, top, color, isActive, className, ...divProps } = props\n  const classes = useStyles({ left, top, color, isActive })\n\n  return (\n    <div className={clsx(classes.root, className)} {...divProps}>\n      <div className={classes.color} />\n    </div>\n  )\n}\n\nexport default ColorStop\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useRef,\n  MutableRefObject,\n  useState,\n  useEffect,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport ColorStop from './ColorStop'\n\nexport interface AddPaletteItem {\n  offset: number\n  color: string\n}\n\nexport interface PaletteItem extends AddPaletteItem {\n  id: number\n  offset: number\n  color: string\n}\n\ninterface ColorStopsHolderProps {\n  className?: string\n  palette: PaletteItem[]\n  activeId?: number\n  onAdd(offset: number): void\n  onUpdate(paletteItem: Partial<AddPaletteItem>, isDelete?: boolean): void\n  onSelect(id?: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '17px',\n      position: 'relative',\n      cursor: 'crosshair',\n    },\n  }),\n)\n\nconst ColorStopsHolder: FunctionComponent<ColorStopsHolderProps> = (\n  props: ColorStopsHolderProps,\n) => {\n  const { className, palette, activeId, onAdd, onUpdate, onSelect } = props\n  const classes = useStyles(props)\n  const [width, setWidth] = useState(0)\n  const [startPoint, setStartPoint] = useState({ x: 0, y: 0, offset: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const rootRef: MutableRefObject<HTMLDivElement | null> = useRef(null)\n\n  useEffect(() => {\n    if (rootRef.current) {\n      setWidth(rootRef.current.clientWidth)\n    }\n  }, [rootRef])\n\n  const handleAddPalette = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    const target = rootRef.current\n    if (!target || e.buttons !== 1) return\n    const { left } = target.getBoundingClientRect()\n    const offset = (e.clientX - left) / width\n    onAdd(offset)\n    setIsDragging(true)\n    setStartPoint({ x: e.clientX, y: e.clientY, offset })\n  }\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    paletteItem: PaletteItem,\n  ) => {\n    if (e.buttons !== 1) return\n    e.preventDefault()\n    e.stopPropagation()\n    setStartPoint({ x: e.clientX, y: e.clientY, offset: paletteItem.offset })\n    setIsDragging(true)\n    onSelect(paletteItem.id)\n  }\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging || !activeId) return\n      if (e.buttons !== 1) {\n        setIsDragging(false)\n        return\n      }\n      const idx = palette.findIndex(\n        (paletteItem) => paletteItem.id === activeId,\n      )\n\n      if (idx < 0) return\n      const newPalette = [...palette]\n\n      if (Math.abs(e.clientY - startPoint.y) > 50) {\n        onUpdate(newPalette[idx], true)\n        return\n      }\n\n      const paletteItem = newPalette[idx]\n      const offset = Math.min(\n        Math.max((e.clientX - startPoint.x) / width + startPoint.offset, 0),\n        1,\n      )\n      newPalette[idx] = { ...paletteItem, offset }\n      onUpdate({ offset })\n    },\n    [\n      activeId,\n      isDragging,\n      onUpdate,\n      palette,\n      startPoint.offset,\n      startPoint.x,\n      startPoint.y,\n      width,\n    ],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      ref={rootRef}\n      className={clsx(classes.root, className)}\n      onMouseDown={handleAddPalette}\n    >\n      {palette.map((paletteItem) => (\n        <ColorStop\n          key={paletteItem.id}\n          left={width * paletteItem.offset}\n          color={paletteItem.color}\n          isActive={paletteItem.id === activeId}\n          onMouseDown={(e) => handleMouseDown(e, paletteItem)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorStopsHolder\n","import React, { FunctionComponent, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nexport interface PaletteItem {\n  id: number | string\n  offset: number\n  color: string\n}\n\ninterface PaletteProps {\n  width?: number | string\n  height?: number | string\n  palette: PaletteItem[]\n}\n\nconst useStyles = makeStyles(({ bgPixel }) => ({\n  root: {\n    ...bgPixel,\n    width: (props: PaletteProps) => props.width || '100%',\n    height: (props: PaletteProps) => props.height || '100%',\n    border: '1px solid #ccc',\n  },\n  svg: {\n    width: '100%',\n    height: '100%',\n    verticalAlign: 'top',\n  },\n}))\n\nconst Palette: FunctionComponent<PaletteProps> = (\n  props: PaletteProps,\n): JSX.Element => {\n  const classes = useStyles(props)\n  const { palette } = props\n  const [id] = useState(`palette_${Math.random().toString().substr(2, 9)}`)\n  const sortedPalette = [...palette].sort(\n    ({ offset: offset1 }, { offset: offset2 }) => offset1 - offset2,\n  )\n\n  return (\n    <div className={classes.root}>\n      <svg className={classes.svg}>\n        <defs>\n          <linearGradient id={id} x1='0' y1='0.5' x2='1' y2='0.5'>\n            {sortedPalette.map((item) => (\n              <stop\n                key={item.id}\n                offset={item.offset}\n                style={{ stopColor: item.color }}\n              />\n            ))}\n          </linearGradient>\n        </defs>\n        <rect x='0' y='0' width='100%' height='100%' fill={`url(#${id})`} />\n      </svg>\n    </div>\n  )\n}\n\nexport default Palette\n","import React, { FunctionComponent, useRef, useState, useEffect } from 'react'\nimport Color from 'color'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport ColorStopsHolder, {\n  AddPaletteItem,\n  PaletteItem,\n} from './ColorStopsHolder'\nimport Palette from '../Palette'\n\nexport interface GradientBuilderProps {\n  children?: JSX.Element\n  palette: PaletteItem[]\n  onAdd: (addPaletteItem: AddPaletteItem) => void\n  onUpdate: (palette: PaletteItem[]) => void\n}\n\nexport interface ChildrenProps {\n  open: boolean\n  anchorEl: HTMLDivElement | null\n  color: string\n  onChange(color: string): void\n}\n\nconst GradientBuilder: FunctionComponent<GradientBuilderProps> = (\n  props: GradientBuilderProps,\n) => {\n  const { children, palette, onUpdate, onAdd } = props\n  const rootEl: React.MutableRefObject<HTMLDivElement | null> = useRef(null)\n  const [oldPalette, setOldPalette] = useState([...palette])\n  const [activeId, setActiveId] = useState<number>(0)\n  const [activeColor, setActiveColor] = useState<string>('')\n  const [isAdd, setIsAdd] = useState(false)\n\n  useEffect(() => {\n    if (isAdd) {\n      const newIds = palette.map(({ id }) => id)\n      const oldIds = oldPalette.map(({ id }) => id)\n      const diff = Array.from(new Set([...newIds, ...oldIds])).filter(\n        (id) => !oldIds.includes(id),\n      )\n      if (diff.length > 0) {\n        setActiveId(diff[0])\n      }\n      setIsAdd(() => false)\n    }\n  }, [palette, isAdd, oldPalette])\n\n  useEffect(() => {\n    setOldPalette([...palette])\n  }, [palette])\n\n  useEffect(() => {\n    if (activeId) {\n      const paletteItem = palette.find((item) => item.id === activeId)\n      if (paletteItem) {\n        setActiveColor(paletteItem.color)\n      }\n    }\n  }, [activeId, palette])\n\n  const handleAdd = (offset: number) => {\n    const list = [...palette]\n    const current = { offset, color: 'rgba(0,0,0,1)' }\n    let left: PaletteItem | undefined\n    let right: PaletteItem | undefined\n    setActiveId(0)\n\n    list.forEach((item) => {\n      if (\n        item.offset < current.offset &&\n        (!left || left.offset < item.offset)\n      ) {\n        left = item\n      } else if (!right || right.offset > item.offset) {\n        right = item\n      }\n    })\n\n    if (left && right) {\n      const offsetSpace =\n        (current.offset - left.offset) / (right.offset - left.offset)\n      const leftColor = Color(left.color)\n      const rightColor = Color(right.color)\n\n      const r =\n        (rightColor.red() - leftColor.red()) * offsetSpace + leftColor.red()\n      const g =\n        (rightColor.green() - leftColor.green()) * offsetSpace +\n        leftColor.green()\n      const b =\n        (rightColor.blue() - leftColor.blue()) * offsetSpace + leftColor.blue()\n      const a =\n        (rightColor.alpha() - leftColor.alpha()) * offsetSpace +\n        leftColor.alpha()\n      current.color = `rgba(${Math.round(r)},${Math.round(g)},${Math.round(\n        b,\n      )},${Math.round(a)})`\n    } else if (left || right) {\n      current.color = ((left || right) as PaletteItem).color\n    }\n\n    onAdd(current)\n    setIsAdd(true)\n  }\n\n  const handleUpdate = (item: Partial<AddPaletteItem>, isDelete = false) => {\n    if (!activeId) return\n\n    const newPalette = [...palette]\n    const idx = newPalette.findIndex(\n      (paletteItem) => paletteItem.id === activeId,\n    )\n    if (isDelete) {\n      onUpdate([...newPalette.slice(0, idx), ...newPalette.slice(idx + 1)])\n      setActiveId(0)\n    } else {\n      const updateItem = { ...newPalette[idx], ...item }\n      onUpdate([\n        ...newPalette.slice(0, idx),\n        updateItem,\n        ...newPalette.slice(idx + 1),\n      ])\n    }\n  }\n\n  return (\n    <ClickAwayListener\n      mouseEvent='onMouseDown'\n      onClickAway={() => setActiveId(0)}\n    >\n      <div ref={rootEl}>\n        <Palette palette={palette} height='35px' />\n        <ColorStopsHolder\n          palette={palette}\n          activeId={activeId}\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          onSelect={(id) => setActiveId(id || 0)}\n        />\n        {children\n          ? React.cloneElement(children, {\n              open: !!activeId || isAdd,\n              anchorEl: rootEl.current,\n              color: activeColor,\n              onChange: (color: string) =>\n                handleUpdate({\n                  color,\n                }),\n            })\n          : null}\n      </div>\n    </ClickAwayListener>\n  )\n}\nexport default GradientBuilder\n","import React, {\n  useState,\n  useRef,\n  useEffect,\n  FunctionComponent,\n  useCallback,\n} from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nexport interface AnglePickerProps {\n  width?: number\n  angle: number\n  onChange(angle: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: (props: AnglePickerProps) =>\n        props.width ? `${props.width}px` : '36px',\n      height: (props) => (props.width ? `${props.width}px` : '36px'),\n      position: 'relative',\n      cursor: 'crosshair',\n      overflow: 'hidden',\n      borderRadius: '100%',\n      background: '#FFF',\n    },\n    point: {\n      width: '6px',\n      height: '6px',\n      borderRadius: '100%',\n      position: 'relative',\n      left: '50%',\n      top: '50%',\n      marginTop: '-2px',\n      background: '#000',\n      pointerEvents: 'none',\n      transformOrigin: `0 50%`,\n      transform: (props) =>\n        `rotate(${props.angle || 0}deg) translate(${\n          (props.width || 36) / 2 - 8\n        }px, 0)`,\n    },\n  }),\n)\n\nconst AnglePicker: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { onChange } = props\n  const rootRef = useRef<HTMLDivElement>(null)\n  const [isDragging, setIsDragging] = useState(false)\n  const classes = useStyles(props)\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent> | MouseEvent) => {\n      if (!rootRef.current) return\n\n      const { clientX, clientY } = e\n      const bounds = rootRef.current.getBoundingClientRect()\n      const radians = Math.atan2(\n        clientY - (bounds.y + bounds.height / 2),\n        clientX - (bounds.x + bounds.width / 2),\n      )\n      onChange(Math.round(radians * (180 / Math.PI)))\n    },\n    [onChange],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!rootRef.current) return\n    setIsDragging(true)\n    handleMouseMove(e)\n  }\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      className={classes.root}\n      ref={rootRef}\n      onMouseDown={handleMouseDown}\n    >\n      <div className={classes.point} />\n    </div>\n  )\n}\n\nexport default AnglePicker\n","import React, { FunctionComponent } from 'react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\nimport AnglePicker, { AnglePickerProps } from 'src/app/components/AnglePicker'\n\nconst FormAngle: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { angle, onChange } = props\n\n  return (\n    <GridInput\n      before='Angle:'\n      after={<AnglePicker width={24} angle={angle} onChange={onChange} />}\n    >\n      <Input\n        value={angle}\n        fullWidth\n        type='number'\n        onChange={(e) => onChange(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default FormAngle\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport GradientPicker from 'src/app/components/GradientPicker'\nimport WrappedSketchPicker from 'src/app/components/WrappedSketchPicker'\nimport { Gradient, GradientType } from 'src/store'\nimport GridInput from 'src/app/components/GridInput'\n\nimport FormAngle from '../FormAngle'\n\ninterface FormGradientProps {\n  gradient: Gradient\n}\n\nconst FormGradient: FunctionComponent<FormGradientProps> = (\n  props: FormGradientProps,\n) => {\n  const {\n    gradient: {\n      type,\n      angle,\n      palette,\n      addColor,\n      updatePalette,\n      setAngle,\n      setType,\n    },\n  } = props\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <FormAngle angle={angle} onChange={setAngle} />\n      </Box>\n\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Type:' component='div' childrenWidth={8}>\n          <RadioGroup\n            row\n            name='type'\n            value={type}\n            onChange={(e) => setType(Number(e.target.value))}\n            style={{ flexWrap: 'nowrap' }}\n          >\n            <FormControlLabel\n              value={GradientType.LINEAR}\n              control={<Radio size='small' color='default' />}\n              label='Linear'\n            />\n            <FormControlLabel\n              value={GradientType.RADIAL}\n              control={<Radio size='small' color='default' />}\n              label='Radial'\n            />\n          </RadioGroup>\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GradientPicker\n          palette={palette}\n          onAdd={(e) => addColor(e.offset, e.color)}\n          onUpdate={updatePalette}\n        >\n          <WrappedSketchPicker />\n        </GradientPicker>\n      </Box>\n    </>\n  )\n}\n\nexport default observer(FormGradient)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\nimport readFile from 'src/utils/readFile'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: theme.spacing(12),\n      height: theme.spacing(12),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n      border: `1px solid ${theme.palette.primary.main}`,\n      cursor: 'pointer',\n      ...theme.bgPixel,\n    },\n    image: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      pointerEvents: 'none',\n    },\n  }),\n)\n\ninterface FileSelectorProps {\n  src: string\n  onChange(image: ArrayBuffer): void\n}\n\nconst FileSelector: FunctionComponent<FileSelectorProps> = (\n  props: FileSelectorProps,\n) => {\n  const { src, onChange } = props\n  const classes = useStyles()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) return\n    if (e.target.files.length > 0) {\n      readFile(e.target.files[0]).then((buffer) => {\n        if (buffer instanceof ArrayBuffer) onChange(buffer)\n      })\n    }\n  }\n\n  return (\n    <Box component='label' className={classes.root}>\n      <input\n        hidden\n        type='file'\n        multiple\n        accept='image/*'\n        onChange={handleChange}\n      />\n      <img className={classes.image} src={src} alt='' />\n    </Box>\n  )\n}\n\nexport default FileSelector\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\nimport Box from '@material-ui/core/Box'\r\nimport Input from '@material-ui/core/Input'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\nimport { PatternTexture, Repetition } from 'src/store'\r\n\r\nimport FileSelector from './FileSelector'\r\n\r\ninterface FormImageProps {\r\n  patternTexture: PatternTexture\r\n  scale: number\r\n  src: string\r\n  // onChangeImage(buffer: ArrayBuffer): void\r\n  // onChangeScale(scale: number): void\r\n}\r\n\r\nconst FormImage: FunctionComponent<FormImageProps> = (\r\n  props: FormImageProps,\r\n) => {\r\n  const { patternTexture } = props\r\n  const { src, scale, repetition, setRepetition, setScale, setImage } =\r\n    patternTexture\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput\r\n          component='div'\r\n          before='Scale:'\r\n          after={<FileSelector src={src} onChange={setImage} />}\r\n        >\r\n          <Input\r\n            value={scale}\r\n            fullWidth\r\n            type='number'\r\n            inputProps={{ min: 0.01, step: 0.1 }}\r\n            onChange={(e) => setScale(Number(e.target.value))}\r\n          />\r\n        </GridInput>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='Repeat:'>\r\n          <Select\r\n            value={repetition}\r\n            onChange={(e) => setRepetition(e.target.value as Repetition)}\r\n            displayEmpty\r\n            fullWidth\r\n          >\r\n            <MenuItem value='repeat'>Repeat</MenuItem>\r\n            <MenuItem value='repeat-x'>Repeat-x</MenuItem>\r\n            <MenuItem value='repeat-y'>Repeat-y</MenuItem>\r\n            <MenuItem value='no-repeat'>No Repeat</MenuItem>\r\n          </Select>\r\n        </GridInput>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormImage\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport { FontStyleConfig, FillType } from 'src/store'\n\nimport FormColor from '../FormColor'\nimport FormGradient from '../FormGradient'\nimport FormImage from '../FormImage'\n\ninterface FormFillProps {\n  config: FontStyleConfig\n}\n\nconst FormFill: FunctionComponent<FormFillProps> = (props: FormFillProps) => {\n  const {\n    config: { type, color, gradient, patternTexture, setType, setColor },\n  } = props\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <RadioGroup\n          row\n          name='type'\n          value={type}\n          onChange={(e) => setType(Number(e.target.value))}\n        >\n          <FormControlLabel\n            value={FillType.SOLID}\n            control={<Radio size='small' color='default' />}\n            label='Solid'\n          />\n          <FormControlLabel\n            value={FillType.GRADIENT}\n            control={<Radio size='small' color='default' />}\n            label='Gradient'\n          />\n          <FormControlLabel\n            value={FillType.IMAGE}\n            control={<Radio size='small' color='default' />}\n            label='Image'\n          />\n        </RadioGroup>\n      </Box>\n      {type === 0 ? (\n        <Box paddingX={2} marginY={4}>\n          <FormColor color={color} onChange={setColor} />\n        </Box>\n      ) : null}\n      {type === 1 ? <FormGradient gradient={gradient} /> : null}\n      {type === 2 ? (\n        <FormImage\n          patternTexture={patternTexture}\n          src={patternTexture.src}\n          scale={patternTexture.scale}\n          // onChangeImage={patternTexture.setImage}\n          // onChangeScale={patternTexture.setScale}\n        />\n      ) : null}\n    </>\n  )\n}\n\nexport default observer(FormFill)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useFill } from 'src/store/hooks'\nimport FormFill from '../../../common/FormFill'\n\nconst Fill: FunctionComponent<unknown> = () => {\n  const fill = useFill()\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Fill</Typography>\n      </Box>\n      <FormFill config={fill} />\n    </>\n  )\n}\n\nexport default observer(Fill)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\n\nimport FormFill from 'src/app/layout/common/FormFill'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Stroke: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { stroke, useStroke, setUseStroke } = useStyle()\n  const { setWidth, lineJoin, setLineJoin, lineCap, setLineCap } = stroke\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Stroke\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useStroke}\n          onChange={(e) => setUseStroke(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useStroke ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Width:' after='px'>\n            <Input\n              value={stroke?.width || 0}\n              fullWidth\n              type='number'\n              inputProps={{ min: 0 }}\n              onChange={(e) => setWidth(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Cap:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineCap('butt')}\n                variant={lineCap === 'butt' ? 'contained' : 'outlined'}\n              >\n                Butt\n              </Button>\n              <Button\n                onClick={() => setLineCap('round')}\n                variant={lineCap === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineCap('square')}\n                variant={lineCap === 'square' ? 'contained' : 'outlined'}\n              >\n                Square\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Join:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineJoin('miter')}\n                variant={lineJoin === 'miter' ? 'contained' : 'outlined'}\n              >\n                Miter\n              </Button>\n              <Button\n                onClick={() => setLineJoin('round')}\n                variant={lineJoin === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineJoin('bevel')}\n                variant={lineJoin === 'bevel' ? 'contained' : 'outlined'}\n              >\n                Bevel\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n        <FormFill config={stroke} />\n      </div>\n    </>\n  )\n}\n\nexport default observer(Stroke)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\nimport FormColor from '../../../common/FormColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Shadow: FunctionComponent<unknown> = () => {\n  const { shadow, useShadow, setUseShadow } = useStyle()\n  const { setOffsetX, setOffsetY, setBlur, setColor } = shadow\n  const classes = useStyles()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Shadow\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useShadow}\n          onChange={(e) => setUseShadow(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useShadow ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset X:' after='px'>\n            <Input\n              value={shadow?.offsetX || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetX(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset Y:' after='px'>\n            <Input\n              value={shadow?.offsetY || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetY(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Blur:' after='px'>\n            <Input\n              value={shadow?.blur || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              inputProps={{ style: { textAlign: 'right' }, min: 0 }}\n              onChange={(e) => setBlur(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <FormColor color={shadow?.color || ''} onChange={setColor} />\n        </Box>\n      </div>\n    </>\n  )\n}\nexport default observer(Shadow)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useStyle } from 'src/store/hooks'\nimport FormColor from '../../../common/FormColor'\n\nconst BackgroundColor: FunctionComponent<unknown> = () => {\n  const { bgColor, setBgColor } = useStyle()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography>Background Color</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FormColor color={bgColor || ''} onChange={setBgColor} />\n      </Box>\n    </>\n  )\n}\n\nexport default observer(BackgroundColor)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Fill from './modules/Fill'\nimport Stroke from './modules/Stroke'\nimport Shadow from './modules/Shadow'\nimport BackgroundColor from './modules/BackgroundColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      width: '256px',\n    },\n  }),\n)\n\nconst RightBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box\n      bgcolor='background.sidebar'\n      display='flex'\n      flexDirection='column'\n      overflow='hidden'\n      className={classes.root}\n    >\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\n        <Typography variant='subtitle2'>Style Config</Typography>\n      </Box>\n      <Box flex={1} height={0} overflow='hidden auto'>\n        <Fill />\n        <Divider />\n        <Stroke />\n        <Divider />\n        <Shadow />\n        <Divider />\n        <BackgroundColor />\n      </Box>\n    </Box>\n  )\n}\n\nexport default RightBar\n","import { useEffect, useCallback, RefObject, DependencyList } from 'react'\n\ninterface DeltaInfo {\n  deltaScale: number\n  deltaX: number\n  deltaY: number\n}\n\ninterface WheelCallback {\n  (deltaInfo: DeltaInfo): void\n}\n\nfunction useWheel(\n  ref: RefObject<HTMLElement>,\n  onWheel: WheelCallback,\n  deps: DependencyList = [],\n): void {\n  const callback = useCallback(onWheel, [onWheel, deps])\n  const handleWheel = useCallback(\n    (e: WheelEvent) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const { ctrlKey, altKey, deltaX, deltaY } = e\n      if (ctrlKey) {\n        let d = -0.01\n        if (Math.abs(deltaY) > 50) d *= 0.1\n        callback({ deltaScale: deltaY * d, deltaX: 0, deltaY: 0 })\n      } else {\n        let x = -deltaX\n        let y = -deltaY\n        if (deltaX === 0 && altKey && Math.abs(deltaY) > 50) {\n          x = -deltaY\n          y = 0\n        }\n        callback({\n          deltaX: x,\n          deltaY: y,\n          deltaScale: 0,\n        })\n      }\n    },\n    [callback],\n  )\n\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    const dom = ref.current\n\n    dom.addEventListener('wheel', handleWheel, {\n      passive: false,\n    })\n\n    return () => dom.removeEventListener('wheel', handleWheel)\n  }, [ref, handleWheel])\n}\nexport default useWheel\n","import {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  DependencyList,\n} from 'react'\n\ninterface OffsetInfo {\n  offsetX: number\n  offsetY: number\n}\n\ninterface WheelCallback {\n  (offsetInfo: OffsetInfo): void\n}\n\nconst point = {\n  x: 0,\n  y: 0,\n}\n\nfunction useSpaceDrag<T extends HTMLElement>(\n  onMove: WheelCallback,\n  deps: DependencyList = [],\n): [0 | 1 | 2, (e: React.MouseEvent<T, MouseEvent>) => void] {\n  const [moveState, setMoveState] = useState({\n    ks: false,\n    ms: false,\n  })\n\n  const dragStatus = useMemo(() => {\n    if (moveState.ks && moveState.ms) return 2\n    if (moveState.ks) return 1\n    return 0\n  }, [moveState.ks, moveState.ms])\n\n  const moveCallback = useCallback(onMove, [onMove, ...deps])\n\n  const handleKeyEvent = useCallback(\n    (e: KeyboardEvent) => {\n      const state = e.keyCode === 32 && e.type === 'keydown'\n      if (moveState.ks === state) return\n      setMoveState((s) => {\n        return {\n          ...s,\n          ks: e.keyCode === 32 && e.type === 'keydown',\n        }\n      })\n    },\n    [moveState.ks],\n  )\n\n  const handleMouseDown = (e: React.MouseEvent<T, MouseEvent>) => {\n    if (!moveState.ks) return\n    const { clientX, clientY } = e\n    point.x = clientX\n    point.y = clientY\n    setMoveState((s) => {\n      return {\n        ...s,\n        ms: true,\n      }\n    })\n  }\n\n  const handleMove = useCallback(\n    (e: MouseEvent) => {\n      const { clientX, clientY } = e\n      const { x, y } = point\n\n      if (clientX - x === 0 && clientY - y === 0) return\n\n      moveCallback({\n        offsetX: clientX - x,\n        offsetY: clientY - y,\n      })\n\n      point.x = clientX\n      point.y = clientY\n    },\n    [moveCallback],\n  )\n\n  const handleEnd = useCallback(() => {\n    setMoveState((s) => {\n      return {\n        ...s,\n        ms: false,\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyEvent)\n    window.addEventListener('keyup', handleKeyEvent)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyEvent)\n      window.removeEventListener('keyup', handleKeyEvent)\n    }\n  }, [handleKeyEvent])\n\n  useEffect(() => {\n    if (moveState.ks && moveState.ms) {\n      window.addEventListener('mousemove', handleMove)\n      window.addEventListener('mouseup', handleEnd)\n    } else {\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleEnd)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleEnd)\n    }\n  }, [handleEnd, handleMove, moveState.ks, moveState.ms])\n\n  return [dragStatus, handleMouseDown]\n}\nexport default useSpaceDrag\n","import React, { useRef, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProject } from 'src/store/hooks'\nimport useWheel from 'src/app/hooks/useWheel'\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\n\ninterface StyleProps {\n  width: number\n  height: number\n  scale: number\n  offsetX: number\n  offsetY: number\n  dragState: number\n}\n\nconst useStyles = makeStyles(({ bgPixel }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      flex: 1,\n      cursor: (props: StyleProps) => {\n        if (props.dragState === 2) return 'grabbing'\n        if (props.dragState === 1) return 'grab'\n        return 'default'\n      },\n    },\n    canvas: {\n      ...bgPixel,\n      transformOrigin: '50% 50%',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      width: (props: StyleProps) => `${props.width}px`,\n      height: (props: StyleProps) => `${props.height}px`,\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\n      transform: (props: StyleProps) =>\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\n      imageRendering: 'pixelated',\n    },\n  }),\n)\n\nconst PackCanvas: FunctionComponent<unknown> = () => {\n  const {\n    isPacking,\n    ui,\n    layout: { padding, auto, fixedSize, width: packWidth, height: packHeight },\n    glyphList,\n    style: { bgColor },\n    packCanvas,\n    setCanvas,\n  } = useProject()\n  const { width, height, scale, offsetX, offsetY } = ui\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const domRef = useRef<HTMLDivElement>(null)\n  const [dragState, handleMouseDown] = useSpaceDrag(\n    (offsetInfo) => {\n      const { offsetX: ix, offsetY: iy } = offsetInfo\n      const { scale: os, offsetX: ox, offsetY: oy, setTransform } = ui\n      setTransform({\n        offsetX: ox + ix / os,\n        offsetY: oy + iy / os,\n      })\n    },\n    [ui],\n  )\n\n  const classes = useStyles({\n    width,\n    height,\n    scale,\n    offsetX,\n    offsetY,\n    dragState,\n  })\n\n  useWheel(\n    domRef,\n    (info) => {\n      const { offsetX: ox, offsetY: oy, scale: os, setTransform } = ui\n      const s = os + info.deltaScale\n      const x = ox + info.deltaX / s\n      const y = oy + info.deltaY / s\n      setTransform({\n        offsetX: x,\n        offsetY: y,\n        scale: s,\n      })\n    },\n    [ui],\n  )\n\n  useEffect(() => {\n    if (canvasRef.current && canvasRef.current !== packCanvas)\n      setCanvas(canvasRef.current)\n  }, [canvasRef, packCanvas, setCanvas])\n\n  useEffect(() => {\n    if (!glyphList || isPacking || !width || !height) return\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    canvas.width = width\n    canvas.height = height\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n\n    if (bgColor) {\n      ctx.fillStyle = bgColor\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n    }\n\n    glyphList.forEach((glyph) => {\n      if (\n        glyph.source &&\n        glyph.source.width !== 0 &&\n        glyph.source.height !== 0\n      ) {\n        ctx.drawImage(\n          glyph.source as HTMLCanvasElement,\n          glyph.x + (padding || 0),\n          glyph.y + (padding || 0),\n        )\n      }\n    })\n  }, [\n    bgColor,\n    glyphList,\n    isPacking,\n    height,\n    width,\n    padding,\n    auto,\n    fixedSize,\n    packWidth,\n    packHeight,\n  ])\n\n  return (\n    <div\n      aria-hidden\n      ref={domRef}\n      className={classes.root}\n      onMouseDown={handleMouseDown}\n    >\n      <canvas ref={canvasRef} className={classes.canvas} />\n    </div>\n  )\n}\n\nexport default observer(PackCanvas)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport { useProject } from 'src/store/hooks'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    root: {\n      width: '100%',\n      background: palette.background.paper,\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 12,\n      padding: 2,\n      animationDuration: '300ms',\n      pointerEvents: 'none',\n      color: palette.text.secondary,\n      position: 'relative',\n    },\n    loading: {\n      position: 'absolute',\n      left: 0,\n      top: '100%',\n      width: '100%',\n    },\n  }),\n)\n\nconst PackSizeBar: FunctionComponent<unknown> = () => {\n  const { isPacking, ui } = useProject()\n  const { width, height } = ui\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      Packed texture size: {width} x {height}\n      {isPacking ? <LinearProgress className={classes.loading} /> : null}\n    </div>\n  )\n}\n\nexport default observer(PackSizeBar)\n","import React, { FunctionComponent } from 'react'\n\nimport PackCanvas from './PackCanvas'\nimport PackSizeBar from './PackSizeBar'\n\nconst PackView: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <PackSizeBar />\n      <PackCanvas />\n    </>\n  )\n}\n\nexport default PackView\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nimport { PreviewObject } from './getPreviewCanvas'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    letter: {\n      position: 'absolute',\n      '&:hover,&$select': {\n        background: 'rgba(0,0,0,0.2)',\n        outline: '1px solid #000',\n      },\n    },\n    select: {\n      '& + $next': {\n        background: 'rgba(0,0,0,0.1)',\n        outline: '1px dashed #666',\n      },\n    },\n    next: {},\n  }),\n)\n\ninterface LetterListProps {\n  data: PreviewObject\n}\n\nconst LetterList: FunctionComponent<LetterListProps> = (\n  props: LetterListProps,\n) => {\n  const {\n    data: { xOffset, yOffset, list },\n  } = props\n  const classes = useStyles()\n  const ui = useProjectUi()\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    letter: string,\n    next: string,\n  ) => {\n    // setSelectLetter\n    e.stopPropagation()\n    ui.setSelectLetter(letter, next)\n  }\n  return (\n    <>\n      {list.map((item, idx) => {\n        const key = `${item.letter}${idx}`\n        return (\n          <div\n            aria-hidden\n            className={clsx(classes.letter, {\n              [classes.select]: item.letter === ui.selectLetter,\n              [classes.next]: item.letter === ui.selectNextLetter,\n            })}\n            style={{\n              width: item.width,\n              height: item.height,\n              left: `${item.x - xOffset}px`,\n              top: `${item.y - yOffset}px`,\n            }}\n            key={key}\n            onClick={(e) => handleSelect(e, item.letter, item.next)}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default observer(LetterList)\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\nimport useWheel from 'src/app/hooks/useWheel'\r\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\r\nimport { BMFontChar, toBmfInfo } from 'src/file/export'\r\n\r\nimport getPreviewCanvas, { PreviewObject } from './getPreviewCanvas'\r\nimport LetterList from './LetterList'\r\nimport { autorun } from 'mobx'\r\n\r\ninterface StyleProps {\r\n  width: number\r\n  height: number\r\n  scale: number\r\n  offsetX: number\r\n  offsetY: number\r\n  dragState: number\r\n}\r\n\r\nconst useStyles = makeStyles(({ bgPixel }) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'relative',\r\n      flex: 1,\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'hidden',\r\n      ...bgPixel,\r\n      cursor: (props: StyleProps) => {\r\n        if (props.dragState === 2) return 'grabbing'\r\n        if (props.dragState === 1) return 'grab'\r\n        return 'default'\r\n      },\r\n    },\r\n    wrap: {\r\n      transformOrigin: '50% 50%',\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      width: (props: StyleProps) => `${props.width}px`,\r\n      height: (props: StyleProps) => `${props.height}px`,\r\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\r\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\r\n      transform: (props: StyleProps) =>\r\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\r\n    },\r\n    canvas: {\r\n      width: '100%',\r\n      height: '100%',\r\n      imageRendering: 'pixelated',\r\n    },\r\n  }),\r\n)\r\n\r\nconst PreviewCanvas: FunctionComponent<unknown> = () => {\r\n  const project = useProject()\r\n  const [data, setData] = useState<PreviewObject | null>(null)\r\n  const {\r\n    ui,\r\n    style: {\r\n      font: {\r\n        size,\r\n        lineHeight,\r\n        middle,\r\n        hanging,\r\n        top,\r\n        alphabetic,\r\n        ideographic,\r\n        bottom,\r\n        minBaseLine,\r\n        maxBaseLine,\r\n      },\r\n    },\r\n    layout: { padding },\r\n    isPacking,\r\n  } = project\r\n  const { previewScale, previewOffsetX, previewOffsetY } = ui\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const domRef = useRef<HTMLDivElement>(null)\r\n  const [dragState, handleMouseDown] = useSpaceDrag(\r\n    (offsetInfo) => {\r\n      const { offsetX: ix, offsetY: iy } = offsetInfo\r\n      const {\r\n        previewScale: os,\r\n        previewOffsetX: ox,\r\n        previewOffsetY: oy,\r\n        setPreviewTransform,\r\n      } = ui\r\n      setPreviewTransform({\r\n        previewOffsetX: ox + ix / os,\r\n        previewOffsetY: oy + iy / os,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n  const classes = useStyles({\r\n    width: data ? data.width : 0,\r\n    height: data ? data.height : 0,\r\n    scale: previewScale,\r\n    offsetX: previewOffsetX,\r\n    offsetY: previewOffsetY,\r\n    dragState,\r\n  })\r\n\r\n  useWheel(\r\n    domRef,\r\n    (info) => {\r\n      const {\r\n        previewOffsetX: ox,\r\n        previewOffsetY: oy,\r\n        previewScale: os,\r\n        setPreviewTransform,\r\n      } = ui\r\n      const s = os + info.deltaScale\r\n      const x = ox + info.deltaX / s\r\n      const y = oy + info.deltaY / s\r\n      setPreviewTransform({\r\n        previewOffsetX: x,\r\n        previewOffsetY: y,\r\n        previewScale: s,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current || isPacking || !data) return\r\n\r\n    const canvas = canvasRef.current\r\n    const ctx = canvas.getContext('2d')\r\n    if (!ctx) return\r\n    const lh = size * lineHeight\r\n\r\n    canvas.width = data.width\r\n    canvas.height = data.height\r\n    data.list.forEach((item) => {\r\n      if (!item.source || item.source.width === 0 || item.source.height === 0)\r\n        return\r\n      ctx.drawImage(item.source, item.x - data.xOffset, item.y - data.yOffset)\r\n    })\r\n\r\n    for (let index = 0; index < data.lines; index += 1) {\r\n      ;[middle, hanging, top, alphabetic, ideographic, bottom].forEach(\r\n        (baseLine) => {\r\n          const basey = Math.round(baseLine - minBaseLine + index * lh)\r\n          ctx.beginPath()\r\n          ctx.moveTo(-data.xOffset, basey + 0.5 - data.yOffset)\r\n          ctx.lineTo(data.width, basey + 0.5 - data.yOffset)\r\n          if (baseLine === minBaseLine || baseLine === maxBaseLine) {\r\n            ctx.strokeStyle = 'rgba(0,0,0,1)'\r\n            ctx.setLineDash([])\r\n          } else {\r\n            ctx.strokeStyle = 'rgba(0,0,0,0.5)'\r\n            ctx.setLineDash([10, 3, 2, 3])\r\n          }\r\n          ctx.stroke()\r\n        },\r\n      )\r\n      ctx.beginPath()\r\n      ctx.moveTo(-data.xOffset + 0.5, index * lh - data.yOffset)\r\n      ctx.lineTo(\r\n        -data.xOffset + 0.5,\r\n        index * lh - data.yOffset + maxBaseLine - minBaseLine,\r\n      )\r\n      ctx.strokeStyle = 'rgba(0,0,0,1)'\r\n      ctx.setLineDash([])\r\n      ctx.stroke()\r\n    }\r\n  }, [\r\n    alphabetic,\r\n    bottom,\r\n    data,\r\n    hanging,\r\n    ideographic,\r\n    isPacking,\r\n    lineHeight,\r\n    maxBaseLine,\r\n    middle,\r\n    minBaseLine,\r\n    size,\r\n    top,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    autorun(() => {\r\n      if (!canvasRef.current || isPacking) return\r\n      const canvas = canvasRef.current\r\n      const ctx = canvas.getContext('2d')\r\n      if (!ctx) return\r\n\r\n      const { chars, kernings } = toBmfInfo(project)\r\n      const kerningMap: Map<number, Map<number, number>> = new Map()\r\n      kernings.list.forEach(({ first, second, amount }) => {\r\n        if (!kerningMap.has(first)) kerningMap.set(first, new Map())\r\n        const k = kerningMap.get(first)\r\n        k?.set(second, amount)\r\n      })\r\n      const charMap: Map<string, BMFontChar> = new Map()\r\n      chars.list.forEach((char) => {\r\n        charMap.set(char.letter, char)\r\n      })\r\n      const lh = size * lineHeight\r\n      const obj = getPreviewCanvas(\r\n        ui.previewText,\r\n        charMap,\r\n        kerningMap,\r\n        lh,\r\n        maxBaseLine - minBaseLine,\r\n        padding,\r\n      )\r\n      setData(() => obj)\r\n    })\r\n  }, [\r\n    isPacking,\r\n    lineHeight,\r\n    maxBaseLine,\r\n    minBaseLine,\r\n    project,\r\n    size,\r\n    ui.previewText,\r\n    padding,\r\n  ])\r\n\r\n  return (\r\n    <div\r\n      aria-hidden\r\n      ref={domRef}\r\n      className={classes.root}\r\n      onMouseDown={handleMouseDown}\r\n      onClick={() => ui.setSelectLetter('', '')}\r\n    >\r\n      <div className={classes.wrap}>\r\n        <canvas ref={canvasRef} className={classes.canvas} />\r\n        {data ? <LetterList data={data} /> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(PreviewCanvas)\r\n","import { BMFontChar } from 'src/file/export'\r\n\r\ninterface PreviewItem {\r\n  x: number\r\n  y: number\r\n  width: number\r\n  height: number\r\n  source: HTMLImageElement | HTMLCanvasElement | null\r\n  letter: string\r\n  next: string\r\n}\r\n\r\nexport interface PreviewObject {\r\n  xOffset: number\r\n  yOffset: number\r\n  width: number\r\n  height: number\r\n  list: PreviewItem[]\r\n  lines: number\r\n}\r\n\r\nexport default function getPreviewCanvas(\r\n  text: string,\r\n  chars: Map<string, BMFontChar>,\r\n  kernings: Map<number, Map<number, number>>,\r\n  lineHeight: number,\r\n  fontHeight: number,\r\n  padding: number = 0,\r\n): PreviewObject {\r\n  // const letters = Array.from(new Set(text.replace(/\\r\\n|\\r|\\n/g, '').split('')))\r\n  const list: PreviewItem[] = []\r\n  const lines = text.split(/\\r\\n|\\r|\\n/)\r\n  let minX = 0\r\n  let minY = 0\r\n  let maxX = 0\r\n  let maxY = 0\r\n  let y = 0\r\n  let x = 0\r\n\r\n  lines.forEach((str, index) => {\r\n    y = lineHeight * index\r\n    x = 0\r\n    const arr = Array.from(str)\r\n    arr.forEach((letter, idx) => {\r\n      const char = chars.get(letter)\r\n      if (!char) return\r\n      const next = arr[idx + 1]\r\n      const lk = kernings.get(letter.charCodeAt(0))\r\n      let kering = 0\r\n      if (next && lk && lk.has(next.charCodeAt(0))) {\r\n        kering = lk.get(next.charCodeAt(0)) || 0\r\n      }\r\n      const obj = {\r\n        x: x + char.xoffset + (char.width === 0 ? 0 : padding),\r\n        y: y + char.yoffset + (char.width === 0 ? 0 : padding),\r\n        width:\r\n          (char.width || char.xadvance) - (char.width === 0 ? 0 : padding * 2),\r\n        height:\r\n          (char.height || fontHeight) - (char.width === 0 ? 0 : padding * 2),\r\n        source: char.source,\r\n        letter: char.letter,\r\n        next,\r\n      }\r\n      x += char.xadvance + kering\r\n      minX = Math.min(obj.x, minX)\r\n      minY = Math.min(obj.y, minY)\r\n      maxX = Math.max(obj.x + obj.width, maxX)\r\n      maxY = Math.max(obj.y + obj.height, maxY)\r\n      list.push(obj)\r\n    })\r\n  })\r\n\r\n  return {\r\n    lines: lines.length,\r\n    list,\r\n    xOffset: minX,\r\n    yOffset: minY,\r\n    width: maxX - minX,\r\n    height: Math.max(maxY - minY, lines.length * lineHeight - minY) + 2,\r\n  }\r\n}\r\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  const { previewText, setPreviewText } = useProjectUi()\n  const [isIME, setIsIME] = useState(false)\n  const [inputText, setInputText] = useState(previewText)\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = event.target\n    if (isIME) {\n      setInputText(value)\n    } else {\n      setInputText(value)\n      if (value !== previewText) setPreviewText(value)\n    }\n  }\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    setInputText(inputText)\n    if (inputText !== previewText) setPreviewText(inputText)\n  }\n\n  return (\n    <Box>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Glyphs</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <TextField\n          margin='none'\n          value={isIME ? inputText : previewText}\n          fullWidth\n          multiline\n          rows={7}\n          variant='outlined'\n          inputProps={{ spellCheck: false }}\n          onChange={handleInput}\n          onCompositionStart={() => setIsIME(true)}\n          onCompositionEnd={handleCompositionEnd}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default observer(Preview)\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\r\n\r\nconst GlobalMetric: FunctionComponent<unknown> = () => {\r\n  const project = useProject()\r\n  const { glyphList, ui } = project\r\n  const glyph = glyphList.find((gl) => gl.letter === ui.selectLetter)\r\n  if (!glyph) return null\r\n  const { adjustMetric, letter } = glyph\r\n  const { xAdvance, xOffset, yOffset, setXAdvance, setXOffset, setYOffset } =\r\n    adjustMetric\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Typography>{`\"${letter}\" Adjustment`}</Typography>\r\n      </Box>\r\n      <FormAdjustMetric\r\n        xAdvance={xAdvance}\r\n        xOffset={xOffset}\r\n        yOffset={yOffset}\r\n        setXAdvance={setXAdvance}\r\n        setXOffset={setXOffset}\r\n        setYOffset={setYOffset}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GlobalMetric)\r\n","import React, { useState, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { deepObserve } from 'mobx-utils'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useProject } from 'src/store/hooks'\nimport { GlyphFont, GlyphImage } from 'src/store'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const {\n    glyphList,\n    ui,\n    style: {\n      font: { opentype, size },\n    },\n  } = useProject()\n  const [offset, setOffset] = useState(0)\n  const [glyph, setGlyph] = useState<GlyphFont | GlyphImage | undefined>()\n  const [kerning, setKerning] = useState(0)\n\n  useEffect(() => {\n    setGlyph(glyphList.find((gl) => gl.letter === ui.selectLetter))\n  }, [glyphList, ui.selectLetter])\n\n  useEffect(() => {\n    if (glyph && ui.selectNextLetter && opentype) {\n      const fontScale = (1 / opentype.unitsPerEm) * size\n      setOffset(\n        Math.round(\n          opentype.getKerningValue(\n            opentype.charToGlyphIndex(glyph.letter),\n            opentype.charToGlyphIndex(ui.selectNextLetter),\n          ) * fontScale,\n        ),\n      )\n    }\n  }, [glyph, opentype, size, ui.selectNextLetter])\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    if (glyph)\n      glyph.steKerning(ui.selectNextLetter, Number(e.target.value) - offset)\n  }\n\n  useEffect(() => {\n    let disposer\n\n    if (glyph) {\n      setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      disposer = deepObserve(glyph.kerning, () => {\n        setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      })\n    }\n\n    return disposer\n  }, [glyph, ui.selectNextLetter])\n\n  if (!glyph || !ui.selectNextLetter) return null\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>{`\"${glyph.letter}\" - \"${ui.selectNextLetter}\" Kerning`}</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Amount:' after='px'>\n          <Input\n            value={kerning + offset}\n            fullWidth\n            type='number'\n            onChange={handleChange}\n          />\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { FunctionComponent } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport PreviewCanvas from './PreviewCanvas'\nimport PreviewText from './PreviewText'\nimport PreviewMertic from './PreviewMertic'\nimport PreviewKerning from './PreviewKerning'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <PreviewCanvas />\n      <Grid container alignItems='flex-start'>\n        <Grid item xs={4}>\n          <PreviewText />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewMertic />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewKerning />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Preview\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nimport PackView from '../PackView'\nimport Preview from '../Preview'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    '@keyframes slideDown': {\n      from: { opacity: 0, transform: 'translate(0, -100%)' },\n      to: { opacity: 1, transform: 'translate(0, 0)' },\n    },\n    root: {\n      backgroundColor: palette.background.default,\n      position: 'relative',\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n    },\n    toast: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      zIndex: 10,\n      background: palette.error.main,\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 14,\n      padding: 2,\n      animationName: '$slideDown',\n      animationDuration: '300ms',\n      pointerEvents: 'none',\n    },\n    icon: {\n      marginRight: 5,\n    },\n  }),\n)\n\nconst MainView: FunctionComponent<unknown> = () => {\n  const { showPreview, packFailed } = useProjectUi()\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      {packFailed ? (\n        <div className={classes.toast}>\n          <ErrorOutlineIcon className={classes.icon} fontSize='inherit' />\n          Packaging failed, try to increase the size of the package please.\n        </div>\n      ) : null}\n      {showPreview ? <Preview /> : <PackView />}\n    </div>\n  )\n}\n\nexport default observer(MainView)\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\n// import { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n// import Input from '@material-ui/core/Input'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      minWidth: '80px',\n      maxWidth: 'none',\n      height: '34px',\n      lineHeight: '16px',\n      padding: '10px',\n      color: 'rgba(255,255,255,0.5)',\n      backgroundColor: 'rgb(45, 45, 45)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      cursor: 'pointer',\n      '&:hover': {\n        '& $icon': {\n          opacity: 1,\n        },\n      },\n      '&:last-child': {\n        borderRight: '0 none',\n      },\n    },\n    selected: {\n      background: palette.background.default,\n      color: '#fff',\n      '& $icon': {\n        opacity: 1,\n      },\n    },\n    name: {\n      whiteSpace: 'nowrap',\n      position: 'relative',\n      background: 'inherit',\n    },\n    editor: {\n      color: 'rgba(0,0,0,0)',\n    },\n    input: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      left: 0,\n      fontSize: 'inherit',\n      padding: 0,\n      border: '0 none',\n      appearance: 'none',\n      color: 'inherit',\n      background: 'inherit',\n    },\n    icon: {\n      width: '16px',\n      height: '16px',\n      marginLeft: '10px',\n      opacity: 0,\n    },\n  }),\n)\n\ninterface ProjectTabProps {\n  name: string\n  value: number\n  selected?: boolean\n  useRemove?: boolean\n  onRemove?: (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value: number,\n  ) => void\n  onChange?: (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    value: number,\n  ) => void\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  onRename?: (name: string, value: number) => void\n}\n\nconst ProjectTab: FunctionComponent<ProjectTabProps> = (\n  props: ProjectTabProps,\n) => {\n  const {\n    name,\n    useRemove,\n    selected,\n    value,\n    onChange,\n    onClick,\n    onRemove,\n    onRename,\n  } = props\n  const [editor, setEditor] = useState(false)\n  const [sname, setSName] = useState(name)\n  const editorRef = useRef<HTMLInputElement>(null)\n  const classes = useStyles()\n\n  const handleRemove = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    e.stopPropagation()\n    if (onRemove) onRemove(e, value)\n  }\n\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (onChange) onChange(e, value)\n    if (onClick) onClick(e)\n  }\n\n  const handleDoubleClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (editorRef.current) {\n      setEditor(true)\n    }\n  }\n\n  const handleEditorEnd = (e: { preventDefault?(): void }) => {\n    if (e.preventDefault) e.preventDefault()\n    setEditor(false)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === 13 && editorRef.current) {\n      editorRef.current.blur()\n    }\n  }\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSName(e.target.value)\n  }\n\n  useEffect(() => {\n    if (editor && editorRef.current) editorRef.current.focus()\n    if (!editor && onRename) onRename(sname, value)\n  }, [editor, onRename, sname, value])\n\n  useEffect(() => {\n    setSName(name)\n  }, [name])\n\n  return (\n    <div\n      aria-hidden\n      className={clsx(classes.root, {\n        [classes.selected]: selected,\n      })}\n      onClick={handleSelect}\n      onDoubleClick={handleDoubleClick}\n      title='Double click rename'\n    >\n      <span aria-hidden className={classes.name}>\n        {editor ? sname : name}\n        <input\n          className={classes.input}\n          hidden={!editor}\n          ref={editorRef}\n          value={editor ? sname : name}\n          type='text'\n          onKeyDown={handleKeyDown}\n          onBlur={handleEditorEnd}\n          //   onInput={handleInput}\n          onChange={handleInput}\n        />\n      </span>\n      {useRemove ? (\n        <CloseIcon\n          className={classes.icon}\n          onClick={handleRemove}\n          onDoubleClick={handleRemove}\n        />\n      ) : null}\n    </div>\n  )\n}\n\nexport default ProjectTab\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Tabs from '@material-ui/core/Tabs'\nimport { useWorkspace } from 'src/store/hooks'\nimport ProjectTab from './ProjectTab'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n  }),\n)\n\nconst ProjectTabs: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const workSpace = useWorkspace()\n  const {\n    addProject,\n    selectProject,\n    removeProject,\n    setProjectName,\n    namedList,\n    activeId,\n  } = workSpace\n\n  const handleChange = (e: unknown, value: number): void => {\n    selectProject(value)\n  }\n\n  const handleRemove = (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value?: number,\n  ): void => {\n    if (typeof value !== 'undefined') removeProject(value)\n  }\n\n  const handleDoubleClick = (): void => {\n    addProject()\n  }\n\n  return (\n    <Tabs\n      classes={classes}\n      value={activeId}\n      onChange={handleChange}\n      indicatorColor='primary'\n      textColor='primary'\n      variant='scrollable'\n      scrollButtons='off'\n      selectionFollowsFocus\n      TabIndicatorProps={{ hidden: true }}\n      onDoubleClick={handleDoubleClick}\n    >\n      {namedList.map((item) => {\n        return (\n          <ProjectTab\n            useRemove={namedList.length > 1}\n            name={item.name}\n            value={item.id}\n            key={item.id}\n            onRename={setProjectName}\n            onRemove={handleRemove}\n          />\n        )\n      })}\n    </Tabs>\n  )\n}\n\nexport default observer(ProjectTabs)\n","import React, { FunctionComponent, useState, useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Popper from '@material-ui/core/Popper'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport MenuList from '@material-ui/core/MenuList'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    slider: {\n      width: '200px',\n    },\n  }),\n)\n\nconst ControlerBar: FunctionComponent<unknown> = () => {\n  const {\n    scale,\n    setTransform,\n    previewScale,\n    setPreviewTransform,\n    showPreview,\n    setShowPreview,\n  } = useProjectUi()\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n  const anchorRef = useRef<HTMLButtonElement>(null)\n  const [list] = useState([0.25, 0.5, 0.75, 1, 1.25, 1.5, 5, 10])\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen)\n  }\n\n  const handleClose = (event: React.MouseEvent<EventTarget>) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const handleChange = (event: unknown, val: number | number[]) => {\n    if (showPreview) {\n      setPreviewTransform({ previewScale: val as number })\n    } else {\n      setTransform({ scale: val as number })\n    }\n  }\n\n  const handleSelect = (val: number) => {\n    // setTransform({ scale: val })\n    handleChange(null, val)\n    setOpen(false)\n  }\n\n  return (\n    <Box paddingX={2} display='flex' justifyContent='space-between'>\n      <Box component='label' display='flex' alignItems='center'>\n        Preview\n        <Switch\n          size='small'\n          color='primary'\n          checked={showPreview}\n          onChange={(e) => setShowPreview(e.target.checked)}\n        />\n      </Box>\n      <Slider\n        className={classes.slider}\n        value={showPreview ? previewScale : scale}\n        min={0.01}\n        max={10}\n        step={0.01}\n        onChange={handleChange}\n      />\n      <Button ref={anchorRef} onClick={handleToggle}>\n        {`${Math.round((showPreview ? previewScale : scale) * 1000) / 10}%`}\n      </Button>\n      <Popper open={open} anchorEl={anchorRef.current} placement='top-end'>\n        <Paper>\n          <ClickAwayListener onClickAway={handleClose}>\n            <MenuList>\n              {list.map((n) => (\n                <MenuItem key={n} onClick={() => handleSelect(n)}>\n                  {`${n * 100}%`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </ClickAwayListener>\n        </Paper>\n      </Popper>\n    </Box>\n  )\n}\n\nexport default observer(ControlerBar)\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport InputBase from '@material-ui/core/InputBase'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport { GlyphImage } from 'src/store'\nimport { useProject } from 'src/store/hooks'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: theme.spacing(24),\n      height: theme.spacing(24),\n      margin: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n    },\n    image: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      pointerEvents: 'none',\n    },\n    actions: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n    },\n    inputLabel: {\n      width: '100%',\n      height: '100%',\n      '& input': {\n        textAlign: 'center',\n      },\n    },\n  }),\n)\n\ninterface ImageGlyphProps {\n  glyph: GlyphImage\n  selected?: boolean\n}\n\nconst ImageGlyph: FunctionComponent<ImageGlyphProps> = (\n  props: ImageGlyphProps,\n) => {\n  const classes = useStyles()\n  const { removeImage } = useProject()\n  const [isIME, setIsIME] = useState(false)\n  const { glyph } = props\n  const [inputValue, setInputValue] = useState(glyph.letter)\n  const { changeSelect, selected, setGlyph } = glyph\n\n  const handleChangeGlyph = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value } = e.target\n    if (!isIME) {\n      setGlyph(value)\n    } else {\n      setInputValue(value.slice(0, 1))\n      setGlyph(value.slice(0, 1))\n    }\n  }\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    setInputValue((iv) => iv.slice(0, 1))\n    setGlyph(inputValue.slice(0, 1))\n  }\n\n  return (\n    <Paper variant='outlined' className={classes.root}>\n      <img className={classes.image} src={glyph.src} alt={glyph.fileName} />\n      <Grid container direction='column' className={classes.actions}>\n        <Grid item container justifyContent='space-between' alignItems='center'>\n          <Checkbox\n            checked={selected}\n            size='small'\n            color='default'\n            onChange={(e) => changeSelect(e.target.checked)}\n          />\n          <IconButton\n            color='primary'\n            size='small'\n            onClick={() => removeImage(glyph)}\n          >\n            <DeleteIcon fontSize='small' />\n          </IconButton>\n        </Grid>\n        <Grid\n          item\n          xs\n          component='label'\n          className={classes.inputLabel}\n          container\n          alignItems='flex-end'\n        >\n          <InputBase\n            fullWidth\n            value={isIME ? inputValue : glyph.letter}\n            onFocus={(e) => e.target.select()}\n            onInput={handleChangeGlyph}\n            onCompositionEnd={handleCompositionEnd}\n            onCompositionStart={() => setIsIME(true)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default observer(ImageGlyph)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\n\nimport { useProject } from 'src/store/hooks'\n\nimport ImageGlyph from './ImageGlyph'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n  }),\n)\n\nconst ImageGlyphList: FunctionComponent<unknown> = () => {\n  const { glyphImages } = useProject()\n  const classes = useStyles()\n  return (\n    <Box className={classes.root}>\n      {glyphImages.map((glyph) => {\n        return <ImageGlyph glyph={glyph} key={glyph.src} />\n      })}\n    </Box>\n  )\n}\n\nexport default observer(ImageGlyphList)\n","import React, { FunctionComponent, useState, useEffect } from 'react'\nimport { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'\nimport IconButton from '@material-ui/core/IconButton'\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary'\n\nimport { FileInfo } from 'src/store'\nimport { useProject } from 'src/store/hooks'\n\nimport readFile from 'src/utils/readFile'\n\nimport ImageGlyphList from './ImageGlyphList'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      position: 'relative',\n    },\n    fixed: {\n      position: 'fixed',\n      left: 0,\n      top: 0,\n      zIndex: 999999,\n      width: '100%',\n      height: '100%',\n      '& $panel': {\n        maxHeight: 'none',\n      },\n    },\n    panel: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      maxHeight: '305px',\n    },\n    continer: {\n      flex: 1,\n      overflow: 'hidden',\n      overflowY: 'auto',\n    },\n    listWrap: {\n      minHeight: '224px',\n      height: '100%',\n      width: '100%',\n      overflow: 'hidden',\n      overflowY: 'auto',\n    },\n  }),\n)\n\nconst LayerBox: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { addImages } = useProject()\n  const [isFullscreen, setFullscreen] = useState(false)\n  const [open, setOpen] = useState(false)\n  // const [isDroping, setIsDroping] = useState(false)\n\n  const handleLoadFile = (files: FileList) => {\n    const list = Array.from(files).filter((file) => /^image\\//.test(file.type))\n    if (!list.length) return\n    Promise.all(\n      list.map((file) =>\n        readFile(file).then((buffer) => {\n          if (!buffer || typeof buffer === 'string') return null\n\n          const matched = file.name.match(/(\\S)\\.[a-zA-Z0-9]+$/i)\n          return {\n            letter: matched ? matched[1] : '',\n            fileName: file.name,\n            fileType: file.type,\n            buffer,\n          }\n        }),\n      ),\n    ).then((fileList) => {\n      addImages(fileList.filter((f) => f) as FileInfo[])\n    })\n  }\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>): void => {\n    e.preventDefault()\n    handleLoadFile(e.dataTransfer.files)\n  }\n\n  const hanfleToggleFullScreen = (\n    e?: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    if (e) e.stopPropagation()\n    setFullscreen((f) => !f)\n  }\n\n  const handleToggleOpen = () => {\n    setOpen((o) => isFullscreen || !o)\n  }\n  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) return\n    const { files } = e.target\n    handleLoadFile(files)\n  }\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    const target = e.target as HTMLElement\n    if (e.keyCode === 27) {\n      if (!target || target.tagName !== 'INPUT') setFullscreen(false)\n      else if (target) target.blur()\n    }\n  }\n\n  useEffect(() => {\n    if (isFullscreen) window.addEventListener('keydown', handleKeyDown)\n    else window.removeEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [isFullscreen])\n\n  return (\n    <Box\n      onDragEnter={(e) => e.preventDefault()}\n      onDragOver={(e) => e.preventDefault()}\n      // onDragLeave={handleDrop}\n      onDrop={handleDrop}\n      className={clsx(classes.root, {\n        [classes.fixed]: isFullscreen,\n      })}\n    >\n      <Accordion\n        className={classes.panel}\n        expanded={isFullscreen || open}\n        onChange={handleToggleOpen}\n        TransitionProps={{\n          style:\n            isFullscreen || open\n              ? { flex: 1, overflow: 'hidden', overflowY: 'auto' }\n              : {},\n        }}\n      >\n        <AccordionSummary\n          expandIcon={isFullscreen ? undefined : <ExpandMoreIcon />}\n        >\n          <Grid container alignItems='center'>\n            <Grid item>\n              <Typography>Image Glyph List</Typography>\n            </Grid>\n            <Grid item xs container justifyContent='center'>\n              <Button\n                component='label'\n                color='primary'\n                size='small'\n                variant='contained'\n                startIcon={<PhotoLibraryIcon />}\n              >\n                Select Images\n                <input\n                  hidden\n                  type='file'\n                  multiple\n                  accept='image/*'\n                  onChange={handleFilesChange}\n                />\n              </Button>\n            </Grid>\n            <Grid item>\n              <IconButton component='div' onClick={hanfleToggleFullScreen}>\n                {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n              </IconButton>\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails className={classes.continer}>\n          <Box className={classes.listWrap}>\n            <ImageGlyphList />\n          </Box>\n        </AccordionDetails>\n      </Accordion>\n    </Box>\n  )\n}\nexport default observer(LayerBox)\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport MainView from './modules/MainView'\nimport ProjectTabs from './modules/ProjectTabs'\nimport ControlerBar from './modules/ControlerBar'\nimport ImageGlyphList from './modules/ImageGlyphList'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      width: 0,\n    },\n    tabsRoot: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n    tabRoot: {\n      minHeight: 'auto',\n      minWidth: 'auto',\n      maxWidth: 'none',\n      height: '34px',\n      color: 'rgba(255,255,255,0.5)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n    },\n    tabSelected: {\n      background: palette.background.default,\n    },\n    tabWrapper: {\n      color: '#FFF',\n    },\n  }),\n)\n\nconst WorkSpace: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.root}>\n      <ProjectTabs />\n      <MainView />\n      <ControlerBar />\n      <ImageGlyphList />\n    </Box>\n  )\n}\n\nexport default WorkSpace\n","import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    close: {\n      padding: theme.spacing(0.5),\n    },\n  }),\n)\n\nexport interface SnackbarMessage {\n  message: string\n  key: number\n}\n\nexport interface State {\n  open: boolean\n  snackPack: SnackbarMessage[]\n  messageInfo?: SnackbarMessage\n}\n\nexport default function ConsecutiveSnackbars() {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  const handleClose = (\n    event: React.SyntheticEvent | MouseEvent,\n    reason?: string,\n  ) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    setOpen(false)\n  }\n\n  const updateVersion = React.useCallback((event) => {\n    const { detail } = event\n    setOpen(!!detail)\n  }, [])\n\n  const handleReload = () => {\n    window.location.reload()\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('updateVerion', updateVersion, false)\n    return () =>\n      window.removeEventListener('updateVerion', updateVersion, false)\n  }, [updateVersion])\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      onClose={handleClose}\n      message='New version is available.'\n      action={\n        <React.Fragment>\n          <Button color='secondary' size='small' onClick={handleReload}>\n            Reload\n          </Button>\n          <IconButton\n            aria-label='close'\n            color='inherit'\n            className={classes.close}\n            onClick={handleClose}\n          >\n            <CloseIcon />\n          </IconButton>\n        </React.Fragment>\n      }\n    />\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useStores from 'src/store/hooks'\n\nimport LeftBar from '../LeftBar'\nimport TitleBar from '../TitleBar'\nimport RightBar from '../RightBar'\nimport WorkSpace from '../WorkSpace'\nimport UpdateToast from './UpdateToast'\n\nconst useStyles = makeStyles(({ zIndex }) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      display: 'flex',\n      flex: 1,\n      position: 'relative',\n      height: '0',\n      overflow: 'hidden',\n    },\n    loadingBackdrop: {\n      zIndex: zIndex.drawer + 1,\n      color: '#fff',\n    },\n  }),\n)\n\nconst Wrap: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { ui } = useStores()\n\n  return (\n    <Box className={classes.root}>\n      <TitleBar />\n      <UpdateToast />\n      <Box className={classes.content}>\n        <LeftBar />\n        <WorkSpace />\n        <RightBar />\n      </Box>\n      <Backdrop className={classes.loadingBackdrop} open={!!ui.globalLoader}>\n        <CircularProgress color='inherit' />\n      </Backdrop>\n    </Box>\n  )\n}\n\nexport default observer(Wrap)\n","import React from 'react'\nimport { Provider } from 'mobx-react'\nimport { SnackbarProvider } from 'notistack'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport createStore from 'src/store'\nimport theme from './theme'\n\nimport Wrap from './layout/Wrap'\n\nfunction App(): JSX.Element {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider {...createStore()}>\n        <SnackbarProvider\n          anchorOrigin={{\n            horizontal: 'center',\n            vertical: 'top',\n          }}\n        >\n          <Wrap />\n        </SnackbarProvider>\n      </Provider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as Sentry from '@sentry/react'\nimport { Integrations } from '@sentry/tracing'\n\nimport App from './app/App'\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nif (process.env.REACT_APP_SENTRY_DSN) {\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    release: process.env.REACT_APP_SENTRY_RELEASE || 'test',\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n    environment: process.env.NODE_ENV,\n  })\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate(registration) {\n    const worker = registration.waiting\n    if (!worker) return\n\n    const channel = new MessageChannel()\n\n    channel.port1.onmessage = () => {\n      window.dispatchEvent(new CustomEvent('updateVerion', { detail: worker }))\n    }\n\n    worker.postMessage({ type: 'SKIP_WAITING' }, [channel.port2])\n  },\n})\n"],"sourceRoot":""}