{"version":3,"sources":["../webpack/bootstrap","../../src/rectanglePacker.ts","workers/RectanglePacker.worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","console","TheState","ctx","self","addEventListener","msg","list","rectanglePackerMutation","data","postMessage"],"mappings":"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","file":"static/js/RectanglePacker.654b1e16b59dc2cc713a.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var SUCCESS = 1;\r\nvar FAIL = 0;\r\n/**\r\n * 放置状态枚举\r\n */\r\nvar TheState;\r\n(function (TheState) {\r\n    TheState[TheState[\"DO_PLACING\"] = 0] = \"DO_PLACING\";\r\n    TheState[TheState[\"DEC_WIDTH\"] = 1] = \"DEC_WIDTH\";\r\n    TheState[TheState[\"INC_HEIGHT\"] = 2] = \"INC_HEIGHT\";\r\n    TheState[TheState[\"STOP\"] = 3] = \"STOP\";\r\n})(TheState || (TheState = {}));\r\nfunction sortForAreaOrHeight(ar, br) {\r\n    var a = ar.width * ar.height;\r\n    var b = br.width * br.height;\r\n    if (a < b) {\r\n        return 1;\r\n    }\r\n    else if (a > b) {\r\n        return -1;\r\n    }\r\n    else if (ar.height > br.height) {\r\n        return -1;\r\n    }\r\n    else if (ar.height < br.height) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n/**\r\n * 创建 Placing\r\n * @param enclosingWidth 区域宽\r\n * @param enclosingHeight 区域高\r\n */\r\nfunction allocPlacing(enclosingWidth, enclosingHeight) {\r\n    var cell = {\r\n        height: enclosingHeight,\r\n        occupied: 0,\r\n        nextCell: null,\r\n    };\r\n    var cols = {\r\n        width: enclosingWidth,\r\n        nextCol: null,\r\n        cell: cell,\r\n    };\r\n    var placing = {\r\n        enclosingWidth: enclosingWidth,\r\n        enclosingHeight: enclosingHeight,\r\n        cols: cols,\r\n    };\r\n    return placing;\r\n}\r\n/**\r\n * 释放 Placing 对象\r\n * @param placing 即将释放的 Placing\r\n */\r\nfunction freePlacing(placing) {\r\n    if (placing === null) {\r\n        return;\r\n    }\r\n    // 循环释放列和单元格\r\n    var col = placing.cols;\r\n    while (col !== null) {\r\n        // 释放列中所有单元格\r\n        var cell = col.cell;\r\n        while (cell !== null) {\r\n            var tempR = cell;\r\n            cell = cell.nextCell;\r\n            tempR.nextCell = null;\r\n        }\r\n        // 保存下一个列，释放当前列\r\n        var tempC = col;\r\n        col = col.nextCol;\r\n        tempC.nextCol = null;\r\n        tempC.cell = null;\r\n    }\r\n    placing.cols = null;\r\n    return;\r\n}\r\n/**\r\n * 尝试调整列高度\r\n * @param col 列\r\n * @param height 高度\r\n * @param cellR 区域\r\n */\r\nfunction tryFitHeightInCol(col, height, cellR) {\r\n    /**\r\n     * 循环列中的单元格\r\n     * 查找高度大于 height 的连续未被占用的单元格序列。\r\n     * 结果存储在 cellR 中\r\n     */\r\n    if (col == null) {\r\n        console.error(\"Error. col pointer was null.\\n\");\r\n        return FAIL;\r\n    }\r\n    else if (height <= 0) {\r\n        console.error(\"Error. height must be positive.\\n\");\r\n        return FAIL;\r\n    }\r\n    var sumHeight = 0;\r\n    cellR.startIndex = 0;\r\n    // 循环列中的单元格\r\n    for (var cell = col.cell, i = 0; cell != null; cell = cell.nextCell, i++) {\r\n        /**\r\n         * 如果单元格被占用, 重置高度总和并且更新 startIndex\r\n         * 否则, 检查高度是否可满足\r\n         */\r\n        if (cell.occupied) {\r\n            sumHeight = 0;\r\n            cellR.startIndex = i + 1;\r\n        }\r\n        else {\r\n            if (sumHeight + cell.height > height) {\r\n                cellR.endIndex = i;\r\n                cellR.overshoot = height - sumHeight;\r\n                return SUCCESS;\r\n            }\r\n            else if (sumHeight + cell.height === height) {\r\n                // 无需拆分\r\n                cellR.endIndex = i;\r\n                cellR.overshoot = 0;\r\n                return SUCCESS;\r\n            }\r\n            sumHeight += cell.height;\r\n        }\r\n    }\r\n    // 如果循环到达这里，说明矩形不适合此列\r\n    return FAIL;\r\n}\r\n/**\r\n * 查找符合偏移的单元格\r\n * @param base 基础单元格\r\n * @param offset 偏移量\r\n */\r\nfunction stepOffset(base, offset) {\r\n    if (base == null) {\r\n        console.error(\"Error. Basepointer was null.\\n\");\r\n        return null;\r\n    }\r\n    var cell = base;\r\n    for (var i = 0; i < offset; i++) {\r\n        cell = cell.nextCell;\r\n        if (cell == null) {\r\n            console.error(\"Error. Offset to large.\\n\");\r\n            return null;\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n/**\r\n * 查找可容纳矩形的区域\r\n * @param placing 区域\r\n * @param rectangle 矩形\r\n * @param reg 位置\r\n */\r\nfunction findRegion(placing, rectangle, reg) {\r\n    // 遍历所有列\r\n    for (var col = placing.cols, i = 0; col != null; col = col.nextCol, i++) {\r\n        var colR = {\r\n            startIndex: 0,\r\n            endIndex: 0,\r\n            overshoot: 0,\r\n        };\r\n        var cellR = {\r\n            startIndex: 0,\r\n            endIndex: 0,\r\n            overshoot: 0,\r\n        };\r\n        var sumWidth = 0;\r\n        var temp = void 0;\r\n        // 检查此列是否适合矩形的高度\r\n        if (!tryFitHeightInCol(col, rectangle.height, cellR)) {\r\n            // 不合适\r\n            continue;\r\n        }\r\n        // 循环输入列，并检查i的单元格在整个矩形宽度上是否为空\r\n        colR.startIndex = i;\r\n        colR.endIndex = i;\r\n        for (temp = col; temp != null; temp = temp.nextCol) {\r\n            var cell = stepOffset(temp.cell, cellR.startIndex);\r\n            if (cell === null || cell === void 0 ? void 0 : cell.occupied) {\r\n                // 不合适，无法放置\r\n                break;\r\n            }\r\n            else {\r\n                if (sumWidth + temp.width > rectangle.width) {\r\n                    // 需要拆分单元格\r\n                    colR.overshoot = rectangle.width - sumWidth;\r\n                    reg.colR = colR;\r\n                    reg.cellR = cellR;\r\n                    return SUCCESS;\r\n                }\r\n                else if (sumWidth + temp.width === rectangle.width) {\r\n                    // 不需要拆分单元格\r\n                    colR.overshoot = 0;\r\n                    reg.colR = colR;\r\n                    reg.cellR = cellR;\r\n                    return SUCCESS;\r\n                }\r\n                sumWidth += temp.width;\r\n                colR.endIndex++;\r\n            }\r\n        }\r\n    }\r\n    return FAIL;\r\n}\r\nfunction split(placing, reg) {\r\n    var colSplitMe = null;\r\n    // 水平拆分单元格\r\n    for (var col = placing.cols, i = 0; col != null; col = col.nextCol, i++) {\r\n        // 仅 overshoot > 0 时才拆分列\r\n        if (reg.cellR.overshoot > 0) {\r\n            var cell = stepOffset(col.cell, reg.cellR.endIndex);\r\n            if (cell == null)\r\n                continue;\r\n            var newCell = {\r\n                // 设置新的单元格\r\n                height: cell.height - reg.cellR.overshoot,\r\n                occupied: cell.occupied,\r\n                nextCell: cell.nextCell,\r\n            };\r\n            // 更新旧的单元格\r\n            cell.height = reg.cellR.overshoot;\r\n            cell.nextCell = newCell;\r\n        }\r\n        // 保存要拆分的列\r\n        if (i === reg.colR.endIndex) {\r\n            colSplitMe = col;\r\n        }\r\n    }\r\n    // 仅 overshoot > 0 时才拆分列\r\n    if (reg.colR.overshoot > 0) {\r\n        // 纵向拆分列\r\n        if (colSplitMe == null) {\r\n            console.log(\"Error. Failed to find column to split.\\n\");\r\n            return FAIL;\r\n        }\r\n        var newCol = {\r\n            width: colSplitMe.width - reg.colR.overshoot,\r\n            nextCol: null,\r\n            cell: {\r\n                height: 0,\r\n                occupied: 0,\r\n                nextCell: null,\r\n            },\r\n        };\r\n        // 设置一个新列\r\n        var tail = newCol.cell;\r\n        for (var cell = colSplitMe.cell; cell != null; cell = cell.nextCell) {\r\n            tail.height = cell.height;\r\n            tail.occupied = cell.occupied;\r\n            if (cell.nextCell == null) {\r\n                tail.nextCell = null;\r\n                break;\r\n            }\r\n            tail.nextCell = {\r\n                height: 0,\r\n                occupied: 0,\r\n                nextCell: null,\r\n            };\r\n            tail = tail.nextCell;\r\n        }\r\n        newCol.nextCol = colSplitMe.nextCol;\r\n        // 更新旧的列\r\n        colSplitMe.width = reg.colR.overshoot;\r\n        colSplitMe.nextCol = newCol;\r\n    }\r\n    return SUCCESS;\r\n}\r\n/**\r\n * 更新单元格，使其放置在正确的位置\r\n * @param placing 放置区域\r\n * @param rectangle 矩形\r\n * @param reg Region\r\n */\r\nfunction update(placing, rectangle, reg) {\r\n    if (!rectangle.__id || rectangle.__id === 0) {\r\n        console.error(\"Error. Rectangle can't have id = \" + rectangle.__id + \".\\n\");\r\n        return FAIL;\r\n    }\r\n    var x = 0;\r\n    var y = 0;\r\n    var done = 0;\r\n    // 遍历每一列\r\n    for (var col = placing.cols, i = 0; col != null; col = col.nextCol, i++) {\r\n        if (i > reg.colR.endIndex) {\r\n            break;\r\n        }\r\n        if (i >= reg.colR.startIndex) {\r\n            // 遍历单元格\r\n            for (var cell = col.cell, k = 0; cell != null; cell = cell.nextCell, k++) {\r\n                if (k > reg.cellR.endIndex) {\r\n                    break;\r\n                }\r\n                if (k >= reg.cellR.startIndex) {\r\n                    cell.occupied = rectangle.__id;\r\n                    if (!done) {\r\n                        rectangle.x = x;\r\n                        rectangle.y = y;\r\n                        done = 1;\r\n                    }\r\n                }\r\n                y += cell.height;\r\n            }\r\n        }\r\n        x += col.width;\r\n    }\r\n    return SUCCESS;\r\n}\r\nfunction addRec(p, r) {\r\n    var reg = {\r\n        colR: {\r\n            startIndex: 0,\r\n            endIndex: 0,\r\n            overshoot: 0,\r\n        },\r\n        cellR: {\r\n            startIndex: 0,\r\n            endIndex: 0,\r\n            overshoot: 0,\r\n        },\r\n    };\r\n    if (findRegion(p, r, reg) === FAIL) {\r\n        return FAIL;\r\n    }\r\n    if (split(p, reg) === FAIL) {\r\n        console.error(\"Error in splitting.\\n\");\r\n        return FAIL;\r\n    }\r\n    if (update(p, r, reg) === FAIL) {\r\n        console.error(\"Error in updating.\\n\");\r\n        return FAIL;\r\n    }\r\n    return SUCCESS;\r\n}\r\n/**\r\n * 尝试执行内容排列\r\n * @param list 矩形列表\r\n * @param enclosingWidth 容器宽度\r\n * @param enclosingHeight 容器高度\r\n */\r\nfunction doPlacing(list, enclosingWidth, enclosingHeight) {\r\n    var p = allocPlacing(enclosingWidth, enclosingHeight);\r\n    var len = list.length;\r\n    for (var i = 0; i < len; i++) {\r\n        if (!addRec(p, list[i])) {\r\n            freePlacing(p);\r\n            p = null;\r\n            return FAIL;\r\n        }\r\n    }\r\n    freePlacing(p);\r\n    p = null;\r\n    return SUCCESS;\r\n}\r\n/**\r\n * 计算所有矩形的宽高和\r\n * @param list 矩形列表\r\n */\r\nfunction sumWH(list) {\r\n    var len = list.length;\r\n    var width = 0;\r\n    var height = 0;\r\n    for (var i = 0; i < len; i++) {\r\n        width += list[i].width;\r\n        height += list[i].height;\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n    };\r\n}\r\n/**\r\n * 查找所有矩形中，宽度最大值与高度最大值\r\n * @param list 矩形列表\r\n */\r\nfunction maxWH(list) {\r\n    var len = list.length;\r\n    var width = 0;\r\n    var height = 0;\r\n    for (var i = 0; i < len; i++) {\r\n        if (list[i].width >= width) {\r\n            width = list[i].width;\r\n        }\r\n        if (list[i].height >= height) {\r\n            height = list[i].height;\r\n        }\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n    };\r\n}\r\n/**\r\n * 计算所有矩形总面积\r\n * @param list 矩形列表\r\n */\r\nfunction totalArea(list) {\r\n    var len = list.length;\r\n    var area = 0;\r\n    for (var i = 0; i < len; i++) {\r\n        area += list[i].height * list[i].width;\r\n    }\r\n    return area;\r\n}\r\n/**\r\n * 计算容器需要的最大宽度\r\n * @param list 矩形列表\r\n */\r\nfunction placingWidth(list) {\r\n    var len = list.length;\r\n    var width = 0;\r\n    for (var i = 0; i < len; i++) {\r\n        if (list[i].x === -1) {\r\n            console.error(\"Error. Can't compute placing_width if not all rectangles have been placed.\\n\");\r\n            return -1;\r\n        }\r\n        if (list[i].width + list[i].x >= width) {\r\n            width = list[i].width + list[i].x;\r\n        }\r\n    }\r\n    return width;\r\n}\r\n/**\r\n * 放置最小区域算法\r\n * @param list 矩形列表\r\n * @param en 初始区域\r\n */\r\nfunction areapackAlgorithm(list, en) {\r\n    var _a = maxWH(list), maxWidth = _a.width, maxHeight = _a.height;\r\n    var sumWidth = sumWH(list).width;\r\n    var minWidth = -1;\r\n    var minHeight = -1;\r\n    var area = -1;\r\n    var status;\r\n    var state;\r\n    var totArea = totalArea(list);\r\n    /* 初始化高度为最大高度 */\r\n    en.height = maxHeight;\r\n    en.width = sumWidth;\r\n    area = en.height * en.width;\r\n    state = TheState.DO_PLACING;\r\n    /* 从封闭区域(w=sum, h=max)开始查找\r\n     * do placing\r\n     * - 如果成功，保存区域\r\n     * - 如果失败，尝试新的封闭区域\r\n     *\r\n     * 减小宽度，否则增加高度直到成功\r\n     *\r\n     * 如果 en width=max: 停止\r\n     *\r\n     * */\r\n    var loop = 1;\r\n    while (loop) {\r\n        switch (state) {\r\n            case TheState.DO_PLACING:\r\n                /**\r\n                 * 尝试将矩形放置在封闭矩形中。\r\n                 * 如果成功，保存该区域，然后尝试减小包装宽度。\r\n                 * 如果失败，增加高度并重试。\r\n                 */\r\n                status = doPlacing(list, en.width, en.height);\r\n                if (status === 1) {\r\n                    en.width = placingWidth(list);\r\n                    area = en.height * en.width;\r\n                    minWidth = en.width;\r\n                    minHeight = en.height;\r\n                    state = TheState.DEC_WIDTH;\r\n                }\r\n                else {\r\n                    state = TheState.INC_HEIGHT;\r\n                }\r\n                break;\r\n            case TheState.DEC_WIDTH:\r\n                /**\r\n                 * 减小包装宽度，然后尝试再次放置。\r\n                 * 如果新宽度小于矩形的最大宽度，则停止算法并提出最佳解决方案\r\n                 */\r\n                en.width--;\r\n                if (en.width < maxWidth) {\r\n                    state = TheState.STOP;\r\n                }\r\n                else {\r\n                    state = TheState.DO_PLACING;\r\n                }\r\n                break;\r\n            case TheState.INC_HEIGHT:\r\n                /**\r\n                 * 增加封闭高度，然后尝试再次放置。\r\n                 * 但是，如果新的高度使封闭区域小于所有矩形的总面积，则增加封闭高度并重新开始。\r\n                 * 如果封闭区域比目前最好的封闭区域大，则减小封闭宽度并重新开始。\r\n                 */\r\n                en.height++;\r\n                if (en.height * en.width < totArea) {\r\n                    state = TheState.INC_HEIGHT;\r\n                }\r\n                else if (en.height * en.width >= area) {\r\n                    state = TheState.DEC_WIDTH;\r\n                }\r\n                else {\r\n                    state = TheState.DO_PLACING;\r\n                }\r\n                break;\r\n            case TheState.STOP:\r\n                // 计算结束\r\n                loop = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (minWidth === -1 || minHeight === -1) {\r\n        return FAIL;\r\n    }\r\n    // 以最佳的宽度和高度进行最后放置\r\n    status = doPlacing(list, minWidth, minHeight);\r\n    return SUCCESS;\r\n}\r\n/**\r\n * 打包给到的所有矩形\r\n * @param rectangleSizes 带有宽高的矩形列表\r\n */\r\nexport function rectanglePacker(rectangleSizes) {\r\n    if (!Array.isArray(rectangleSizes) || rectangleSizes.length === 0)\r\n        return [];\r\n    var enclosing = { width: 0, height: 0 };\r\n    var rectList = rectangleSizes.map(function (_a, i) {\r\n        var width = _a.width, height = _a.height;\r\n        if (!width || !height)\r\n            throw new Error(\"Rectangle width and height must be an integer\");\r\n        return {\r\n            width: width,\r\n            height: height,\r\n            x: -1,\r\n            y: -1,\r\n            __id: i + 1,\r\n        };\r\n    });\r\n    var result = areapackAlgorithm(rectList, enclosing);\r\n    if (result === FAIL) {\r\n        console.error(\"Unexpected error in algorithm implementation\");\r\n        return [];\r\n    }\r\n    rectList.forEach(function (rectangle) { return delete rectangle.__id; });\r\n    return rectList;\r\n}\r\nexport function rectanglePackerMutation(rectangleSizes) {\r\n    var list = rectanglePacker(rectangleSizes);\r\n    rectangleSizes.forEach(function (rs, i) {\r\n        rs.x = list[i].x;\r\n        rs.y = list[i].y;\r\n    });\r\n    return rectangleSizes;\r\n}\r\n//# sourceMappingURL=rectanglePacker.js.map","import { rectanglePackerMutation } from 'rectangle-packer'\n\n// eslint-disable-next-line no-restricted-globals\nconst ctx: Worker = (self as unknown) as Worker\nctx.addEventListener(\n  'message',\n  function converter(msg) {\n    const { data } = msg\n    const list = rectanglePackerMutation(data)\n    ctx.postMessage(list)\n  },\n  false,\n)\n"],"sourceRoot":""}