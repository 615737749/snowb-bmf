{"version":3,"sources":["store/ui.ts","workers/AutoPacker.worker.ts","utils/is.ts","utils/getTextBaselines.ts","utils/use.ts","store/base/ui.ts","utils/fontStyleStringify.ts","utils/updateFontFace.ts","store/base/gradient.ts","store/base/font.ts","store/base/patternTexture.ts","store/base/fill.ts","utils/base64ToArrayBuffer.ts","utils/getTextSize.ts","store/base/stroke.ts","store/base/shadow.ts","store/base/style.ts","store/base/layout.ts","store/base/metric.ts","utils/trimImageData.ts","utils/getPointOnCircle.ts","utils/getCanvasStyle.ts","utils/getGlyphInfo.ts","store/base/glyphBase.ts","store/base/glyphFont.ts","store/base/glyphImage.ts","utils/getTrimImageInfo.ts","store/project.ts","store/workspace.ts","store/index.ts","app/theme/props.ts","app/theme/overrides.ts","app/theme/index.ts","store/hooks.ts","utils/readFile.ts","app/layout/LeftBar/modules/Font/FontFamily.tsx","app/components/GridInput/GridInput.tsx","app/layout/LeftBar/modules/Font/FontSize.tsx","app/layout/LeftBar/modules/Font/LineHeight.tsx","app/layout/LeftBar/modules/Font/Font.tsx","app/layout/LeftBar/modules/Glyphs/Glyphs.tsx","app/layout/LeftBar/modules/PackConfig/Padding.tsx","app/layout/LeftBar/modules/PackConfig/Spacing.tsx","app/layout/LeftBar/modules/PackConfig/AutoPack.tsx","app/layout/LeftBar/modules/PackConfig/FixedSize.tsx","app/layout/LeftBar/modules/PackConfig/PackWidth.tsx","app/layout/LeftBar/modules/PackConfig/PackHeight.tsx","app/layout/LeftBar/modules/PackConfig/PackConfig.tsx","app/layout/common/FormAdjustMetric/FormAdjustMetric.tsx","app/layout/LeftBar/modules/GlobalMetric/GlobalMetric.tsx","app/layout/LeftBar/LeftBar.tsx","utils/formatStr.ts","file/getXmlString.ts","file/getLuaString.ts","file/getTextString.ts","file/toOutputInfo.ts","proto/project.js","file/prefix.ts","proto/1.0.0/project.js","proto/1.0.1/project.js","utils/getVersionNumber.ts","file/updateOldProject.ts","file/decodeProject.ts","app/layout/TitleBar/ExportButton.tsx","app/layout/TitleBar/TitleBar.tsx","file/saveProject.ts","file/outputFile.ts","app/components/WrappedSketchPicker/WrappedSketchPicker.tsx","app/components/ColorInput/ColorInput.tsx","app/layout/common/FormColor/FormColor.tsx","app/components/GradientPicker/ColorStop.tsx","app/components/GradientPicker/ColorStopsHolder.tsx","app/components/Palette/Palette.tsx","app/components/GradientPicker/GradientBuilder.tsx","app/components/AnglePicker/AnglePicker.tsx","app/layout/common/FormAngle/FormAngle.tsx","app/layout/common/FormGradient/FormGradient.tsx","app/layout/common/FormImage/FileSelector.tsx","app/layout/common/FormImage/FormImage.tsx","app/layout/common/FormFill/FormFill.tsx","app/layout/RightBar/modules/Fill/Fill.tsx","app/layout/RightBar/modules/Stroke/Stroke.tsx","app/layout/RightBar/modules/Shadow/Shadow.tsx","app/layout/RightBar/modules/BackgroundColor/BackgroundColor.tsx","app/layout/RightBar/RightBar.tsx","app/hooks/useWheel.ts","app/hooks/useSpaceDrag.ts","app/layout/WorkSpace/modules/PackView/PackCanvas.tsx","app/layout/WorkSpace/modules/PackView/PackSizeBar.tsx","app/layout/WorkSpace/modules/PackView/PackView.tsx","app/layout/WorkSpace/modules/Preview/LetterList.tsx","app/layout/WorkSpace/modules/Preview/PreviewCanvas.tsx","app/layout/WorkSpace/modules/Preview/getPreviewCanvas.ts","app/layout/WorkSpace/modules/Preview/PreviewText.tsx","app/layout/WorkSpace/modules/Preview/PreviewMertic.tsx","app/layout/WorkSpace/modules/Preview/PreviewKerning.tsx","app/layout/WorkSpace/modules/Preview/Preview.tsx","app/layout/WorkSpace/modules/MainView/MainView.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTab.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTabs.tsx","app/layout/WorkSpace/modules/ControlerBar/ControlerBar.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyph.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyphList.tsx","app/layout/WorkSpace/modules/ImageGlyphList/LayerBox.tsx","app/layout/WorkSpace/WorkSpace.tsx","app/layout/Wrap/UpdateToast.tsx","app/layout/Wrap/Wrap.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Ui","action","bound","num","this","globalLoader","observable","Worker_fn","Worker","canvas","is","n","Number","isNaN","use","a","b","ui","previewText","offsetX","Math","min","max","width","offsetY","height","scale","trans","reOffset","text","showPreview","previewScale","previewOffsetX","previewOffsetY","letter","next","selectLetter","selectNextLetter","packFailed","defaultConfig","fontSize","fontFamily","fontStyleStringify","fontStyleConfig","config","arr","fontStyle","push","fontVariant","fontWeight","lineHeight","join","fontTargeCache","loadDiv","GradientType","Font","ref","font","size","byteLength","setFont","updateBaseines","middle","hanging","top","alphabetic","ideographic","bottom","opentype","family","bls","styleConig","document","createElement","ctx","getContext","Error","textBaseline","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","getTextBaselines","buffer","parse","lowMemory","e","Promise","resolve","names","fontName","postScriptName","Object","keys","url","URL","createObjectURL","Blob","name","cssNode","createTextNode","appendChild","textNode","head","style","position","left","opacity","pointerEvents","body","setTimeout","updateFontFace","then","runInAction","computed","Gradient","shallow","gradient","type","angle","palette","forEach","item","id","nextId","addColor","map","color","ids","length","offset","FillType","PatternTexture","pt","repetition","setImage","src","img","Image","onload","image","base64","binaryString","atob","len","bytes","Uint8Array","i","charCodeAt","base64ToArrayBuffer","Fill","fill","patternTexture","Stroke","stroke","lineCap","lineJoin","Shadow","shadow","blur","Style","useShadow","useStroke","bgColor","Layout","layout","padding","spacing","power","auto","fixedSize","Metric","metric","xAdvance","xOffset","yOffset","trimImageData","imageData","threshold","data","topTrim","bottomTrim","leftTrim","rightTrim","topStatus","bottomStatus","leftStatus","rightStatus","h","ceil","w","j","trimOffsetLeft","trimOffsetTop","getPointOnCircle","x","y","r","cos","PI","sin","matrix","createElementNS","createSVGMatrix","getCanvasStyle","cx","cy","startPoint","endPoint","createLinearGradient","createRadialGradient","addColorStop","pattern","createPattern","setTransform","translate","getGlyphInfo","trimInfo","textAlign","testA","actualBoundingBoxLeft","parseInt","fontWidth","fontHeight","trimOffsetRight","trimOffsetBottom","testB","actualBoundingBoxRight","getTextSize","lineWidth","addX","addY","styleX","styleY","abs","strokeStyle","strokeText","fillStyle","fillText","cvs","newCtx","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","drawImage","imgData","getImageData","styleTrimInfo","putImageData","GlyphBase","glyph","adjustMetric","kerning","set","Map","GlyphFont","galyphFont","textStyle","setGlyphInfo","glyphInfo","source","GlyphImage","glyphImage","fileName","fileType","initImage","naturalWidth","naturalHeight","getTrimImageInfo","isSelect","selected","Project","project","worker","packStart","packTimer","idleId","Date","now","globalAdjustMetric","glyphs","value","key","glyphImages","has","addGlyphs","addAutoRun","pack","obj","split","get","glyphList","isUnEmpty","terminate","isPacking","packList","rectangleList","sort","packer","GuillotineBinPack","list","filter","InsertSizes","setPack","usedRectangles","AutoPacker","addEventListener","messageEvent","postMessage","failedList","imgList","maxWidth","maxHeight","rectangle","find","gi","setPackFailed","setSize","cancel","tasks","runTasks","request","deadline","tr","timeRemaining","start","shift","window","clearTimeout","isName","deepObserve","throttlePack","change","packStyle","str","oldText","replace","currentList","Array","from","Set","oldList","diffList","concat","t","includes","delete","all","idx","indexOf","splice","packCanvas","Workspace","activeId","projectList","namedList","p","named","match","setName","configure","enforceActions","computedRequiresReaction","props","MuiButton","MuiButtonBase","disableRipple","MuiFilledInput","margin","MuiFormControl","MuiFormHelperText","MuiIconButton","MuiInputBase","MuiInputLabel","MuiListItem","dense","MuiOutlinedInput","MuiFab","MuiTable","MuiTextField","MuiToolbar","variant","overrides","MuiCssBaseline","html","WebkitFontSmoothing","MozOsxFontSmoothing","userSelect","minWidth","marginLeft","background","input","theme","createTheme","primary","main","secondary","paper","default","activityBar","titleBar","sidebar","common","black","white","hover","bgPixel","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","typography","transitions","create","shape","borderRadius","responsiveFontSizes","useStores","useContext","MobXProviderContext","useWorkspace","workspace","useLayout","currentProject","useProject","useStyle","useFont","useProjectUi","readFile","file","arrayBuffer","reader","FileReader","readAsArrayBuffer","target","result","useStyles","makeStyles","createStyles","clear","cursor","display","observer","classes","useState","loading","setLoading","hasFont","clearFont","Grid","container","alignItems","xs","Button","component","fullWidth","startIcon","CircularProgress","disabled","hidden","onChange","event","files","arrBuf","ArrayBuffer","catch","alert","message","accept","className","onClick","GridInput","before","children","after","childrenWidth","wrap","justifyContent","Typography","noWrap","align","Input","inputProps","setLineHeight","step","Box","paddingX","marginY","setText","isIME","setIsIME","inputText","setInputText","handleCompositionStart","useCallback","useEffect","TextField","multiline","rows","spellCheck","onCompositionStart","onCompositionEnd","setPadding","setSpacing","setAuto","Checkbox","checked","setFixedSize","setWidth","setHeight","PackConfig","FormAdjustMetric","setXAdvance","setXOffset","setYOffset","getHandle","handleSet","root","overflow","LeftBar","bgcolor","flexDirection","boxShadow","flex","Divider","formatStr","matchs","returns","storeToXml","bmfont","info","pages","chars","kernings","parser","DOMParser","xmlDOM","implementation","createDocument","infoDoc","parseFromString","documentElement","childNodes","commonDoc","pagesDoc","charsDoc","char","charDoc","count","kerningsDoc","kerningDoc","XMLSerializer","serializeToString","getLuaString","charset","charsCount","kerningsCounts","getTextString","toOutputInfo","fontScale","unitsPerEm","face","bold","italic","unicode","stretchH","smooth","aa","base","scaleW","scaleH","packed","xoffset","yoffset","xadvance","page","chnl","amount","round","getKerningValue","charToGlyphIndex","first","second","$Reader","$protobuf","$Writer","$util","$root","properties","prototype","encode","writer","hasOwnProperty","call","uint32","sint32","encodeDelimited","ldelim","decode","end","undefined","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","toObject","options","defaults","toJSON","constructor","toJSONOptions","GradientColor","int32","float","string","isString","String","json","isFinite","emptyArray","fork","isArray","error","TypeError","arrays","newBuffer","double","slice","emptyObject","end2","tag2","isObject","keys2","objects","bool","Boolean","Long","fromBits","int64","low","high","fromValue","unsigned","LongBits","toNumber","long","longs","toString","prefix","s","getVersionNumber","version","reverse","reduce","previousValue","currentValue","currentIndex","pow","fixOffset","verions","verion","updateOldProject","v","oldDecodeProto","Project1000000","Project1000001","decodeProject","perfixBuffer","perfixName","u8","filePrefix","versionBuffer","isSbf","fileVersion","ProjectProto","protoProject","imgKerning","k","gl","glyphKerning","toOriginBuffer","ExportButton","onSave","setShowPreview","open","setOpen","val","setVal","ext","handleClickOpen","handleClose","hotkeys","unbind","title","Dialog","onClose","DialogTitle","DialogContent","dividers","Select","displayEmpty","MenuItem","toUpperCase","DialogActions","autoFocus","zIndex","appBar","appName","marginRight","appNameSup","btn","textTransform","toast","setToast","worckSpace","labelRef","useRef","addProject","handleNewProject","preventDefault","handleSaveProject","projectBuffer","finish","saveAs","saveProject","toJS","handleSaveBitmapFont","zip","JSZip","getXmlString","toBlob","blob","generateAsync","content","outputFile","handleOpenProject","current","click","err","IconButton","href","Snackbar","anchorOrigin","vertical","horizontal","picker","borderColor","divider","border","WrappedSketchPicker","anchorEl","placement","pickerStyle","useTheme","shadows","alpha","usePickerStyle","Popper","styles","rgb","g","swatch","ColorInput","ClickAwayListener","mouseEvent","onClickAway","FormColor","borderWidth","isActive","borderStyle","dark","activeColor","grey","ColorStop","divProps","clsx","ColorStopsHolder","onAdd","onUpdate","onSelect","setStartPoint","isDragging","setIsDragging","rootRef","clientWidth","handleMouseMove","buttons","findIndex","paletteItem","newPalette","clientY","clientX","handleMouseUp","stopPropagation","removeEventListener","onMouseDown","getBoundingClientRect","handleMouseDown","svg","verticalAlign","Palette","random","substr","sortedPalette","x1","y1","x2","y2","stopColor","GradientBuilder","rootEl","oldPalette","setOldPalette","setActiveId","setActiveColor","isAdd","setIsAdd","newIds","oldIds","diff","handleUpdate","isDelete","updateItem","right","offsetSpace","leftColor","Color","rightColor","red","green","blue","React","cloneElement","point","marginTop","transformOrigin","transform","AnglePicker","bounds","radians","atan2","FormAngle","updatePalette","setAngle","setType","RadioGroup","row","flexWrap","FormControlLabel","LINEAR","control","Radio","label","RADIAL","FileSelector","multiple","alt","FormImage","setRepetition","setScale","setColor","SOLID","GRADIENT","IMAGE","setUseStroke","setLineJoin","setLineCap","Switch","ButtonGroup","setUseShadow","setOffsetX","setOffsetY","setBlur","setBgColor","RightBar","useWheel","onWheel","deps","callback","handleWheel","ctrlKey","altKey","deltaX","deltaY","d","deltaScale","dom","passive","useSpaceDrag","onMove","ks","ms","moveState","setMoveState","dragStatus","useMemo","moveCallback","handleKeyEvent","state","keyCode","handleMove","handleEnd","dragState","imageRendering","packWidth","packHeight","setCanvas","canvasRef","domRef","offsetInfo","ix","iy","os","ox","oy","fillRect","animationDuration","LinearProgress","PackView","outline","select","setSelectLetter","handleSelect","setData","minBaseLine","maxBaseLine","setPreviewTransform","lh","index","baseLine","basey","beginPath","moveTo","lineTo","setLineDash","lines","kerningMap","charMap","minX","minY","maxX","maxY","lk","kering","getPreviewCanvas","setPreviewText","setOffset","setGlyph","setKerning","disposer","steKerning","Preview","PreviewText","PreviewMertic","PreviewKerning","to","animationName","icon","minHeight","borderRight","whiteSpace","editor","appearance","ProjectTab","useRemove","onRemove","onRename","setEditor","sname","setSName","editorRef","handleRemove","focus","onDoubleClick","onKeyDown","onBlur","workSpace","selectProject","removeProject","setProjectName","Tabs","indicatorColor","textColor","scrollButtons","selectionFollowsFocus","TabIndicatorProps","slider","anchorRef","handleChange","Slider","prevOpen","Paper","contains","MenuList","actions","inputLabel","removeImage","inputValue","setInputValue","changeSelect","direction","InputBase","onFocus","onInput","iv","fixed","panel","continer","overflowY","listWrap","addImages","isFullscreen","setFullscreen","handleLoadFile","test","matched","fileList","f","handleKeyDown","tagName","onDragEnter","onDragOver","onDrop","dataTransfer","Accordion","expanded","o","TransitionProps","AccordionSummary","expandIcon","AccordionDetails","tabsRoot","tabRoot","tabSelected","tabWrapper","WorkSpace","close","ConsecutiveSnackbars","reason","updateVersion","detail","Fragment","location","reload","loadingBackdrop","drawer","Backdrop","App","ThemeProvider","CssBaseline","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onSuccess","ReactDOM","render","getElementById","process","origin","fetch","headers","response","contentType","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","waiting","channel","MessageChannel","port1","onmessage","dispatchEvent","CustomEvent","port2"],"mappings":"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","file":"static/js/main.f578e4a3.chunk.js","sourcesContent":["import { action, observable } from 'mobx'\n\nclass Ui {\n  @observable globalLoader = 0\n\n  @action.bound showGlobalLoader(num = 1): void {\n    this.globalLoader += num\n  }\n\n  @action.bound hideGlobalLoader(num = -1): void {\n    this.globalLoader += num\n  }\n}\n\nexport default Ui\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/AutoPacker.6093815e9c4b125e8885.worker.js\");\n}\n","type UseType<T, U> = T extends U ? true : false\n\ntype IsNumber<T> = UseType<T, number>\n\nconst num = <T>(n: T): IsNumber<T> => {\n  return (typeof n === 'number' && !Number.isNaN(n)) as IsNumber<T>\n}\n\nconst is = {\n  num,\n}\n\nexport default is\n","import fontStyleStringify from './fontStyleStringify'\n\ninterface StyleConig {\n  fontFamily: string\n  fontSize: number\n}\ninterface Baselines {\n  middle: number\n  hanging: number\n  top: number\n  alphabetic: number\n  ideographic: number\n  bottom: number\n}\n\nlet canvas: HTMLCanvasElement\n\nexport default function getTextBaselines(\n  text: string,\n  styleConig: StyleConig,\n): Baselines {\n  if (!canvas) canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  if (!ctx) throw new Error('Get context 2d failed.')\n  const font = fontStyleStringify(styleConig)\n\n  // clear before settings\n  canvas.width = 1\n  canvas.height = 1\n\n  ctx.font = font\n\n  ctx.textBaseline = 'middle'\n  const middle = ctx.measureText(text)\n  ctx.textBaseline = 'hanging'\n  const hanging = ctx.measureText(text)\n  ctx.textBaseline = 'top'\n  const top = ctx.measureText(text)\n  ctx.textBaseline = 'alphabetic'\n  const alphabetic = ctx.measureText(text)\n  ctx.textBaseline = 'ideographic'\n  const ideographic = ctx.measureText(text)\n  ctx.textBaseline = 'bottom'\n  const bottom = ctx.measureText(text)\n\n  return {\n    middle: 0,\n    hanging: hanging.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\n    top: top.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\n    alphabetic:\n      middle.actualBoundingBoxDescent - alphabetic.actualBoundingBoxDescent,\n    ideographic:\n      middle.actualBoundingBoxDescent - ideographic.actualBoundingBoxDescent,\n    bottom: middle.actualBoundingBoxDescent - bottom.actualBoundingBoxDescent,\n  }\n}\n","import is from './is'\n\nconst num = <T extends unknown>(a: T, b: number): number => {\n  if (is.num(a)) return a as number\n  return b\n}\n\nconst use = {\n  num,\n}\n\nexport default use\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Ui {\n  @observable scale = 1\n\n  @observable offsetX = 0\n\n  @observable offsetY = 0\n\n  @observable width = 0\n\n  @observable height = 0\n\n  @observable previewText = 'Hello World!\\nHello Snow Bamboo!' // /\\r\\n|\\r|\\n/\n\n  @observable selectLetter = ''\n\n  @observable selectNextLetter = ''\n\n  @observable showPreview = false\n\n  @observable previewScale = 1\n\n  @observable previewOffsetX = 0\n\n  @observable previewOffsetY = 0\n\n  @observable packFailed = false\n\n  constructor(ui: Partial<Ui> = {}) {\n    if (ui.previewText) {\n      this.previewText = ui.previewText\n    }\n  }\n\n  reOffset() {\n    this.offsetX = Math.min(\n      Math.max(this.width / -2, this.offsetX),\n      this.width / 2,\n    )\n    this.offsetY = Math.min(\n      Math.max(this.height / -2, this.offsetY),\n      this.height / 2,\n    )\n    this.scale = Math.max(this.scale, 0.01)\n  }\n\n  @action.bound setTransform(trans: Partial<Ui>): void {\n    this.scale = use.num(trans.scale, this.scale)\n    this.offsetX = use.num(trans.offsetX, this.offsetX)\n    this.offsetY = use.num(trans.offsetY, this.offsetY)\n    this.reOffset()\n  }\n\n  @action.bound setSize(width: number, height: number): void {\n    this.width = width\n    this.height = height\n    this.reOffset()\n  }\n\n  @action.bound setPreviewText(text: string): void {\n    this.previewText = text\n  }\n\n  @action.bound setShowPreview(showPreview: boolean): void {\n    this.showPreview = showPreview\n  }\n\n  @action.bound setPreviewTransform(trans: Partial<Ui>): void {\n    this.previewScale = Math.max(\n      use.num(trans.previewScale, this.previewScale),\n      0.01,\n    )\n    this.previewOffsetX = use.num(trans.previewOffsetX, this.previewOffsetX)\n    this.previewOffsetY = use.num(trans.previewOffsetY, this.previewOffsetY)\n  }\n\n  @action.bound setSelectLetter(letter: string = '', next: string = ''): void {\n    this.selectLetter = letter\n    this.selectNextLetter = next\n  }\n\n  @action.bound setPackFailed(packFailed: boolean): void {\n    this.packFailed = packFailed\n  }\n}\n\nexport default Ui\n","import is from './is'\n\nexport interface FontStyleConfig {\n  fontStyle?: 'normal' | 'italic' | 'oblique' | string\n  fontVariant?: 'normal' | 'none' | 'small-caps' | string\n  fontWeight?:\n    | 'normal'\n    | 'bold'\n    | 'lighter'\n    | 'bolder'\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 100\n    | 200\n    | 300\n    | 400\n    | 500\n    | 600\n    | 700\n    | 800\n    | 900\n    | 'inherit'\n    | 'initial'\n    | 'unset'\n  fontSize?: string | number\n  lineHeight?: string | number\n  fontFamily?: string\n}\n\nconst defaultConfig: FontStyleConfig = {\n  fontSize: '14px',\n  fontFamily: 'sans-serif',\n}\n\n// https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\nexport default function fontStyleStringify(\n  fontStyleConfig: FontStyleConfig,\n): string {\n  const config = { ...defaultConfig, ...fontStyleConfig }\n  const arr = []\n\n  if (config.fontStyle) arr.push(config.fontStyle)\n\n  if (config.fontVariant) arr.push(config.fontVariant)\n\n  if (config.fontWeight) arr.push(config.fontWeight)\n\n  if (is.num(config.fontSize)) {\n    config.fontSize = `${config.fontSize}px`\n  } else {\n    config.fontSize = defaultConfig.fontSize\n  }\n\n  if (config.lineHeight) {\n    arr.push(`${config.fontSize}/${config.lineHeight}`)\n  } else {\n    arr.push(config.fontSize)\n  }\n\n  arr.push(config.fontFamily)\n\n  return arr.join(' ')\n}\n","let fontTargeCache: HTMLStyleElement\nlet loadDiv: HTMLDivElement\n\nexport default function updateFontFace(\n  name: string,\n  url: string,\n): Promise<void> {\n  const cssNode = document.createTextNode(`\n    @font-face {\n        font-family: \"${name}\";\n        src: url(\"${url}\") format('truetype');\n    }`)\n\n  if (!fontTargeCache) {\n    const textNode = document.createTextNode(`A`)\n    fontTargeCache = document.createElement('style')\n    loadDiv = document.createElement('div')\n    document.head.appendChild(fontTargeCache)\n    fontTargeCache.appendChild(cssNode)\n    loadDiv.appendChild(textNode)\n    loadDiv.style.position = 'absolute'\n    loadDiv.style.left = '-1000px'\n    loadDiv.style.top = '-1000px'\n    loadDiv.style.opacity = '0'\n    loadDiv.style.fontSize = '12px'\n    loadDiv.style.pointerEvents = 'none'\n    document.body.appendChild(loadDiv)\n  } else {\n    fontTargeCache.appendChild(cssNode)\n  }\n  loadDiv.style.fontFamily = name\n  return new Promise((resolve) => setTimeout(resolve, 200))\n}\n","import { action, computed, observable } from 'mobx'\n\n// import GradientPaletteItem from './gradientPaletteItem'\n\nexport enum GradientType {\n  LINEAR,\n  RADIAL,\n}\n\nexport interface GradientColor {\n  offset: number\n  color: string\n}\n\nexport interface GradientPaletteItem extends GradientColor {\n  id: number\n}\n\nexport interface GradientColorOption extends GradientColor {\n  id?: number\n}\n\nclass Gradient {\n  @observable type: GradientType = 0\n\n  @observable angle: number\n\n  @observable.shallow palette: GradientPaletteItem[] = []\n\n  constructor(gradient: Partial<Gradient> = {}) {\n    this.type = gradient.type && GradientType[gradient.type] ? gradient.type : 0\n    this.angle = gradient.angle || 0\n    if (gradient.palette) {\n      gradient.palette.forEach((item) => {\n        this.palette.push({\n          ...item,\n          id: item.id || this.nextId,\n        })\n      })\n    } else {\n      this.addColor(0, '#FFF')\n      this.addColor(1)\n    }\n  }\n\n  @computed get ids(): number[] {\n    return this.palette.map((color) => color.id)\n  }\n\n  @computed get nextId(): number {\n    if (this.ids.length === 0) return 1\n    return Math.max(...this.ids) + 1\n  }\n\n  @action.bound setType(type: GradientType): void {\n    this.type = type\n  }\n\n  @action.bound setAngle(angle: number): void {\n    this.angle = angle\n  }\n\n  @action.bound addColor(offset = 0, color = '#000000'): void {\n    this.palette.push({ offset, color, id: this.nextId })\n  }\n\n  @action.bound updatePalette(palette: GradientPaletteItem[]): void {\n    this.palette = palette\n  }\n}\n\nexport default Gradient\n","import { action, observable, computed, runInAction } from 'mobx'\nimport getTextBaselines from 'src/utils/getTextBaselines'\nimport { parse, Font as OpenType } from 'opentype.js'\nimport updateFontFace from 'src/utils/updateFontFace'\n\nclass Font {\n  @observable.ref font: ArrayBuffer | null = null\n\n  @observable family: string = 'sans-serif'\n\n  @observable size: number\n\n  @observable lineHeight = 1.25\n\n  @observable middle = 0\n\n  @observable hanging = 0\n\n  @observable top = 0\n\n  @observable alphabetic = 0\n\n  @observable ideographic = 0\n\n  @observable bottom = 0\n\n  @observable.ref opentype: OpenType | null = null\n\n  @computed get minBaseLine() {\n    const min = Math.min(\n      this.middle,\n      this.hanging,\n      this.top,\n      this.alphabetic,\n      this.ideographic,\n      this.bottom,\n    )\n    if (Number.isNaN(Number(min))) return 0\n    return min\n  }\n\n  @computed get maxBaseLine() {\n    const max = Math.max(\n      this.middle,\n      this.hanging,\n      this.top,\n      this.alphabetic,\n      this.ideographic,\n      this.bottom,\n    )\n    if (Number.isNaN(Number(max))) return this.size\n    return max\n  }\n\n  @computed get hasFont() {\n    if (this.font && this.opentype && this.family !== 'sans-serif') return true\n    return false\n  }\n\n  constructor(font: Partial<Font> = {}) {\n    this.size = font.size || 72\n    this.lineHeight = font.lineHeight || 1.25\n\n    if (font.font && font.font.byteLength) {\n      this.setFont(font.font)\n    } else {\n      this.updateBaseines()\n    }\n  }\n\n  updateBaseines(): void {\n    const bls = getTextBaselines('a', {\n      fontFamily: this.family,\n      fontSize: this.size,\n    })\n\n    this.middle = bls.middle\n    this.hanging = bls.hanging\n    this.top = bls.top\n    this.alphabetic = bls.alphabetic\n    this.ideographic = bls.ideographic\n    this.bottom = bls.bottom\n  }\n\n  @action.bound setFont(buffer: ArrayBuffer): Promise<void> {\n    try {\n      this.opentype = parse(buffer, { lowMemory: true })\n    } catch (e) {\n      return Promise.resolve()\n    }\n    const { names } = this.opentype\n    const fontName = names.postScriptName[Object.keys(names.postScriptName)[0]]\n    const url = URL.createObjectURL(new Blob([buffer]))\n    return updateFontFace(fontName, url).then(() => {\n      runInAction(() => {\n        this.family = fontName\n        this.font = buffer\n        this.updateBaseines()\n      })\n    })\n  }\n\n  @action.bound setSize(size: number): void {\n    this.size = size\n    this.updateBaseines()\n  }\n\n  @action.bound setLineHeight(lineHeight: number): void {\n    this.lineHeight = lineHeight\n  }\n\n  @action.bound clearFont(): void {\n    this.font = null\n    this.opentype = null\n    this.family = 'sans-serif'\n    this.updateBaseines()\n  }\n}\n\nexport default Font\n","import { action, observable, runInAction } from 'mobx'\nimport use from 'src/utils/use'\nimport base64ToArrayBuffer from 'src/utils/base64ToArrayBuffer'\n\nexport type Repetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat'\n\nconst DEFAULT_IMAGE =\n  'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX////MzMw46qqDAAAADklEQVQI12Pgh8IPEAgAEeAD/Xk4HBcAAAAASUVORK5CYII='\n\nclass PatternTexture {\n  @observable.ref buffer: ArrayBuffer = base64ToArrayBuffer(DEFAULT_IMAGE)\n\n  @observable.ref image: HTMLImageElement | null = null\n\n  @observable src = ''\n\n  @observable repetition: Repetition = 'repeat'\n\n  @observable scale: number\n\n  constructor(pt: Partial<PatternTexture> = {}) {\n    this.scale = use.num(pt.scale, 1)\n    this.repetition = pt.repetition || 'repeat'\n    this.setImage(pt.buffer || this.buffer)\n  }\n\n  @action.bound setImage(buffer: ArrayBuffer): void {\n    const src = URL.createObjectURL(new Blob([buffer]))\n    const img = new Image()\n    img.onload = () => {\n      runInAction('setPatternTextureImage', () => {\n        this.buffer = buffer\n        this.image = img\n        this.src = src\n        img.onload = null\n      })\n    }\n    img.src = src\n  }\n\n  @action.bound setRepetition(repetition: Repetition): void {\n    this.repetition = repetition\n  }\n\n  @action.bound setScale(scale: number): void {\n    this.scale = scale\n  }\n}\n\nexport default PatternTexture\n","import { action, observable } from 'mobx'\n\nimport Gradient from './gradient'\nimport PatternTexture from './patternTexture'\n\nexport enum FillType {\n  SOLID,\n  GRADIENT,\n  IMAGE,\n}\n\nclass Fill {\n  @observable type: FillType\n\n  @observable color: string\n\n  @observable.shallow gradient: Gradient\n\n  @observable.shallow patternTexture: PatternTexture\n\n  constructor(fill: Partial<Fill> = {}) {\n    this.color = fill.color || '#000000'\n    this.type = fill.type && FillType[fill.type] ? fill.type : 0\n    this.gradient = new Gradient(fill.gradient)\n    this.patternTexture = new PatternTexture(fill.patternTexture)\n  }\n\n  @action.bound setType(type: FillType = 0): void {\n    this.type = type\n  }\n\n  @action.bound setColor(color = '#000000'): void {\n    this.color = color\n  }\n}\n\nexport default Fill\n","export default function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = atob(base64)\n  const len = binaryString.length\n  const bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i += 1) {\n    bytes[i] = binaryString.charCodeAt(i)\n  }\n  return bytes.buffer\n}\n","import fontStyleStringify, { FontStyleConfig } from './fontStyleStringify'\n\nexport interface TextSize {\n  text: string\n  font: string\n  width: number\n  height: number\n  fontWidth: number\n  fontHeight: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n  trimOffsetRight: number\n  trimOffsetBottom: number\n}\n\nlet canvas: HTMLCanvasElement\n\nexport default function getTextSize(\n  text: string,\n  config: FontStyleConfig,\n): TextSize {\n  if (!canvas) canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  if (!ctx) throw new Error('Get context 2d failed.')\n\n  // clear before settings\n  canvas.width = 1\n  canvas.height = 1\n\n  const font = fontStyleStringify(config)\n\n  ctx.font = font\n\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'bottom'\n\n  const testA = ctx.measureText(text)\n\n  if (typeof testA.actualBoundingBoxLeft === 'undefined') {\n    return {\n      text,\n      font,\n      width: testA.width,\n      height: parseInt(`${config.fontSize ?? '14'}`, 10),\n      fontWidth: testA.width,\n      fontHeight: parseInt(`${config.fontSize ?? '14'}`, 10),\n      trimOffsetTop: 0,\n      trimOffsetLeft: 0,\n      trimOffsetRight: 0,\n      trimOffsetBottom: 0,\n    }\n  }\n\n  ctx.textAlign = 'right'\n  ctx.textBaseline = 'top'\n\n  const testB = ctx.measureText(text)\n\n  const trimOffsetLeft = Math.ceil(testA.actualBoundingBoxLeft)\n  const trimOffsetRight = Math.ceil(testB.actualBoundingBoxRight)\n  const trimOffsetTop = Math.ceil(testB.actualBoundingBoxAscent)\n  const trimOffsetBottom = Math.ceil(testA.actualBoundingBoxDescent)\n  const width = trimOffsetLeft + Math.ceil(testA.actualBoundingBoxRight)\n  const height = trimOffsetBottom + Math.ceil(testA.actualBoundingBoxAscent)\n  const fontWidth = Math.ceil(testA.width)\n  const fontHeight =\n    testA.actualBoundingBoxAscent - testB.actualBoundingBoxAscent\n\n  return {\n    text,\n    font,\n    width,\n    height,\n    fontWidth,\n    fontHeight,\n    trimOffsetTop,\n    trimOffsetLeft,\n    trimOffsetRight,\n    trimOffsetBottom,\n  }\n}\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nimport Fill from './fill'\n\nclass Stroke extends Fill {\n  @observable width = 1\n\n  /**\n   * butt   默认。向线条的每个末端添加平直的边缘。\n   * round  向线条的每个末端添加圆形线帽。\n   * square 向线条的每个末端添加正方形线帽。\n   */\n  @observable lineCap: CanvasLineCap\n\n  /**\n   * bevel 创建斜角。\n   * round 创建圆角。\n   * miter 默认。创建尖角。\n   */\n  @observable lineJoin: CanvasLineJoin\n\n  constructor(stroke: Partial<Stroke> = {}) {\n    super(stroke)\n    this.width = use.num(stroke.width, 1)\n    this.lineCap = stroke.lineCap || 'round'\n    this.lineJoin = stroke.lineJoin || 'round'\n  }\n\n  @action.bound setWidth(width: number): void {\n    this.width = width\n  }\n\n  @action.bound setLineCap(lineCap: CanvasLineCap): void {\n    this.lineCap = lineCap\n  }\n\n  @action.bound setLineJoin(lineJoin: CanvasLineJoin): void {\n    this.lineJoin = lineJoin\n  }\n}\n\nexport default Stroke\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Shadow {\n  @observable color: string\n\n  @observable blur = 1\n\n  @observable offsetX = 1\n\n  @observable offsetY = 1\n\n  constructor(shadow: Partial<Shadow> = {}) {\n    this.color = shadow.color || '#000000'\n    this.blur = use.num(shadow.blur, 1)\n    this.offsetX = use.num(shadow.offsetX, 1)\n    this.offsetY = use.num(shadow.offsetY, 1)\n  }\n\n  @action.bound setColor(color: string): void {\n    this.color = color\n  }\n\n  @action.bound setBlur(blur: number): void {\n    this.blur = blur\n  }\n\n  @action.bound setOffsetX(offsetX: number): void {\n    this.offsetX = offsetX\n  }\n\n  @action.bound setOffsetY(offsetY: number): void {\n    this.offsetY = offsetY\n  }\n\n  @action.bound setOffset(offsetX: number, offsetY: number): void {\n    this.offsetX = offsetX\n    this.offsetY = offsetY\n  }\n}\n\nexport default Shadow\n","import { action, observable } from 'mobx'\n\nimport Font from './font'\nimport Fill from './fill'\nimport Stroke from './stroke'\nimport Shadow from './shadow'\n\nclass Style {\n  @observable readonly font: Font\n\n  @observable readonly fill: Fill\n\n  @observable useStroke: boolean\n\n  @observable readonly stroke: Stroke\n\n  @observable useShadow: boolean\n\n  @observable readonly shadow: Shadow\n\n  @observable bgColor = 'rgba(0,0,0,0)'\n\n  constructor(style: Partial<Style> = {}) {\n    this.font = new Font(style.font)\n    this.fill = new Fill(style.fill)\n    this.stroke = new Stroke(style.stroke)\n    this.shadow = new Shadow(style.shadow)\n    this.useShadow = !!style.useShadow\n    this.useStroke = !!style.useStroke\n  }\n\n  @action.bound setUseStroke(useStroke: boolean): void {\n    this.useStroke = useStroke\n  }\n\n  @action.bound setUseShadow(useShadow: boolean): void {\n    this.useShadow = useShadow\n  }\n\n  @action.bound setBgColor(bgColor: string): void {\n    this.bgColor = bgColor\n  }\n}\n\nexport default Style\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Layout {\n  @observable padding = 1\n\n  @observable spacing = 1\n\n  @observable power = false\n\n  @observable width = 1024\n\n  @observable height = 1024\n\n  @observable auto = true\n\n  @observable fixedSize = false\n\n  constructor(layout: Partial<Layout> = {}) {\n    this.padding = use.num(layout.padding, 1)\n\n    this.spacing = use.num(layout.spacing, 1)\n\n    this.power = !!layout.power\n\n    this.width = use.num(layout.width, 1024)\n\n    this.height = use.num(layout.height, 1024)\n\n    // Compatible with old files, default true.\n    this.auto = layout.auto === false ? false : true\n\n    this.fixedSize = !!layout.fixedSize\n  }\n\n  @action.bound setPadding(padding: number): void {\n    this.padding = padding\n  }\n\n  @action.bound setSpacing(spacing: number): void {\n    this.spacing = spacing\n  }\n\n  @action.bound setPower(power: boolean): void {\n    this.power = power\n  }\n\n  @action.bound setWidth(width: number): void {\n    this.width = width\n  }\n\n  @action.bound setHeight(height: number): void {\n    this.height = height\n  }\n\n  @action.bound setAuto(auto: boolean): void {\n    this.auto = auto\n  }\n\n  @action.bound setFixedSize(fixedSize: boolean): void {\n    this.fixedSize = fixedSize\n  }\n}\n\nexport default Layout\n","import { action, observable } from 'mobx'\n\nclass Metric {\n  @observable xAdvance = 0\n\n  @observable xOffset = 0\n\n  @observable yOffset = 0\n\n  constructor(metric: Partial<Metric> = {}) {\n    this.xAdvance = metric.xAdvance || 0\n    this.xOffset = metric.xOffset || 0\n    this.yOffset = metric.yOffset || 0\n  }\n\n  @action.bound setXAdvance(xAdvance: number): void {\n    this.xAdvance = xAdvance\n  }\n\n  @action.bound setXOffset(xOffset: number): void {\n    this.xOffset = xOffset\n  }\n\n  @action.bound setYOffset(yOffset: number): void {\n    this.yOffset = yOffset\n  }\n}\n\nexport default Metric\n","export interface TrimImageInfo {\n  width: number\n  height: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n}\n\nexport default function trimImageData(\n  imageData: ImageData,\n  threshold = 0,\n): TrimImageInfo {\n  const { data, width, height } = imageData\n  let topTrim = 0\n  let bottomTrim = 0\n  let leftTrim = 0\n  let rightTrim = 0\n  let topStatus = true\n  let bottomStatus = true\n  let leftStatus = true\n  let rightStatus = true\n\n  let h: number = Math.ceil(height / 2)\n  const w: number = Math.ceil(width / 2)\n\n  for (let i = 0; i < h; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      if (topStatus && data[(i * width + j) * 4 + 3] > threshold) {\n        topStatus = false\n      }\n      if (\n        bottomStatus &&\n        data[((height - i - 1) * width + j) * 4 + 3] > threshold\n      ) {\n        bottomStatus = false\n      }\n      if (!topStatus && !bottomStatus) {\n        break\n      }\n    }\n    if (!topStatus && !bottomStatus) {\n      break\n    }\n    if (topStatus) topTrim += 1\n    if (bottomStatus) bottomTrim += 1\n  }\n\n  if (topTrim + bottomTrim >= height) {\n    // Is empty image.\n    return {\n      trimOffsetLeft: width * -1,\n      trimOffsetTop: height * -1,\n      width: 0,\n      height: 0,\n    }\n  }\n\n  h = height - bottomTrim\n\n  for (let i = 0; i < w; i += 1) {\n    for (let j = topTrim; j < h; j += 1) {\n      if (leftStatus && data[(width * j + i) * 4 + 3] > threshold) {\n        leftStatus = false\n      }\n      if (\n        rightStatus &&\n        data[(width * j + width - i - 1) * 4 + 3] > threshold\n      ) {\n        rightStatus = false\n      }\n      if (!leftStatus && !rightStatus) {\n        break\n      }\n    }\n    if (!leftStatus && !rightStatus) {\n      break\n    }\n    if (leftStatus) leftTrim += 1\n    if (rightStatus) rightTrim += 1\n  }\n\n  return {\n    trimOffsetLeft: leftTrim * -1,\n    trimOffsetTop: topTrim * -1,\n    width: width - leftTrim - rightTrim,\n    height: height - topTrim - bottomTrim,\n  }\n}\n","export interface Point {\n  x: number\n  y: number\n}\n\nexport default function getPointOnCircle(\n  x: number,\n  y: number,\n  r: number,\n  angle: number,\n): Point {\n  return {\n    x: x + r * Math.cos((Math.PI / 180) * angle),\n    y: y + r * Math.sin((Math.PI / 180) * angle),\n  }\n}\n","import getPointOnCircle from './getPointOnCircle'\n\ninterface GarentColor {\n  offset: number\n  color: string\n}\n\ninterface Pradient {\n  type: 0 | 1\n  palette: GarentColor[]\n  angle: number\n}\n\ninterface PatternTexture {\n  image: HTMLImageElement | null\n  repetition: string\n  scale: number\n}\n\ninterface Config {\n  type: number\n  color: string\n  gradient: Pradient\n  patternTexture: PatternTexture\n}\n\nconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\nconst matrix = svg.createSVGMatrix()\n\nexport default function getCanvasStyle(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  config: Config,\n): string | CanvasGradient | CanvasPattern {\n  // 纯色\n  if (config.type === 0) {\n    return config.color\n  }\n\n  // 渐变\n  if (config.type === 1) {\n    const { type, palette, angle } = config.gradient\n    let gradient: CanvasGradient\n    const cx = x + width / 2\n    const cy = y + height / 2\n    const r = Math.max(width, height) / 2\n    if (type === 0) {\n      const startPoint = getPointOnCircle(cx, cy, r, angle + 180)\n      const endPoint = getPointOnCircle(cx, cy, r, angle)\n      gradient = ctx.createLinearGradient(\n        startPoint.x,\n        startPoint.y,\n        endPoint.x,\n        endPoint.y,\n      )\n    } else {\n      gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, r)\n    }\n\n    palette.forEach((color) => {\n      gradient.addColorStop(color.offset, color.color)\n    })\n\n    return gradient\n  }\n\n  const { image, repetition, scale } = config.patternTexture\n  if (!image) return 'rgba(0,0,0,0)'\n\n  const pattern = ctx.createPattern(image, repetition)\n  if (!pattern) return 'rgba(0,0,0,0)'\n  // TODO: Add trim translate and rotate.\n  pattern.setTransform(matrix.scale(scale).translate(x, y))\n  return pattern\n}\n","import trimImageData from './trimImageData'\nimport getTextSize, { TextSize } from './getTextSize'\nimport fontStyleStringify from './fontStyleStringify'\nimport getCanvasStyle from './getCanvasStyle'\n\nexport interface GlyphInfo extends TextSize {\n  canvas: HTMLCanvasElement | null\n}\n\ninterface ParentColor {\n  offset: number\n  color: string\n}\n\ninterface Gradient {\n  type: 0 | 1\n  palette: ParentColor[]\n  angle: number\n}\n\ninterface PatternTexture {\n  image: HTMLImageElement | null\n  repetition: string\n  scale: number\n}\n\ninterface Fill {\n  type: number\n  color: string\n  gradient: Gradient\n  patternTexture: PatternTexture\n}\n\ninterface Stroke extends Fill {\n  width: number\n  lineJoin: CanvasLineJoin\n  lineCap: CanvasLineCap\n}\n\ninterface Font {\n  family: string\n  size: number\n}\n\ninterface Shadow {\n  color: string\n  blur: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface Config {\n  font: Font\n  fill: Fill\n  stroke?: Stroke\n  shadow?: Shadow\n}\n\nexport default function getGlyphInfo(text: string, config: Config): GlyphInfo {\n  const { font, stroke, shadow, fill } = config\n\n  const styleConig = {\n    fontSize: font.size,\n    fontFamily: font.family,\n  }\n\n  const trimInfo = getTextSize(text, styleConig)\n  const { width, height, trimOffsetLeft, trimOffsetTop } = trimInfo\n  if (width === 0 || height === 0) return { canvas: null, ...trimInfo }\n\n  const lineWidth = stroke ? stroke.width * 2 : 0 // canvas is center stroke\n  let addX = lineWidth\n  let addY = lineWidth\n  let styleX = (width - font.size) / 2\n  let styleY = trimOffsetTop\n\n  if (shadow) {\n    const blur = Math.ceil(shadow.blur * 1.5)\n    addX += Math.abs(shadow.offsetX) + blur\n    addY += Math.abs(shadow.offsetY) + blur\n  }\n\n  styleX += addX\n  styleY += addY\n\n  let canvas = document.createElement('canvas')\n  let ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n  canvas.width = width + addX * 2\n  canvas.height = height + addY * 2\n\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'top'\n\n  ctx.font = fontStyleStringify({\n    fontSize: font.size,\n    fontFamily: font.family,\n  })\n\n  if (stroke && lineWidth) {\n    ctx.lineWidth = lineWidth\n    ctx.lineCap = stroke.lineCap\n    ctx.lineJoin = stroke.lineJoin\n    ctx.strokeStyle = getCanvasStyle(\n      ctx,\n      styleX,\n      styleY,\n      font.size,\n      font.size,\n      stroke,\n    )\n    ctx.strokeText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\n  }\n\n  ctx.fillStyle = getCanvasStyle(\n    ctx,\n    styleX,\n    styleY,\n    font.size,\n    font.size,\n    fill,\n  )\n  ctx.fillText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\n\n  if (shadow) {\n    const cvs = document.createElement('canvas')\n    cvs.width = width + addX * 2\n    cvs.height = height + addY * 2\n    const newCtx = cvs.getContext('2d') as CanvasRenderingContext2D\n\n    newCtx.shadowColor = shadow.color\n    newCtx.shadowBlur = shadow.blur\n    newCtx.shadowOffsetX = shadow.offsetX\n    newCtx.shadowOffsetY = shadow.offsetY\n\n    newCtx.drawImage(canvas, 0, 0)\n\n    canvas = cvs\n    ctx = newCtx\n  }\n\n  if (canvas.width === 0 || canvas.height === 0) {\n    return {\n      canvas,\n      ...trimInfo,\n    }\n  }\n\n  const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  const styleTrimInfo = trimImageData(imgData)\n  canvas.width = styleTrimInfo.width\n  canvas.height = styleTrimInfo.height\n  trimInfo.width = styleTrimInfo.width\n  trimInfo.height = styleTrimInfo.height\n  ctx.putImageData(\n    imgData,\n    styleTrimInfo.trimOffsetLeft,\n    styleTrimInfo.trimOffsetTop,\n  )\n  trimInfo.trimOffsetLeft += addX + styleTrimInfo.trimOffsetLeft\n  trimInfo.trimOffsetTop += addY + styleTrimInfo.trimOffsetTop\n  trimInfo.trimOffsetBottom +=\n    addY +\n    (height + addY * 2 + styleTrimInfo.trimOffsetTop - styleTrimInfo.height)\n\n  return {\n    canvas,\n    ...trimInfo,\n  }\n}\n","import { observable, action } from 'mobx'\n\nimport Metric from './metric'\n\nexport type GlyphType = 'text' | 'image'\n\nclass GlyphBase {\n  readonly type: GlyphType = 'text'\n\n  @observable letter = ''\n\n  @observable.ref source: HTMLImageElement | HTMLCanvasElement | null = null\n\n  @observable width = 0\n\n  @observable height = 0\n\n  @observable x = 0\n\n  @observable y = 0\n\n  @observable fontWidth = 0\n\n  @observable fontHeight = 0\n\n  @observable trimOffsetTop = 0\n\n  @observable trimOffsetLeft = 0\n\n  @observable trimOffsetRight = 0\n\n  @observable trimOffsetBottom = 0\n\n  @observable.ref adjustMetric: Metric\n\n  @observable kerning: Map<string, number> = new Map()\n\n  constructor(glyph: Partial<GlyphBase> = {}) {\n    this.letter = glyph.letter || ''\n    this.adjustMetric = new Metric(glyph.adjustMetric)\n\n    if (glyph.kerning) {\n      this.kerning = glyph.kerning\n    }\n  }\n\n  @action.bound steKerning(text: string, kerning: number) {\n    this.kerning.set(text, kerning)\n  }\n}\n\nexport default GlyphBase\n","import { action } from 'mobx'\nimport getGlyphInfo, { Config } from 'src/utils/getGlyphInfo'\nimport GlyphBase from './glyphBase'\n\nimport Style from './style'\n\nclass GlyphFont extends GlyphBase {\n  constructor(galyphFont: Partial<GlyphFont> = {}, textStyle: Style) {\n    super(galyphFont)\n    this.setGlyphInfo(textStyle)\n  }\n\n  @action setGlyphInfo(textStyle: Style): void {\n    const { font, fill, useStroke, stroke, useShadow, shadow } = textStyle\n    const config: Config = { font, fill }\n    if (useStroke) config.stroke = stroke\n    if (useShadow) config.shadow = shadow\n\n    const glyphInfo = getGlyphInfo(this.letter, config)\n    this.source = glyphInfo.canvas\n    this.width = glyphInfo.width\n    this.height = glyphInfo.height\n    this.fontWidth = glyphInfo.fontWidth\n    this.fontHeight = glyphInfo.fontHeight\n    this.trimOffsetTop = glyphInfo.trimOffsetTop\n    this.trimOffsetLeft = glyphInfo.trimOffsetLeft\n    this.trimOffsetRight = glyphInfo.trimOffsetRight\n    this.trimOffsetBottom = glyphInfo.trimOffsetBottom\n  }\n}\n\nexport default GlyphFont\n","import { action, observable, runInAction } from 'mobx'\nimport getTrimImageInfo from 'src/utils/getTrimImageInfo'\n\nimport GlyphBase, { GlyphType } from './glyphBase'\n\nexport interface FileInfo {\n  letter?: string\n  fileName: string\n  fileType: string\n  buffer: ArrayBuffer\n}\n\nclass GlyphImage extends GlyphBase {\n  readonly type: GlyphType = 'image'\n\n  @observable src = '' // 仅显示列表中\n\n  @observable.ref buffer: ArrayBuffer | null = null\n\n  @observable fileName = ''\n\n  @observable fileType = ''\n\n  @observable selected = true\n\n  constructor(glyphImage: Partial<GlyphImage>) {\n    super(glyphImage)\n    this.letter = glyphImage.letter || ''\n    this.fileName = glyphImage.fileName || ''\n    this.fileType = glyphImage.fileType || ''\n    this.buffer = glyphImage.buffer || null\n    if (glyphImage.buffer) {\n      this.src = URL.createObjectURL(new Blob([glyphImage.buffer]))\n      this.initImage()\n    }\n  }\n\n  @action.bound initImage(): Promise<void> {\n    return new Promise((resolve) => {\n      const image = new Image()\n      image.onload = () => {\n        runInAction('trimImage', () => {\n          const { naturalWidth, naturalHeight } = image\n          this.fontWidth = naturalWidth\n          this.fontHeight = naturalHeight\n\n          const trimInfo = getTrimImageInfo(image)\n          this.width = trimInfo.width\n          this.height = trimInfo.height\n          this.trimOffsetLeft = trimInfo.trimOffsetLeft\n          this.trimOffsetTop = trimInfo.trimOffsetTop\n          this.trimOffsetRight =\n            trimInfo.width - trimInfo.trimOffsetLeft - naturalWidth\n          this.trimOffsetBottom =\n            trimInfo.height - trimInfo.trimOffsetTop - naturalHeight\n\n          this.source = trimInfo.canvas\n          resolve()\n        })\n      }\n      image.src = this.src\n    })\n  }\n\n  @action.bound setGlyph(text: string): void {\n    this.letter = text[0] || ''\n  }\n\n  @action.bound changeSelect(isSelect: boolean): void {\n    this.selected = isSelect\n  }\n}\n\nexport default GlyphImage\n","import trimImageData, { TrimImageInfo } from './trimImageData'\n\ninterface TrimInfo extends TrimImageInfo {\n  canvas: HTMLCanvasElement\n}\n\nexport default function getTrimImageInfo(\n  image: HTMLImageElement,\n  threshold = 10,\n): TrimInfo {\n  const width = image.naturalWidth\n  const height = image.naturalHeight\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n  ctx.drawImage(image, 0, 0)\n  const imageData = ctx.getImageData(0, 0, width, height)\n  const trimInfo = trimImageData(imageData, threshold)\n  canvas.width = trimInfo.width\n  canvas.height = trimInfo.height\n  ctx.drawImage(image, trimInfo.trimOffsetLeft, trimInfo.trimOffsetTop)\n\n  return {\n    canvas,\n    ...trimInfo,\n  }\n}\n","import { observable, action, computed } from 'mobx'\nimport { deepObserve } from 'mobx-utils'\nimport { cancel, request } from 'requestidlecallback'\nimport { GuillotineBinPack } from 'rectangle-packer'\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import RectanglePacker from 'worker-loader?filename=static/js/RectanglePacker.[hash].worker.js!src/workers/RectanglePacker.worker'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AutoPacker from 'worker-loader?filename=static/js/AutoPacker.[hash].worker.js!src/workers/AutoPacker.worker'\n\nimport Ui from './base/ui'\nimport Style from './base/style'\nimport Layout from './base/layout'\nimport Metric from './base/metric'\nimport GlyphFont from './base/glyphFont'\nimport GlyphImage, { FileInfo } from './base/glyphImage'\nimport { GlyphType } from './base/glyphBase'\ninterface TextRectangle {\n  width: number\n  height: number\n  x: number\n  y: number\n  letter: string\n  type: GlyphType\n}\n\nclass Project {\n  @observable name = 'Unnamed'\n\n  id: number\n\n  worker: AutoPacker | null = null\n\n  packStart = 0\n\n  packTimer = 0\n\n  idleId = 0\n\n  @observable isPacking = false\n\n  @observable text =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!№;%:?*()_+-=.,/|\"\\'@#$^&{}[]'\n\n  @observable.shallow glyphs: Map<string, GlyphFont> = new Map()\n\n  @observable.shallow glyphImages: GlyphImage[] = []\n\n  @observable.ref style: Style\n\n  @observable.ref layout: Layout\n\n  @observable.ref globalAdjustMetric: Metric\n\n  @observable.ref packCanvas: HTMLCanvasElement | null = null\n\n  @observable.ref ui: Ui = new Ui()\n\n  constructor(project: Partial<Project> = {}) {\n    this.id = project.id || Date.now()\n    this.name = project.name || 'Unnamed'\n    this.text = project.text || this.text\n    this.ui = new Ui(project.ui)\n    this.style = new Style(project.style)\n    this.layout = new Layout(project.layout)\n    this.globalAdjustMetric = new Metric(project.globalAdjustMetric)\n\n    if (project.glyphs) {\n      project.glyphs.forEach((value, key) => {\n        this.glyphs.set(key, new GlyphFont(value, this.style))\n      })\n    }\n\n    project.glyphImages?.forEach((img) => {\n      this.glyphImages.push(new GlyphImage(img))\n    })\n\n    if (!this.glyphs.has(' '))\n      this.glyphs.set(' ', new GlyphFont({ letter: ' ' }, this.style))\n\n    this.addGlyphs(project.text || '')\n    this.addAutoRun()\n    this.pack()\n  }\n\n  @computed get glyphList(): (GlyphFont | GlyphImage)[] {\n    const obj: { [key: string]: GlyphImage } = {}\n\n    this.glyphImages.forEach((glyph) => {\n      if (glyph.letter && glyph.selected) {\n        obj[glyph.letter] = glyph\n      }\n    })\n\n    return ` ${this.text}`.split('').map((letter) => {\n      if (obj[letter]) return obj[letter]\n      return this.glyphs.get(letter) as GlyphFont\n    })\n  }\n\n  @computed get rectangleList(): TextRectangle[] {\n    const { padding, spacing } = this.layout\n    return this.glyphList.map((glyph) => {\n      const isUnEmpty = !!(glyph.width && glyph.height)\n      return {\n        letter: glyph.letter,\n        type: glyph.type,\n        width: isUnEmpty ? glyph.width + padding * 2 + spacing : 0,\n        height: isUnEmpty ? glyph.height + padding * 2 + spacing : 0,\n        x: 0,\n        y: 0,\n      }\n    })\n  }\n\n  @action.bound pack(): void {\n    if (this.idleId) return\n    if (this.worker) this.worker.terminate()\n    this.isPacking = true\n    const packList = this.rectangleList.sort((a, b) => b.height - a.height)\n    if (!this.layout.auto) {\n      const packer = new GuillotineBinPack<TextRectangle>(\n        this.layout.width + this.layout.spacing,\n        this.layout.height + this.layout.spacing,\n      )\n\n      const list = packList.filter(({ width, height }) => !!(width && height))\n\n      packer.InsertSizes(list, true, 1, 1)\n\n      this.setPack(packer.usedRectangles, list)\n\n      this.isPacking = false\n      return\n    }\n    this.worker = new AutoPacker()\n    this.worker.addEventListener(\n      'message',\n      action('PackerWorkerCallback', (messageEvent) => {\n        const { data } = messageEvent\n        this.setPack(data)\n\n        this.isPacking = false\n        this.worker?.terminate()\n        this.worker = null\n      }),\n      false,\n    )\n\n    this.worker.postMessage(\n      packList.filter(({ width, height }) => !!(width && height)),\n    )\n  }\n\n  @action.bound setPack(\n    list: TextRectangle[],\n    failedList?: TextRectangle[],\n  ): void {\n    const imgList = this.glyphImages\n    let maxWidth = 0\n    let maxHeight = 0\n    const { auto, fixedSize, width, height, spacing } = this.layout\n\n    list.forEach((rectangle) => {\n      const { letter, x, y, type, width, height } = rectangle\n      let glyph: GlyphFont | GlyphImage | undefined\n\n      if (type === 'image') {\n        glyph = imgList.find((gi) => {\n          if (gi && gi.letter === letter) return true\n          return false\n        })\n      }\n\n      if (!glyph) {\n        glyph = this.glyphs.get(letter)\n      }\n\n      if (glyph) {\n        glyph.x = x || 0\n        glyph.y = y || 0\n      }\n\n      maxWidth = Math.max(maxWidth, x + width)\n      maxHeight = Math.max(maxHeight, y + height)\n    })\n\n    if (failedList?.length) {\n      failedList.forEach((rectangle) => {\n        const { letter, type } = rectangle\n        let glyph: GlyphFont | GlyphImage | undefined\n\n        if (type === 'image') {\n          glyph = imgList.find((gi) => {\n            if (gi && gi.letter === letter) return true\n            return false\n          })\n        }\n\n        if (!glyph) {\n          glyph = this.glyphs.get(letter)\n        }\n\n        if (glyph) {\n          glyph.x = 0\n          glyph.y = 0\n        }\n      })\n      this.ui.setPackFailed(true)\n    } else {\n      this.ui.setPackFailed(false)\n    }\n\n    if (!auto && fixedSize) {\n      this.ui.setSize(width, height)\n      return\n    }\n\n    this.ui.setSize(maxWidth - spacing, maxHeight - spacing)\n  }\n\n  @action.bound packStyle(): void {\n    this.isPacking = true\n    if (this.worker) {\n      this.worker.terminate()\n      this.worker = null\n    }\n    cancel(this.idleId)\n\n    const tasks: GlyphFont[] = []\n\n    this.glyphs.forEach((glyph) => {\n      tasks.push(glyph)\n    })\n\n    const runTasks = () => {\n      this.idleId = request((deadline) => {\n        const tr = deadline.timeRemaining()\n        const start = Date.now()\n        while (tasks.length && tr - (Date.now() - start) > -100) {\n          // while (tasks.length) {\n          const glyph = tasks.shift()\n          if (glyph) glyph.setGlyphInfo(this.style)\n        }\n\n        if (tasks.length) {\n          runTasks()\n        } else {\n          this.idleId = 0\n          this.pack()\n        }\n      })\n    }\n\n    runTasks()\n  }\n\n  @action.bound throttlePack(): void {\n    if (this.idleId) return\n    window.clearTimeout(this.packTimer)\n    if (Date.now() - this.packStart > 500) {\n      Promise.resolve().then(this.pack)\n    } else {\n      this.packTimer = window.setTimeout(() => {\n        this.pack()\n      }, 500)\n    }\n    this.packStart = Date.now()\n  }\n\n  addAutoRun(): void {\n    const isName = (obj: { name?: unknown }, name: string): boolean =>\n      !!(obj.name && obj.name === name)\n\n    deepObserve(this.glyphs, () => {\n      this.throttlePack()\n    })\n\n    deepObserve(this.glyphImages, () => {\n      this.throttlePack()\n    })\n\n    deepObserve(this.layout, () => {\n      this.throttlePack()\n    })\n\n    deepObserve(this.style, (change) => {\n      if (isName(change, 'bgColor') || isName(change, 'lineHeight')) return\n      this.packStyle()\n    })\n  }\n\n  @action.bound setText(str: string): void {\n    const oldText = this.text\n    this.text = str.replace(/\\s/gm, '')\n    this.addGlyphs(oldText)\n  }\n\n  @action.bound addGlyphs(oldText = ''): void {\n    const currentList = Array.from(new Set(this.text.split('')))\n    const oldList = Array.from(new Set(oldText.split('')))\n    this.text = currentList.join('')\n    const diffList = oldText\n      ? Array.from(new Set(currentList.concat(oldList))).filter(\n          (t) => !(currentList.includes(t) && oldList.includes(t)),\n        )\n      : currentList\n\n    if (!diffList.length) return\n\n    diffList.forEach((letter) => {\n      if (currentList.includes(letter)) {\n        this.glyphs.set(letter, new GlyphFont({ letter }, this.style))\n      } else {\n        // in diff\n        this.glyphs.delete(letter)\n      }\n    })\n  }\n\n  @action.bound addImages<T extends FileInfo>(list: T[]): void {\n    Promise.all(\n      list.map((img) => {\n        const glyphImage = new GlyphImage(img)\n        this.glyphImages.push(glyphImage)\n        return glyphImage.initImage()\n      }),\n    ).then(this.pack)\n  }\n\n  @action.bound removeImage(image: GlyphImage): void {\n    const idx = this.glyphImages.indexOf(image)\n    if (idx > -1) this.glyphImages.splice(idx, 1)\n  }\n\n  @action.bound setCanvas(canvas: HTMLCanvasElement): void {\n    this.packCanvas = canvas\n  }\n\n  @action.bound setName(name: string): void {\n    this.name = name || this.name\n  }\n}\n\nexport default Project\n","import { action, observable, runInAction, computed } from 'mobx'\n\nimport Project from './project'\n\nclass Workspace {\n  @observable activeId = 0\n\n  @observable.shallow projectList: Map<number, Project> = new Map()\n\n  constructor() {\n    runInAction(() => {\n      this.activeId = Date.now()\n      const project = new Project({ id: this.activeId })\n      this.projectList.set(project.id, project)\n    })\n  }\n\n  @computed get currentProject(): Project {\n    return this.projectList.get(this.activeId) as Project\n  }\n\n  @computed get namedList(): { id: number; name: string }[] {\n    const list: { id: number; name: string }[] = []\n    this.projectList.forEach((value) => {\n      list.push({\n        id: value.id,\n        name: value.name,\n      })\n    })\n    return list\n  }\n\n  @action.bound selectProject(id: number): void {\n    if (this.projectList.has(id)) this.activeId = id\n  }\n\n  @action.bound removeProject(id: number): void {\n    const list = this.namedList.filter((item) => item.id !== id)\n    if (list.length === 0) return\n    this.activeId = list[0].id\n    this.projectList.delete(id)\n  }\n\n  @action.bound addProject(p: Partial<Project> = {}): void {\n    if (p.id && this.projectList.has(p.id)) {\n      this.activeId = p.id\n      return\n    }\n    if (!p.name) {\n      p.name = 'Unnamed'\n      const namedList: number[] = []\n      this.projectList.forEach((item) => {\n        const named = item.name.match(/^Unnamed-?(\\d+)?$/)\n        if (named) {\n          namedList.push(Number(named[1]) || 0)\n        }\n      })\n      if (namedList.length > 0) {\n        p.name += `-${Math.max(...namedList) + 1}`\n      }\n    }\n\n    const project = new Project(p)\n    this.projectList.set(project.id, project)\n    this.activeId = project.id\n  }\n\n  @action.bound setProjectName(name: string, value: number): void {\n    const project = this.projectList.get(value)\n    if (project) {\n      project.setName(name)\n    }\n  }\n}\n\nexport default Workspace\n","import { configure } from 'mobx'\n\nimport Ui from './ui'\nimport Workspace from './workspace'\n\nconfigure({\n  enforceActions: 'always',\n  computedRequiresReaction: true,\n})\n\nexport interface Store {\n  ui: Ui\n  workspace: Workspace\n}\n\nexport default function createStore(): Store {\n  return { ui: new Ui(), workspace: new Workspace() }\n}\n\nexport type TStore = ReturnType<typeof createStore>\n\nexport { default as Ui } from './ui'\nexport { default as Project } from './project'\nexport { default as Workspace } from './workspace'\n\nexport * from './base'\n","import { ComponentsProps } from '@material-ui/core/styles/props'\n\nconst props: ComponentsProps = {\n  MuiButton: {\n    size: 'small',\n  },\n  MuiButtonBase: {\n    disableRipple: true,\n  },\n  MuiFilledInput: {\n    margin: 'dense',\n  },\n  MuiFormControl: {\n    margin: 'dense',\n  },\n  MuiFormHelperText: {\n    margin: 'dense',\n  },\n  MuiIconButton: {\n    size: 'small',\n  },\n  MuiInputBase: {\n    margin: 'dense',\n  },\n  MuiInputLabel: {\n    margin: 'dense',\n  },\n  MuiListItem: {\n    dense: true,\n  },\n  MuiOutlinedInput: {\n    margin: 'dense',\n  },\n  MuiFab: {\n    size: 'small',\n  },\n  MuiTable: {\n    size: 'small',\n  },\n  MuiTextField: {\n    margin: 'dense',\n  },\n  MuiToolbar: {\n    variant: 'dense',\n  },\n}\n\nexport default props\n","import { Overrides } from '@material-ui/core/styles/overrides'\n\nconst overrides: Overrides = {\n  MuiCssBaseline: {\n    '@global': {\n      'html,body,#root': {\n        width: '100%',\n        height: '100%',\n      },\n      html: {\n        fontSize: '14px',\n      },\n      body: {\n        margin: 0,\n        // fontFamily: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n        WebkitFontSmoothing: 'antialiased',\n        MozOsxFontSmoothing: 'grayscale',\n        userSelect: 'none',\n      },\n      '#root': {\n        minWidth: 900,\n      },\n      'input::-webkit-inner-spin-button': {\n        marginLeft: '10px',\n      },\n      'input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-inner-spin-button': {\n        opacity: 0.3,\n      },\n      '::-webkit-scrollbar': {\n        width: '4px',\n        height: '4px',\n      },\n      '::-webkit-scrollbar-thumb': {\n        background: 'rgba(255, 255, 255, 0.2)',\n      },\n      '::-webkit-scrollbar-track': {\n        background: 'rgba(0, 0, 0, 0.1)',\n      },\n    },\n  },\n  MuiInputBase: {\n    input: {\n      '&[type=number]': {\n        textAlign: 'right',\n      },\n    },\n  },\n}\n\nexport default overrides\n","import { createTheme, responsiveFontSizes } from '@material-ui/core/styles'\n\nimport props from './props'\nimport overrides from './overrides'\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: '#444' },\n    secondary: { main: '#424242' },\n    background: {\n      paper: 'rgb(37, 37, 37)',\n      default: 'rgb(30, 30, 30)',\n      activityBar: 'rgb(51, 51, 51)',\n      titleBar: 'rgb(50, 50, 50)',\n      sidebar: 'rgb(37, 37, 37)',\n    },\n    common: {\n      black: 'rgb(30,30,30)',\n      white: 'rgb(204,204,204)',\n    },\n    action: {\n      hover: 'rgba(255, 255, 255, 0.1)',\n    },\n  },\n  bgPixel: {\n    backgroundColor: '#fff',\n    backgroundImage: `\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0),\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0)`,\n    backgroundSize: '8px 8px',\n    backgroundPosition: '0 0, 4px 4px',\n    backgroundRepeat: 'repeat',\n  },\n  spacing: 4,\n  typography: { fontSize: 13 },\n  transitions: {\n    create: () => 'none',\n  },\n  shape: { borderRadius: 0 },\n  props,\n  overrides,\n})\n\nexport default responsiveFontSizes(theme)\n","import { useContext } from 'react'\nimport { MobXProviderContext } from 'mobx-react'\nimport {\n  TStore,\n  Workspace,\n  Layout,\n  Project,\n  Style,\n  Font,\n  ProjectUi,\n  FontStyleConfig,\n} from '.'\n\nexport default function useStores(): TStore {\n  return useContext(MobXProviderContext) as TStore\n}\n\nexport function useWorkspace(): Workspace {\n  const store = useStores()\n  return store.workspace\n}\n\nexport function useLayout(): Layout {\n  const store = useStores()\n  return store.workspace.currentProject.layout\n}\n\nexport function useProject(): Project {\n  const store = useStores()\n  return store.workspace.currentProject\n}\n\nexport function useStyle(): Style {\n  const { style } = useProject()\n  return style\n}\n\nexport function useFont(): Font {\n  const { font } = useStyle()\n  return font\n}\n\nexport function useFill(): FontStyleConfig {\n  const { fill } = useStyle()\n  return fill\n}\n\nexport function useProjectUi(): ProjectUi {\n  const { ui } = useProject()\n  return ui\n}\n","export default function readFile(\n  file: File,\n): Promise<string | ArrayBuffer | null> {\n  if (file.arrayBuffer) return file.arrayBuffer()\n\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onload = (e) => {\n      resolve(e?.target?.result || null)\n    }\n  })\n}\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport FontDownload from '@material-ui/icons/FontDownload'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\n\nimport { useFont } from 'src/store/hooks'\nimport readFile from 'src/utils/readFile'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    clear: {\n      padding: theme.spacing(0.5),\n      cursor: 'pointer',\n      display: 'block',\n    },\n  }),\n)\n\nconst FontFamily: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const [loading, setLoading] = useState(false)\n  const { hasFont, setFont, clearFont } = useFont()\n\n  const hanleUploadFile = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    if (\n      !event ||\n      !event.target ||\n      !event.target.files ||\n      !event.target.files[0]\n    )\n      return\n\n    const file = event.target.files[0]\n    const ext = file.name.match(/\\.([A-Z0-9]+)$/i)\n    if (!ext) return\n\n    setLoading(true)\n\n    readFile(file).then((arrBuf) => {\n      if (!(arrBuf instanceof ArrayBuffer)) {\n        setLoading(false)\n        return\n      }\n\n      event.target.value = ''\n\n      setFont(arrBuf)\n        .then(() => setLoading(false))\n        .catch((e) => {\n          setLoading(false)\n          window.alert(e.message)\n        })\n    })\n  }\n\n  return (\n    <Grid container spacing={2} alignItems='center'>\n      <Grid item xs={true}>\n        <Button\n          component='label'\n          variant='contained'\n          color='primary'\n          fullWidth\n          size='large'\n          startIcon={\n            loading ? (\n              <CircularProgress size={22} color='inherit' />\n            ) : (\n              <FontDownload />\n            )\n          }\n          disabled={loading}\n        >\n          Select Font File\n          <input\n            hidden\n            type='file'\n            onChange={hanleUploadFile}\n            accept='.ttf,.otf,.woff'\n          />\n        </Button>\n      </Grid>\n      {hasFont ? (\n        <Grid item xs='auto'>\n          <HighlightOffIcon className={classes.clear} onClick={clearFont} />\n        </Grid>\n      ) : null}\n    </Grid>\n  )\n}\n\nexport default observer(FontFamily)\n","import React, {\n  ReactNode,\n  FunctionComponent,\n  PropsWithChildren,\n  ElementType,\n} from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\ninterface GridInputProps {\n  before?: ReactNode\n  after?: ReactNode\n  component?: ElementType\n  childrenWidth?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\n}\n\nconst GridInput: FunctionComponent<GridInputProps> = (\n  props: PropsWithChildren<GridInputProps>,\n): JSX.Element => {\n  const { before, children, component, after, childrenWidth } = props\n  return (\n    <Grid\n      component={component || 'label'}\n      container\n      spacing={2}\n      wrap='nowrap'\n      justifyContent='center'\n      alignItems='center'\n    >\n      <Grid item xs={4}>\n        {typeof before === 'object' ? (\n          before\n        ) : (\n          <Typography noWrap align='right'>\n            {before}\n          </Typography>\n        )}\n      </Grid>\n      <Grid item xs={childrenWidth || 5}>\n        {children}\n      </Grid>\n      <Grid item xs>\n        {typeof after === 'object' ? (\n          after\n        ) : (\n          <Typography noWrap variant='caption'>\n            {after}\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default GridInput\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\nimport { useFont } from 'src/store/hooks'\n\nconst FontSize: FunctionComponent<unknown> = () => {\n  const { size, setSize } = useFont()\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setSize(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Font Size:' after='px'>\n      <Input\n        value={size}\n        fullWidth\n        type='number'\n        inputProps={{ min: 1 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(FontSize)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\nimport { useFont } from 'src/store/hooks'\n\nconst LineHeight: FunctionComponent<unknown> = () => {\n  const { lineHeight, setLineHeight } = useFont()\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setLineHeight(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Line Height:' after='multiple'>\n      <Input\n        value={lineHeight}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0.5, step: 0.1 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(LineHeight)\n","import React, { FunctionComponent } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport FontFamily from './FontFamily'\nimport FontSize from './FontSize'\nimport LineHeight from './LineHeight'\n\nconst Font: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Font</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FontFamily />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FontSize />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <LineHeight />\n      </Box>\n    </>\n  )\n}\n\nexport default Font\n","import React, {\n  useState,\n  FunctionComponent,\n  useCallback,\n  useEffect,\n} from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { observer } from 'mobx-react'\n\nimport { useProject } from 'src/store/hooks'\n\nconst Glyphs: FunctionComponent<unknown> = () => {\n  const { text, setText } = useProject()\n  const [isIME, setIsIME] = useState(false)\n  const [inputText, setInputText] = useState(text)\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = event.target\n    const str = Array.from(new Set(value.split(''))).join('')\n    if (isIME) {\n      setInputText(value)\n    } else {\n      setInputText(str)\n      if (str !== text) setText(str)\n    }\n  }\n\n  const handleCompositionStart = useCallback((): void => {\n    setInputText(text)\n    setIsIME(true)\n  }, [text])\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    const str = Array.from(new Set(inputText.split(''))).join('')\n    setInputText(str)\n    if (str !== text) setText(str)\n  }\n\n  useEffect(() => {\n    setInputText(text)\n  }, [text])\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Glyphs</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <TextField\n          margin='none'\n          value={isIME ? inputText : text}\n          fullWidth\n          multiline\n          rows={4}\n          variant='outlined'\n          inputProps={{ spellCheck: false }}\n          onChange={handleInput}\n          onCompositionStart={handleCompositionStart}\n          onCompositionEnd={handleCompositionEnd}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport default observer(Glyphs)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst Padding: FunctionComponent<unknown> = () => {\n  const { padding, setPadding } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setPadding(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Padding:' after='px'>\n      <Input\n        value={padding}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Padding)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst Spacing: FunctionComponent<unknown> = () => {\n  const { spacing, setSpacing } = useLayout()\n\n  return (\n    <GridInput before='Spacing:' after='px'>\n      <Input\n        value={spacing}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={(e) => setSpacing(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Spacing)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst AutoPack: FunctionComponent<unknown> = () => {\n  const { auto, setAuto } = useLayout()\n\n  return (\n    <GridInput before='Auto Pack:'>\n      <Checkbox\n        checked={auto}\n        size='small'\n        color='default'\n        onChange={(e) => setAuto(e.target.checked)}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(AutoPack)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst FixedSize: FunctionComponent<unknown> = () => {\n  const { auto, fixedSize, setFixedSize } = useLayout()\n\n  return (\n    <GridInput before='Fixed Size:'>\n      <Checkbox\n        checked={fixedSize}\n        size='small'\n        color='default'\n        onChange={(e) => setFixedSize(e.target.checked)}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(FixedSize)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst PackWidth: FunctionComponent<unknown> = () => {\n  const { width, auto, fixedSize, setWidth } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setWidth(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before={fixedSize ? 'Width:' : 'Max Width:'} after='px'>\n      <Input\n        value={width}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(PackWidth)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst PackHeight: FunctionComponent<unknown> = () => {\n  const { height, auto, fixedSize, setHeight } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setHeight(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before={fixedSize ? 'Height:' : 'Max Height:'} after='px'>\n      <Input\n        value={height}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n        disabled={auto}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(PackHeight)\n","import React, { FunctionComponent } from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport Padding from './Padding'\nimport Spacing from './Spacing'\n// import Power from './Power'\nimport AutoPack from './AutoPack'\nimport FixedSize from './FixedSize'\nimport PackWidth from './PackWidth'\nimport PackHeight from './PackHeight'\n\nconst PackConfig: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Layout</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <Padding />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <Spacing />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <AutoPack />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FixedSize />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <PackWidth />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <PackHeight />\n      </Box>\n      {/* <Box paddingX={2} marginY={4}>\n        <Power />\n      </Box> */}\n    </>\n  )\n}\n\nexport default PackConfig\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport GridInput from 'src/app/components/GridInput'\n\ninterface SetHandle {\n  (value: number): void\n}\n\ninterface FormAdjustMetricProps {\n  xAdvance: number\n  xOffset: number\n  yOffset: number\n  setXAdvance: SetHandle\n  setXOffset: SetHandle\n  setYOffset: SetHandle\n}\n\nconst FormAdjustMetric: FunctionComponent<FormAdjustMetricProps> = (\n  props: FormAdjustMetricProps,\n) => {\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = props\n\n  const getHandle = (handleSet: SetHandle) => (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => handleSet(Number(e.target.value))\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='xAdvance:' after='px'>\n          <Input\n            value={xAdvance}\n            fullWidth\n            type='number'\n            onChange={getHandle(setXAdvance)}\n          />\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='xOffset:' after='px'>\n          <Input\n            value={xOffset}\n            fullWidth\n            type='number'\n            onChange={getHandle(setXOffset)}\n          />\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='yOffset:' after='px'>\n          <Input\n            value={yOffset}\n            fullWidth\n            type='number'\n            onChange={getHandle(setYOffset)}\n          />\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default FormAdjustMetric\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProject } from 'src/store/hooks'\n\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const { globalAdjustMetric } = useProject()\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = globalAdjustMetric\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Global Metric Adjustment</Typography>\n      </Box>\n      <FormAdjustMetric\n        xAdvance={xAdvance}\n        xOffset={xOffset}\n        yOffset={yOffset}\n        setXAdvance={setXAdvance}\n        setXOffset={setXOffset}\n        setYOffset={setYOffset}\n      />\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Font from './modules/Font'\nimport Glyphs from './modules/Glyphs'\nimport PackConfig from './modules/PackConfig'\nimport GlobalMetric from './modules/GlobalMetric'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      width: '256px',\n    },\n  }),\n)\n\nconst LeftBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  return (\n    <Box\n      bgcolor='background.sidebar'\n      display='flex'\n      flexDirection='column'\n      overflow='hidden'\n      className={classes.root}\n    >\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\n        <Typography variant='subtitle2'>Font Config</Typography>\n      </Box>\n      <Box flex={1} height={0} overflow='hidden auto'>\n        <Glyphs />\n        <Divider />\n        <Font />\n        <Divider />\n        <PackConfig />\n        <Divider />\n        <GlobalMetric />\n      </Box>\n    </Box>\n  )\n}\n\nexport default LeftBar\n","export default function formatStr(\n  str: string,\n  obj: Record<string, unknown>,\n): string {\n  return str.replace(/\\$\\w+\\$/gi, (matchs: string): string => {\n    const returns = obj[matchs.replace(/\\$/g, '')]\n    return `${returns}` === 'undefined' ? '' : `${returns}`\n  })\n}\n","import formatStr from 'src/utils/formatStr'\n\nimport { BMFont } from './toOutputInfo'\n\nconst TEMP_INFO = `<info face=\"$face$\" size=\"$size$\" bold=\"$bold$\" italic=\"$italic$\" charset=\"$charset$\" unicode=\"$unicode$\" stretchH=\"$stretchH$\" smooth=\"$smooth$\" aa=\"$aa$\" padding=\"$padding$\" spacing=\"$spacing$\" />`\nconst TEMP_COMMON = `<common lineHeight=\"$lineHeight$\" base=\"$base$\" scaleW=\"$scaleW$\" scaleH=\"$scaleH$\" pages=\"$pages$\" packed=\"$packed$\" />`\nconst TEMP_PAGE = `<page id=\"$id$\" file=\"$file$\" />`\nconst TEMP_CHARS = `<chars count=\"$count$\" />`\nconst TEMP_CHAR = `<char id=\"$id$\" x=\"$x$\" y=\"$y$\" width=\"$width$\" height=\"$height$\" xoffset=\"$xoffset$\" yoffset=\"$yoffset$\" xadvance=\"$xadvance$\" page=\"$page$\" chnl=\"$chnl$\" />`\nconst TEMP_KERNINGS = `<kernings count=\"$count$\" />`\nconst TEMP_KERNING = `<kerning first=\"$first$\" second=\"$second$\" amount=\"$amount$\" />`\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\nexport default function storeToXml(bmfont: BMFont): string {\n  const { info, common, pages, chars, kernings } = bmfont\n\n  const parser = new DOMParser()\n  const xmlDOM = document.implementation.createDocument('', 'font', null)\n\n  const infoDoc = parser.parseFromString(formatStr(TEMP_INFO, info), 'text/xml')\n  xmlDOM.documentElement.appendChild(infoDoc.childNodes[0])\n\n  const commonDoc = parser.parseFromString(\n    formatStr(TEMP_COMMON, common),\n    'text/xml',\n  )\n  xmlDOM.documentElement.appendChild(commonDoc.childNodes[0])\n\n  const pagesDoc = parser.parseFromString(\n    `<pages>${pages.map((p) => formatStr(TEMP_PAGE, p))}</pages>`,\n    'text/xml',\n  )\n  xmlDOM.documentElement.appendChild(pagesDoc.childNodes[0])\n\n  const charsDoc = parser.parseFromString(\n    formatStr(TEMP_CHARS, chars),\n    'text/xml',\n  )\n\n  chars.list.forEach((char) => {\n    const charDoc = parser.parseFromString(\n      formatStr(TEMP_CHAR, char),\n      'text/xml',\n    )\n    charsDoc.childNodes[0].appendChild(charDoc.childNodes[0])\n  })\n\n  xmlDOM.documentElement.appendChild(charsDoc.childNodes[0])\n\n  if (kernings.count) {\n    const kerningsDoc = parser.parseFromString(\n      formatStr(TEMP_KERNINGS, kernings),\n      'text/xml',\n    )\n\n    kernings.list.forEach((kerning) => {\n      const kerningDoc = parser.parseFromString(\n        formatStr(TEMP_KERNING, kerning),\n        'text/xml',\n      )\n      kerningsDoc.childNodes[0].appendChild(kerningDoc.childNodes[0])\n    })\n\n    xmlDOM.documentElement.appendChild(kerningsDoc.childNodes[0])\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${new XMLSerializer().serializeToString(\n    xmlDOM,\n  )}`\n}\n","import formatStr from 'src/utils/formatStr'\n\nimport { BMFont } from './toOutputInfo'\n\nconst TEMP_INFO = `Font.info = {\\n\\tface = \"$face$\",\\n\\tfile = \"$file$\",\\n\\tsize = $size$,\\n\\tbold = $bold$,\\n\\titalic = $italic$,\\n\\tcharset = $charset$\\n\\tunicode = $unicode$,\\n\\tstretchH = $stretchH$,\\n\\tsmooth = $smooth$,\\n\\taa = $aa$,\\n\\tpadding = {$padding$},\\n\\tspacing = $spacing$,\\n\\tcharsCount = $charsCount$,\\n\\tkerningsCounts = $kerningsCounts$\\n}\\n\\n`\nconst TEMP_COMMON = `Font.common = {\\n\\tlineHeight = $lineHeight$,\\n\\tbase = $base$,\\n\\tscaleW = $scaleW$,\\n\\tscaleH = $scaleH$,\\n\\tpages = $pages$,\\n\\tpacked = $packed$\\n}\\n\\n`\nconst TEMP_PAGE = `\\t{ id=$id$, file=\"$file$\" }`\nconst TEMP_CHARS = `Font.chars = {\\n`\nconst TEMP_CHAR = `\\t{\\n\\t\\tid = $id$,\\n\\t\\tx = $x$,\\n\\t\\ty = $y$,\\n\\t\\twidth = $width$,\\n\\t\\theight = $height$,\\n\\t\\txoffset = $xoffset$,\\n\\t\\tyoffset = $yoffset$,\\n\\t\\txadvance = $xadvance$,\\n\\t\\tpage = 0,\\n\\t\\tchnl = 15\\n\\t}`\nconst TEMP_KERNINGS = `Font.kerning = {\\n`\nconst TEMP_KERNING = `\\t{first = $first$, second = $second$, amount = $amount$}`\n\nexport default function getLuaString(bmfont: BMFont): string {\n  const { info, common, pages, chars, kernings } = bmfont\n\n  let str = ''\n\n  str += formatStr(TEMP_INFO, {\n    ...info,\n    charset: info.charset || '\"\"',\n    charsCount: chars.count,\n    kerningsCounts: kernings.count,\n    file: pages[0].file,\n  })\n  str += formatStr(TEMP_COMMON, common)\n\n  str += `Font.pages = {\\n`\n  str += pages.map((p) => formatStr(TEMP_PAGE, p)).join(',\\n')\n  str += '\\n}\\n\\n'\n\n  str += TEMP_CHARS\n  str += chars.list.map((char) => formatStr(TEMP_CHAR, char)).join(',\\n')\n  str += '\\n}\\n\\n'\n\n  str += TEMP_KERNINGS\n  str += kernings.list\n    .map((kerning) => formatStr(TEMP_KERNING, kerning))\n    .join(',\\n')\n  str += '\\n}'\n\n  return `local Font = {}\n\n${str.replace(/\\t/g, '    ')}\n\nreturn Font\n`\n}\n","import formatStr from 'src/utils/formatStr'\n\nimport { BMFont } from './toOutputInfo'\n\nconst TEMP_INFO = `info face=\"$face$\" size=$size$ bold=$bold$ italic=$italic$ charset=$charset$ unicode=$unicode$ stretchH=$stretchH$ smooth=$smooth$ aa=$aa$ padding=$padding$ spacing=$spacing$\\n`\nconst TEMP_COMMON = `common lineHeight=$lineHeight$ base=$base$ scaleW=$scaleW$ scaleH=$scaleH$ pages=$pages$ packed=$packed$\\n`\nconst TEMP_PAGE = `page id=$id$ file=\"$file$\"\\n`\nconst TEMP_CHARS = `chars count=$count$\\n`\nconst TEMP_CHAR = `char id=$id$ x=$x$ y=$y$ width=$width$ height=$height$ xoffset=$xoffset$ yoffset=$yoffset$ xadvance=$xadvance$ page=$page$ chnl=$chnl$\\n`\nconst TEMP_KERNINGS = `kernings count=$count$\\n`\nconst TEMP_KERNING = `kerning first=$first$ second=$second$ amount=$amount$\\n`\n\nexport default function getTextString(bmfont: BMFont): string {\n  const { info, common, pages, chars, kernings } = bmfont\n\n  let str = ''\n\n  str += formatStr(TEMP_INFO, { ...info, charset: info.charset || '\"\"' })\n\n  str += formatStr(TEMP_COMMON, common)\n\n  pages.forEach((p) => {\n    str += formatStr(TEMP_PAGE, p)\n  })\n\n  str += formatStr(TEMP_CHARS, chars)\n\n  chars.list.forEach((char) => {\n    str += formatStr(TEMP_CHAR, char)\n  })\n\n  if (kernings.count) {\n    str += formatStr(TEMP_KERNINGS, kernings)\n\n    kernings.list.forEach((kerning) => {\n      str += formatStr(TEMP_KERNING, kerning)\n    })\n  }\n\n  return str\n}\n","import { Project } from 'src/store'\n\ninterface BMFontInfo extends Record<string, unknown> {\n  face: string\n  size: number\n  bold: number\n  italic: number\n  charset: string\n  unicode: number\n  stretchH: number\n  smooth: number\n  aa: number\n  padding: number[]\n  spacing: number[]\n}\n\ninterface BMFontCommon extends Record<string, unknown> {\n  lineHeight: number\n  base: number\n  scaleW: number\n  scaleH: number\n  pages: number\n  packed: number\n}\n\ninterface BMFontPage extends Record<string, unknown> {\n  id: number\n  file: string\n}\n\nexport interface BMFontChar extends Record<string, unknown> {\n  letter: string\n  id: number\n  source: HTMLImageElement | HTMLCanvasElement | null\n  x: number\n  y: number\n  width: number\n  height: number\n  xoffset: number\n  yoffset: number\n  xadvance: number\n  page: number\n  chnl: number\n}\n\ninterface BMFontChars extends Record<string, unknown> {\n  count: number\n  list: BMFontChar[]\n}\n\nexport interface BMFontKerning extends Record<string, unknown> {\n  first: number\n  second: number\n  amount: number\n}\n\ninterface BMFontKernings extends Record<string, unknown> {\n  count: number\n  list: BMFontKerning[]\n}\n\nexport interface BMFont {\n  info: BMFontInfo\n  common: BMFontCommon\n  pages: BMFontPage[]\n  chars: BMFontChars\n  kernings: BMFontKernings\n}\n\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\nexport default function toOutputInfo(project: Project): BMFont {\n  const {\n    name,\n    style,\n    layout,\n    globalAdjustMetric,\n    glyphList,\n    ui: { width, height },\n  } = project\n  const { opentype, size } = style.font\n  let fontScale = 1\n  if (opentype) {\n    fontScale = (1 / opentype.unitsPerEm) * size\n  }\n  const info: BMFontInfo = {\n    face: style.font.family,\n    size: style.font.size,\n    bold: 0,\n    italic: 0,\n    charset: '',\n    unicode: 1,\n    stretchH: 100,\n    smooth: 1,\n    aa: 1,\n    padding: new Array(4).fill(layout.padding),\n    spacing: new Array(2).fill(layout.spacing),\n  }\n\n  const common: BMFontCommon = {\n    lineHeight: style.font.size,\n    base: style.font.size,\n    scaleW: width,\n    scaleH: height,\n    pages: 1,\n    packed: 0,\n  }\n\n  const pages: BMFontPage[] = [\n    {\n      id: 0,\n      file: `${name}.png`,\n    },\n  ]\n\n  const chars: BMFontChars = {\n    count: glyphList.length,\n    list: [],\n  }\n\n  const kernings: BMFontKernings = {\n    count: 0,\n    list: [],\n  }\n\n  glyphList.forEach((glyph) => {\n    const isUnEmpty = !!(glyph.width && glyph.height)\n    chars.list.push({\n      letter: glyph.letter,\n      id: glyph.letter.charCodeAt(0),\n      source: glyph.source,\n      x: glyph.x,\n      y: glyph.y,\n      width: isUnEmpty ? glyph.width + layout.padding * 2 : 0,\n      height: isUnEmpty ? glyph.height + layout.padding * 2 : 0,\n      xoffset:\n        globalAdjustMetric.xOffset +\n        glyph.adjustMetric.xOffset -\n        (isUnEmpty ? glyph.trimOffsetLeft : 0),\n      yoffset:\n        globalAdjustMetric.yOffset +\n        glyph.adjustMetric.yOffset -\n        (isUnEmpty ? glyph.trimOffsetTop : 0),\n      xadvance:\n        Math.ceil(glyph.fontWidth) +\n        globalAdjustMetric.xAdvance +\n        glyph.adjustMetric.xAdvance,\n      page: 0,\n      chnl: 15,\n    })\n    if (opentype) {\n      glyphList.forEach(({ letter }) => {\n        const amount = Math.round(\n          opentype.getKerningValue(\n            opentype.charToGlyphIndex(glyph.letter),\n            opentype.charToGlyphIndex(letter),\n          ) *\n            fontScale +\n            (glyph.kerning.get(letter) || 0),\n        )\n        if (amount) {\n          kernings.list.push({\n            first: glyph.letter.charCodeAt(0),\n            second: letter.charCodeAt(0),\n            amount,\n          })\n        }\n      })\n    } else {\n      glyph.kerning.forEach((amount, letter) => {\n        if (amount)\n          kernings.list.push({\n            first: glyph.letter.charCodeAt(0),\n            second: letter.charCodeAt(0),\n            amount,\n          })\n      })\n    }\n  })\n  kernings.count = kernings.list.length\n\n  chars.list.sort((a, b) => a.id - b.id)\n\n  return {\n    info,\n    common,\n    pages,\n    chars,\n    kernings,\n  }\n}\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {})\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.float()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (typeof message.offset !== 'number') return 'offset: number expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = Number(object.offset)\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset =\n        options.json && !isFinite(message.offset)\n          ? String(message.offset)\n          : message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {number|null} [width] Layout width\n   * @property {number|null} [height] Layout height\n   * @property {boolean|null} [auto] Layout auto\n   * @property {boolean|null} [fixedSize] Layout fixedSize\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout width.\n   * @member {number} width\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.width = 0\n\n  /**\n   * Layout height.\n   * @member {number} height\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.height = 0\n\n  /**\n   * Layout auto.\n   * @member {boolean} auto\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.auto = false\n\n  /**\n   * Layout fixedSize.\n   * @member {boolean} fixedSize\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.fixedSize = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\n    if (\n      message.fixedSize != null &&\n      Object.hasOwnProperty.call(message, 'fixedSize')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.width = reader.int32()\n          break\n        case 4:\n          message.height = reader.int32()\n          break\n        case 5:\n          message.auto = reader.bool()\n          break\n        case 6:\n          message.fixedSize = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.height != null && message.hasOwnProperty('height'))\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      if (typeof message.fixedSize !== 'boolean')\n        return 'fixedSize: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.width != null) message.width = object.width | 0\n    if (object.height != null) message.height = object.height | 0\n    if (object.auto != null) message.auto = Boolean(object.auto)\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.width = 0\n      object.height = 0\n      object.auto = false\n      object.fixedSize = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.height != null && message.hasOwnProperty('height'))\n      object.height = message.height\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      object.auto = message.auto\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      object.fixedSize = message.fixedSize\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","export const PREFIX_STR = 'SnowBambooBMF'\nconst prefix = (): Uint8Array =>\n  new Uint8Array([...PREFIX_STR.split('').map((s) => s.charCodeAt(0)), 1, 0, 2])\n\nexport default prefix\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = {}\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.sint32()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = object.offset | 0\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset = message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {boolean|null} [power] Layout power\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout power.\n   * @member {boolean} power\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.power = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.power != null && Object.hasOwnProperty.call(message, 'power'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.power)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.power = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.power != null && message.hasOwnProperty('power'))\n      if (typeof message.power !== 'boolean') return 'power: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.power != null) message.power = Boolean(object.power)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.power = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.power != null && message.hasOwnProperty('power'))\n      object.power = message.power\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","/* eslint-disable */\nimport * as $protobuf from 'protobufjs/minimal'\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util\n\n// Exported root namespace\nconst $root = {}\n\nexport const Metric = ($root.Metric = (() => {\n  /**\n   * Properties of a Metric.\n   * @exports IMetric\n   * @interface IMetric\n   * @property {number|null} [xAdvance] Metric xAdvance\n   * @property {number|null} [xOffset] Metric xOffset\n   * @property {number|null} [yOffset] Metric yOffset\n   */\n\n  /**\n   * Constructs a new Metric.\n   * @exports Metric\n   * @classdesc Represents a Metric.\n   * @implements IMetric\n   * @constructor\n   * @param {IMetric=} [properties] Properties to set\n   */\n  function Metric(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Metric xAdvance.\n   * @member {number} xAdvance\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xAdvance = 0\n\n  /**\n   * Metric xOffset.\n   * @member {number} xOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.xOffset = 0\n\n  /**\n   * Metric yOffset.\n   * @member {number} yOffset\n   * @memberof Metric\n   * @instance\n   */\n  Metric.prototype.yOffset = 0\n\n  /**\n   * Creates a new Metric instance using the specified properties.\n   * @function create\n   * @memberof Metric\n   * @static\n   * @param {IMetric=} [properties] Properties to set\n   * @returns {Metric} Metric instance\n   */\n  Metric.create = function create(properties) {\n    return new Metric(properties)\n  }\n\n  /**\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encode\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.xAdvance != null &&\n      Object.hasOwnProperty.call(message, 'xAdvance')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\n    if (\n      message.xOffset != null &&\n      Object.hasOwnProperty.call(message, 'xOffset')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\n    if (\n      message.yOffset != null &&\n      Object.hasOwnProperty.call(message, 'yOffset')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {IMetric} message Metric message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Metric()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.xAdvance = reader.sint32()\n          break\n        case 2:\n          message.xOffset = reader.sint32()\n          break\n        case 3:\n          message.yOffset = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Metric\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Metric} Metric\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metric.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Metric message.\n   * @function verify\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Metric.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      if (!$util.isInteger(message.xAdvance))\n        return 'xAdvance: integer expected'\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metric\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Metric} Metric\n   */\n  Metric.fromObject = function fromObject(object) {\n    if (object instanceof $root.Metric) return object\n    let message = new $root.Metric()\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metric\n   * @static\n   * @param {Metric} message Metric\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metric.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.xAdvance = 0\n      object.xOffset = 0\n      object.yOffset = 0\n    }\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\n      object.xAdvance = message.xAdvance\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\n      object.xOffset = message.xOffset\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\n      object.yOffset = message.yOffset\n    return object\n  }\n\n  /**\n   * Converts this Metric to JSON.\n   * @function toJSON\n   * @memberof Metric\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metric.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Metric\n})())\n\nexport const GradientColor = ($root.GradientColor = (() => {\n  /**\n   * Properties of a GradientColor.\n   * @exports IGradientColor\n   * @interface IGradientColor\n   * @property {number|null} [id] GradientColor id\n   * @property {number|null} [offset] GradientColor offset\n   * @property {string|null} [color] GradientColor color\n   */\n\n  /**\n   * Constructs a new GradientColor.\n   * @exports GradientColor\n   * @classdesc Represents a GradientColor.\n   * @implements IGradientColor\n   * @constructor\n   * @param {IGradientColor=} [properties] Properties to set\n   */\n  function GradientColor(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GradientColor id.\n   * @member {number} id\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.id = 0\n\n  /**\n   * GradientColor offset.\n   * @member {number} offset\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.offset = 0\n\n  /**\n   * GradientColor color.\n   * @member {string} color\n   * @memberof GradientColor\n   * @instance\n   */\n  GradientColor.prototype.color = ''\n\n  /**\n   * Creates a new GradientColor instance using the specified properties.\n   * @function create\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor=} [properties] Properties to set\n   * @returns {GradientColor} GradientColor instance\n   */\n  GradientColor.create = function create(properties) {\n    return new GradientColor(properties)\n  }\n\n  /**\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encode\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\n    return writer\n  }\n\n  /**\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {IGradientColor} message GradientColor message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer.\n   * @function decode\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GradientColor()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int32()\n          break\n        case 2:\n          message.offset = reader.sint32()\n          break\n        case 3:\n          message.color = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GradientColor\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GradientColor} GradientColor\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GradientColor message.\n   * @function verify\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GradientColor.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    return null\n  }\n\n  /**\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GradientColor\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GradientColor} GradientColor\n   */\n  GradientColor.fromObject = function fromObject(object) {\n    if (object instanceof $root.GradientColor) return object\n    let message = new $root.GradientColor()\n    if (object.id != null) message.id = object.id | 0\n    if (object.offset != null) message.offset = object.offset | 0\n    if (object.color != null) message.color = String(object.color)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GradientColor\n   * @static\n   * @param {GradientColor} message GradientColor\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GradientColor.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.id = 0\n      object.offset = 0\n      object.color = ''\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      object.id = message.id\n    if (message.offset != null && message.hasOwnProperty('offset'))\n      object.offset = message.offset\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    return object\n  }\n\n  /**\n   * Converts this GradientColor to JSON.\n   * @function toJSON\n   * @memberof GradientColor\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GradientColor.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GradientColor\n})())\n\nexport const Gradient = ($root.Gradient = (() => {\n  /**\n   * Properties of a Gradient.\n   * @exports IGradient\n   * @interface IGradient\n   * @property {number|null} [type] Gradient type\n   * @property {number|null} [angle] Gradient angle\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\n   */\n\n  /**\n   * Constructs a new Gradient.\n   * @exports Gradient\n   * @classdesc Represents a Gradient.\n   * @implements IGradient\n   * @constructor\n   * @param {IGradient=} [properties] Properties to set\n   */\n  function Gradient(properties) {\n    this.palette = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Gradient type.\n   * @member {number} type\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.type = 0\n\n  /**\n   * Gradient angle.\n   * @member {number} angle\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.angle = 0\n\n  /**\n   * Gradient palette.\n   * @member {Array.<IGradientColor>} palette\n   * @memberof Gradient\n   * @instance\n   */\n  Gradient.prototype.palette = $util.emptyArray\n\n  /**\n   * Creates a new Gradient instance using the specified properties.\n   * @function create\n   * @memberof Gradient\n   * @static\n   * @param {IGradient=} [properties] Properties to set\n   * @returns {Gradient} Gradient instance\n   */\n  Gradient.create = function create(properties) {\n    return new Gradient(properties)\n  }\n\n  /**\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encode\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\n    if (message.palette != null && message.palette.length)\n      for (let i = 0; i < message.palette.length; ++i)\n        $root.GradientColor.encode(\n          message.palette[i],\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n        ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {IGradient} message Gradient message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer.\n   * @function decode\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Gradient()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.angle = reader.float()\n          break\n        case 3:\n          if (!(message.palette && message.palette.length)) message.palette = []\n          message.palette.push(\n            $root.GradientColor.decode(reader, reader.uint32()),\n          )\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Gradient\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Gradient} Gradient\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Gradient message.\n   * @function verify\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Gradient.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      if (typeof message.angle !== 'number') return 'angle: number expected'\n    if (message.palette != null && message.hasOwnProperty('palette')) {\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\n      for (let i = 0; i < message.palette.length; ++i) {\n        let error = $root.GradientColor.verify(message.palette[i])\n        if (error) return 'palette.' + error\n      }\n    }\n    return null\n  }\n\n  /**\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Gradient\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Gradient} Gradient\n   */\n  Gradient.fromObject = function fromObject(object) {\n    if (object instanceof $root.Gradient) return object\n    let message = new $root.Gradient()\n    if (object.type != null) message.type = object.type | 0\n    if (object.angle != null) message.angle = Number(object.angle)\n    if (object.palette) {\n      if (!Array.isArray(object.palette))\n        throw TypeError('.Gradient.palette: array expected')\n      message.palette = []\n      for (let i = 0; i < object.palette.length; ++i) {\n        if (typeof object.palette[i] !== 'object')\n          throw TypeError('.Gradient.palette: object expected')\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\n      }\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Gradient\n   * @static\n   * @param {Gradient} message Gradient\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Gradient.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.palette = []\n    if (options.defaults) {\n      object.type = 0\n      object.angle = 0\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.angle != null && message.hasOwnProperty('angle'))\n      object.angle =\n        options.json && !isFinite(message.angle)\n          ? String(message.angle)\n          : message.angle\n    if (message.palette && message.palette.length) {\n      object.palette = []\n      for (let j = 0; j < message.palette.length; ++j)\n        object.palette[j] = $root.GradientColor.toObject(\n          message.palette[j],\n          options,\n        )\n    }\n    return object\n  }\n\n  /**\n   * Converts this Gradient to JSON.\n   * @function toJSON\n   * @memberof Gradient\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Gradient.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Gradient\n})())\n\nexport const PatternTexture = ($root.PatternTexture = (() => {\n  /**\n   * Properties of a PatternTexture.\n   * @exports IPatternTexture\n   * @interface IPatternTexture\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\n   * @property {number|null} [scale] PatternTexture scale\n   * @property {string|null} [repetition] PatternTexture repetition\n   */\n\n  /**\n   * Constructs a new PatternTexture.\n   * @exports PatternTexture\n   * @classdesc Represents a PatternTexture.\n   * @implements IPatternTexture\n   * @constructor\n   * @param {IPatternTexture=} [properties] Properties to set\n   */\n  function PatternTexture(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * PatternTexture buffer.\n   * @member {Uint8Array} buffer\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * PatternTexture scale.\n   * @member {number} scale\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.scale = 0\n\n  /**\n   * PatternTexture repetition.\n   * @member {string} repetition\n   * @memberof PatternTexture\n   * @instance\n   */\n  PatternTexture.prototype.repetition = ''\n\n  /**\n   * Creates a new PatternTexture instance using the specified properties.\n   * @function create\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture=} [properties] Properties to set\n   * @returns {PatternTexture} PatternTexture instance\n   */\n  PatternTexture.create = function create(properties) {\n    return new PatternTexture(properties)\n  }\n\n  /**\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encode\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\n    if (\n      message.repetition != null &&\n      Object.hasOwnProperty.call(message, 'repetition')\n    )\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\n    return writer\n  }\n\n  /**\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer.\n   * @function decode\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.PatternTexture()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.buffer = reader.bytes()\n          break\n        case 2:\n          message.scale = reader.double()\n          break\n        case 3:\n          message.repetition = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PatternTexture\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PatternTexture} PatternTexture\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a PatternTexture message.\n   * @function verify\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  PatternTexture.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      if (typeof message.scale !== 'number') return 'scale: number expected'\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      if (!$util.isString(message.repetition))\n        return 'repetition: string expected'\n    return null\n  }\n\n  /**\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PatternTexture\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PatternTexture} PatternTexture\n   */\n  PatternTexture.fromObject = function fromObject(object) {\n    if (object instanceof $root.PatternTexture) return object\n    let message = new $root.PatternTexture()\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.scale != null) message.scale = Number(object.scale)\n    if (object.repetition != null)\n      message.repetition = String(object.repetition)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PatternTexture\n   * @static\n   * @param {PatternTexture} message PatternTexture\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PatternTexture.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.scale = 0\n      object.repetition = ''\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.scale != null && message.hasOwnProperty('scale'))\n      object.scale =\n        options.json && !isFinite(message.scale)\n          ? String(message.scale)\n          : message.scale\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\n      object.repetition = message.repetition\n    return object\n  }\n\n  /**\n   * Converts this PatternTexture to JSON.\n   * @function toJSON\n   * @memberof PatternTexture\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PatternTexture.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return PatternTexture\n})())\n\nexport const Fill = ($root.Fill = (() => {\n  /**\n   * Properties of a Fill.\n   * @exports IFill\n   * @interface IFill\n   * @property {number|null} [type] Fill type\n   * @property {string|null} [color] Fill color\n   * @property {IGradient|null} [gradient] Fill gradient\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\n   * @property {number|null} [width] Fill width\n   * @property {string|null} [lineCap] Fill lineCap\n   * @property {string|null} [lineJoin] Fill lineJoin\n   */\n\n  /**\n   * Constructs a new Fill.\n   * @exports Fill\n   * @classdesc Represents a Fill.\n   * @implements IFill\n   * @constructor\n   * @param {IFill=} [properties] Properties to set\n   */\n  function Fill(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Fill type.\n   * @member {number} type\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.type = 0\n\n  /**\n   * Fill color.\n   * @member {string} color\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.color = ''\n\n  /**\n   * Fill gradient.\n   * @member {IGradient|null|undefined} gradient\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.gradient = null\n\n  /**\n   * Fill patternTexture.\n   * @member {IPatternTexture|null|undefined} patternTexture\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.patternTexture = null\n\n  /**\n   * Fill width.\n   * @member {number} width\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.width = 0\n\n  /**\n   * Fill lineCap.\n   * @member {string} lineCap\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineCap = ''\n\n  /**\n   * Fill lineJoin.\n   * @member {string} lineJoin\n   * @memberof Fill\n   * @instance\n   */\n  Fill.prototype.lineJoin = ''\n\n  /**\n   * Creates a new Fill instance using the specified properties.\n   * @function create\n   * @memberof Fill\n   * @static\n   * @param {IFill=} [properties] Properties to set\n   * @returns {Fill} Fill instance\n   */\n  Fill.create = function create(properties) {\n    return new Fill(properties)\n  }\n\n  /**\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encode\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\n    if (\n      message.gradient != null &&\n      Object.hasOwnProperty.call(message, 'gradient')\n    )\n      $root.Gradient.encode(\n        message.gradient,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\n      ).ldelim()\n    if (\n      message.patternTexture != null &&\n      Object.hasOwnProperty.call(message, 'patternTexture')\n    )\n      $root.PatternTexture.encode(\n        message.patternTexture,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\n    if (\n      message.lineCap != null &&\n      Object.hasOwnProperty.call(message, 'lineCap')\n    )\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\n    if (\n      message.lineJoin != null &&\n      Object.hasOwnProperty.call(message, 'lineJoin')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {IFill} message Fill message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer.\n   * @function decode\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Fill()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32()\n          break\n        case 2:\n          message.color = reader.string()\n          break\n        case 3:\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\n          break\n        case 4:\n          message.patternTexture = $root.PatternTexture.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 5:\n          message.width = reader.int32()\n          break\n        case 6:\n          message.lineCap = reader.string()\n          break\n        case 7:\n          message.lineJoin = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Fill\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Fill} Fill\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Fill.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Fill message.\n   * @function verify\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Fill.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.type != null && message.hasOwnProperty('type'))\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\n      let error = $root.Gradient.verify(message.gradient)\n      if (error) return 'gradient.' + error\n    }\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    ) {\n      let error = $root.PatternTexture.verify(message.patternTexture)\n      if (error) return 'patternTexture.' + error\n    }\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Fill\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Fill} Fill\n   */\n  Fill.fromObject = function fromObject(object) {\n    if (object instanceof $root.Fill) return object\n    let message = new $root.Fill()\n    if (object.type != null) message.type = object.type | 0\n    if (object.color != null) message.color = String(object.color)\n    if (object.gradient != null) {\n      if (typeof object.gradient !== 'object')\n        throw TypeError('.Fill.gradient: object expected')\n      message.gradient = $root.Gradient.fromObject(object.gradient)\n    }\n    if (object.patternTexture != null) {\n      if (typeof object.patternTexture !== 'object')\n        throw TypeError('.Fill.patternTexture: object expected')\n      message.patternTexture = $root.PatternTexture.fromObject(\n        object.patternTexture,\n      )\n    }\n    if (object.width != null) message.width = object.width | 0\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Fill\n   * @static\n   * @param {Fill} message Fill\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Fill.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.type = 0\n      object.color = ''\n      object.gradient = null\n      object.patternTexture = null\n      object.width = 0\n      object.lineCap = ''\n      object.lineJoin = ''\n    }\n    if (message.type != null && message.hasOwnProperty('type'))\n      object.type = message.type\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\n    if (\n      message.patternTexture != null &&\n      message.hasOwnProperty('patternTexture')\n    )\n      object.patternTexture = $root.PatternTexture.toObject(\n        message.patternTexture,\n        options,\n      )\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\n      object.lineCap = message.lineCap\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\n      object.lineJoin = message.lineJoin\n    return object\n  }\n\n  /**\n   * Converts this Fill to JSON.\n   * @function toJSON\n   * @memberof Fill\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Fill.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Fill\n})())\n\nexport const Font = ($root.Font = (() => {\n  /**\n   * Properties of a Font.\n   * @exports IFont\n   * @interface IFont\n   * @property {Uint8Array|null} [font] Font font\n   * @property {string|null} [family] Font family\n   * @property {number|null} [size] Font size\n   * @property {number|null} [lineHeight] Font lineHeight\n   */\n\n  /**\n   * Constructs a new Font.\n   * @exports Font\n   * @classdesc Represents a Font.\n   * @implements IFont\n   * @constructor\n   * @param {IFont=} [properties] Properties to set\n   */\n  function Font(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Font font.\n   * @member {Uint8Array} font\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.font = $util.newBuffer([])\n\n  /**\n   * Font family.\n   * @member {string} family\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.family = ''\n\n  /**\n   * Font size.\n   * @member {number} size\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.size = 0\n\n  /**\n   * Font lineHeight.\n   * @member {number} lineHeight\n   * @memberof Font\n   * @instance\n   */\n  Font.prototype.lineHeight = 0\n\n  /**\n   * Creates a new Font instance using the specified properties.\n   * @function create\n   * @memberof Font\n   * @static\n   * @param {IFont=} [properties] Properties to set\n   * @returns {Font} Font instance\n   */\n  Font.create = function create(properties) {\n    return new Font(properties)\n  }\n\n  /**\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encode\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\n    if (\n      message.lineHeight != null &&\n      Object.hasOwnProperty.call(message, 'lineHeight')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Font\n   * @static\n   * @param {IFont} message Font message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer.\n   * @function decode\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Font()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = reader.bytes()\n          break\n        case 2:\n          message.family = reader.string()\n          break\n        case 3:\n          message.size = reader.int32()\n          break\n        case 4:\n          message.lineHeight = reader.int32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Font message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Font\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Font} Font\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Font.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Font message.\n   * @function verify\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Font.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font'))\n      if (\n        !(\n          (message.font && typeof message.font.length === 'number') ||\n          $util.isString(message.font)\n        )\n      )\n        return 'font: buffer expected'\n    if (message.family != null && message.hasOwnProperty('family'))\n      if (!$util.isString(message.family)) return 'family: string expected'\n    if (message.size != null && message.hasOwnProperty('size'))\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      if (!$util.isInteger(message.lineHeight))\n        return 'lineHeight: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Font\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Font} Font\n   */\n  Font.fromObject = function fromObject(object) {\n    if (object instanceof $root.Font) return object\n    let message = new $root.Font()\n    if (object.font != null)\n      if (typeof object.font === 'string')\n        $util.base64.decode(\n          object.font,\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\n          0,\n        )\n      else if (object.font.length) message.font = object.font\n    if (object.family != null) message.family = String(object.family)\n    if (object.size != null) message.size = object.size | 0\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Font\n   * @static\n   * @param {Font} message Font\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Font.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      if (options.bytes === String) object.font = ''\n      else {\n        object.font = []\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\n      }\n      object.family = ''\n      object.size = 0\n      object.lineHeight = 0\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font =\n        options.bytes === String\n          ? $util.base64.encode(message.font, 0, message.font.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.font)\n          : message.font\n    if (message.family != null && message.hasOwnProperty('family'))\n      object.family = message.family\n    if (message.size != null && message.hasOwnProperty('size'))\n      object.size = message.size\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\n      object.lineHeight = message.lineHeight\n    return object\n  }\n\n  /**\n   * Converts this Font to JSON.\n   * @function toJSON\n   * @memberof Font\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Font.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Font\n})())\n\nexport const GlyphFont = ($root.GlyphFont = (() => {\n  /**\n   * Properties of a GlyphFont.\n   * @exports IGlyphFont\n   * @interface IGlyphFont\n   * @property {string|null} [letter] GlyphFont letter\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\n   */\n\n  /**\n   * Constructs a new GlyphFont.\n   * @exports GlyphFont\n   * @classdesc Represents a GlyphFont.\n   * @implements IGlyphFont\n   * @constructor\n   * @param {IGlyphFont=} [properties] Properties to set\n   */\n  function GlyphFont(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphFont letter.\n   * @member {string} letter\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.letter = ''\n\n  /**\n   * GlyphFont adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.adjustMetric = null\n\n  /**\n   * GlyphFont kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphFont\n   * @instance\n   */\n  GlyphFont.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphFont instance using the specified properties.\n   * @function create\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont=} [properties] Properties to set\n   * @returns {GlyphFont} GlyphFont instance\n   */\n  GlyphFont.create = function create(properties) {\n    return new GlyphFont(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 3, wireType 2 =*/ 26)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphFont(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphFont\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphFont} GlyphFont\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphFont message.\n   * @function verify\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphFont.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphFont\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphFont} GlyphFont\n   */\n  GlyphFont.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphFont) return object\n    let message = new $root.GlyphFont()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphFont.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphFont\n   * @static\n   * @param {GlyphFont} message GlyphFont\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphFont.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphFont to JSON.\n   * @function toJSON\n   * @memberof GlyphFont\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphFont.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphFont\n})())\n\nexport const GlyphImage = ($root.GlyphImage = (() => {\n  /**\n   * Properties of a GlyphImage.\n   * @exports IGlyphImage\n   * @interface IGlyphImage\n   * @property {string|null} [letter] GlyphImage letter\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\n   * @property {string|null} [fileName] GlyphImage fileName\n   * @property {string|null} [fileType] GlyphImage fileType\n   * @property {boolean|null} [selected] GlyphImage selected\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\n   */\n\n  /**\n   * Constructs a new GlyphImage.\n   * @exports GlyphImage\n   * @classdesc Represents a GlyphImage.\n   * @implements IGlyphImage\n   * @constructor\n   * @param {IGlyphImage=} [properties] Properties to set\n   */\n  function GlyphImage(properties) {\n    this.kerning = {}\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * GlyphImage letter.\n   * @member {string} letter\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.letter = ''\n\n  /**\n   * GlyphImage adjustMetric.\n   * @member {IMetric|null|undefined} adjustMetric\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.adjustMetric = null\n\n  /**\n   * GlyphImage buffer.\n   * @member {Uint8Array} buffer\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.buffer = $util.newBuffer([])\n\n  /**\n   * GlyphImage fileName.\n   * @member {string} fileName\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileName = ''\n\n  /**\n   * GlyphImage fileType.\n   * @member {string} fileType\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.fileType = ''\n\n  /**\n   * GlyphImage selected.\n   * @member {boolean} selected\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.selected = false\n\n  /**\n   * GlyphImage kerning.\n   * @member {Object.<string,number>} kerning\n   * @memberof GlyphImage\n   * @instance\n   */\n  GlyphImage.prototype.kerning = $util.emptyObject\n\n  /**\n   * Creates a new GlyphImage instance using the specified properties.\n   * @function create\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage=} [properties] Properties to set\n   * @returns {GlyphImage} GlyphImage instance\n   */\n  GlyphImage.create = function create(properties) {\n    return new GlyphImage(properties)\n  }\n\n  /**\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encode\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\n    if (\n      message.adjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'adjustMetric')\n    )\n      $root.Metric.encode(\n        message.adjustMetric,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\n    if (\n      message.fileName != null &&\n      Object.hasOwnProperty.call(message, 'fileName')\n    )\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\n    if (\n      message.fileType != null &&\n      Object.hasOwnProperty.call(message, 'fileType')\n    )\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\n    if (\n      message.selected != null &&\n      Object.hasOwnProperty.call(message, 'selected')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\n    if (\n      message.kerning != null &&\n      Object.hasOwnProperty.call(message, 'kerning')\n    )\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\n        writer\n          .uint32(/* id 7, wireType 2 =*/ 58)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n          .uint32(/* id 2, wireType 0 =*/ 16)\n          .int32(message.kerning[keys[i]])\n          .ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer.\n   * @function decode\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.GlyphImage(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.letter = reader.string()\n          break\n        case 2:\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.buffer = reader.bytes()\n          break\n        case 4:\n          message.fileName = reader.string()\n          break\n        case 5:\n          message.fileType = reader.string()\n          break\n        case 6:\n          message.selected = reader.bool()\n          break\n        case 7:\n          if (message.kerning === $util.emptyObject) message.kerning = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = 0\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = reader.int32()\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.kerning[key] = value\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof GlyphImage\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {GlyphImage} GlyphImage\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a GlyphImage message.\n   * @function verify\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  GlyphImage.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      if (!$util.isString(message.letter)) return 'letter: string expected'\n    if (\n      message.adjustMetric != null &&\n      message.hasOwnProperty('adjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.adjustMetric)\n      if (error) return 'adjustMetric.' + error\n    }\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      if (\n        !(\n          (message.buffer && typeof message.buffer.length === 'number') ||\n          $util.isString(message.buffer)\n        )\n      )\n        return 'buffer: buffer expected'\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      if (typeof message.selected !== 'boolean')\n        return 'selected: boolean expected'\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\n      let key = Object.keys(message.kerning)\n      for (let i = 0; i < key.length; ++i)\n        if (!$util.isInteger(message.kerning[key[i]]))\n          return 'kerning: integer{k:string} expected'\n    }\n    return null\n  }\n\n  /**\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof GlyphImage\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {GlyphImage} GlyphImage\n   */\n  GlyphImage.fromObject = function fromObject(object) {\n    if (object instanceof $root.GlyphImage) return object\n    let message = new $root.GlyphImage()\n    if (object.letter != null) message.letter = String(object.letter)\n    if (object.adjustMetric != null) {\n      if (typeof object.adjustMetric !== 'object')\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\n    }\n    if (object.buffer != null)\n      if (typeof object.buffer === 'string')\n        $util.base64.decode(\n          object.buffer,\n          (message.buffer = $util.newBuffer(\n            $util.base64.length(object.buffer),\n          )),\n          0,\n        )\n      else if (object.buffer.length) message.buffer = object.buffer\n    if (object.fileName != null) message.fileName = String(object.fileName)\n    if (object.fileType != null) message.fileType = String(object.fileType)\n    if (object.selected != null) message.selected = Boolean(object.selected)\n    if (object.kerning) {\n      if (typeof object.kerning !== 'object')\n        throw TypeError('.GlyphImage.kerning: object expected')\n      message.kerning = {}\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof GlyphImage\n   * @static\n   * @param {GlyphImage} message GlyphImage\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  GlyphImage.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.objects || options.defaults) object.kerning = {}\n    if (options.defaults) {\n      object.letter = ''\n      object.adjustMetric = null\n      if (options.bytes === String) object.buffer = ''\n      else {\n        object.buffer = []\n        if (options.bytes !== Array)\n          object.buffer = $util.newBuffer(object.buffer)\n      }\n      object.fileName = ''\n      object.fileType = ''\n      object.selected = false\n    }\n    if (message.letter != null && message.hasOwnProperty('letter'))\n      object.letter = message.letter\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\n      object.buffer =\n        options.bytes === String\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\n          : options.bytes === Array\n          ? Array.prototype.slice.call(message.buffer)\n          : message.buffer\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\n      object.fileName = message.fileName\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\n      object.fileType = message.fileType\n    if (message.selected != null && message.hasOwnProperty('selected'))\n      object.selected = message.selected\n    let keys2\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\n      object.kerning = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\n    }\n    return object\n  }\n\n  /**\n   * Converts this GlyphImage to JSON.\n   * @function toJSON\n   * @memberof GlyphImage\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  GlyphImage.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return GlyphImage\n})())\n\nexport const Layout = ($root.Layout = (() => {\n  /**\n   * Properties of a Layout.\n   * @exports ILayout\n   * @interface ILayout\n   * @property {number|null} [padding] Layout padding\n   * @property {number|null} [spacing] Layout spacing\n   * @property {number|null} [width] Layout width\n   * @property {number|null} [height] Layout height\n   * @property {boolean|null} [auto] Layout auto\n   * @property {boolean|null} [fixedSize] Layout fixedSize\n   */\n\n  /**\n   * Constructs a new Layout.\n   * @exports Layout\n   * @classdesc Represents a Layout.\n   * @implements ILayout\n   * @constructor\n   * @param {ILayout=} [properties] Properties to set\n   */\n  function Layout(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Layout padding.\n   * @member {number} padding\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.padding = 0\n\n  /**\n   * Layout spacing.\n   * @member {number} spacing\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.spacing = 0\n\n  /**\n   * Layout width.\n   * @member {number} width\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.width = 0\n\n  /**\n   * Layout height.\n   * @member {number} height\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.height = 0\n\n  /**\n   * Layout auto.\n   * @member {boolean} auto\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.auto = false\n\n  /**\n   * Layout fixedSize.\n   * @member {boolean} fixedSize\n   * @memberof Layout\n   * @instance\n   */\n  Layout.prototype.fixedSize = false\n\n  /**\n   * Creates a new Layout instance using the specified properties.\n   * @function create\n   * @memberof Layout\n   * @static\n   * @param {ILayout=} [properties] Properties to set\n   * @returns {Layout} Layout instance\n   */\n  Layout.create = function create(properties) {\n    return new Layout(properties)\n  }\n\n  /**\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encode\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.padding != null &&\n      Object.hasOwnProperty.call(message, 'padding')\n    )\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\n    if (\n      message.spacing != null &&\n      Object.hasOwnProperty.call(message, 'spacing')\n    )\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\n    if (\n      message.fixedSize != null &&\n      Object.hasOwnProperty.call(message, 'fixedSize')\n    )\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {ILayout} message Layout message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer.\n   * @function decode\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Layout()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.padding = reader.int32()\n          break\n        case 2:\n          message.spacing = reader.int32()\n          break\n        case 3:\n          message.width = reader.int32()\n          break\n        case 4:\n          message.height = reader.int32()\n          break\n        case 5:\n          message.auto = reader.bool()\n          break\n        case 6:\n          message.fixedSize = reader.bool()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Layout\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Layout} Layout\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Layout.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Layout message.\n   * @function verify\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Layout.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\n    if (message.width != null && message.hasOwnProperty('width'))\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\n    if (message.height != null && message.hasOwnProperty('height'))\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      if (typeof message.fixedSize !== 'boolean')\n        return 'fixedSize: boolean expected'\n    return null\n  }\n\n  /**\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Layout\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Layout} Layout\n   */\n  Layout.fromObject = function fromObject(object) {\n    if (object instanceof $root.Layout) return object\n    let message = new $root.Layout()\n    if (object.padding != null) message.padding = object.padding | 0\n    if (object.spacing != null) message.spacing = object.spacing | 0\n    if (object.width != null) message.width = object.width | 0\n    if (object.height != null) message.height = object.height | 0\n    if (object.auto != null) message.auto = Boolean(object.auto)\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Layout\n   * @static\n   * @param {Layout} message Layout\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Layout.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.padding = 0\n      object.spacing = 0\n      object.width = 0\n      object.height = 0\n      object.auto = false\n      object.fixedSize = false\n    }\n    if (message.padding != null && message.hasOwnProperty('padding'))\n      object.padding = message.padding\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\n      object.spacing = message.spacing\n    if (message.width != null && message.hasOwnProperty('width'))\n      object.width = message.width\n    if (message.height != null && message.hasOwnProperty('height'))\n      object.height = message.height\n    if (message.auto != null && message.hasOwnProperty('auto'))\n      object.auto = message.auto\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\n      object.fixedSize = message.fixedSize\n    return object\n  }\n\n  /**\n   * Converts this Layout to JSON.\n   * @function toJSON\n   * @memberof Layout\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Layout.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Layout\n})())\n\nexport const Shadow = ($root.Shadow = (() => {\n  /**\n   * Properties of a Shadow.\n   * @exports IShadow\n   * @interface IShadow\n   * @property {string|null} [color] Shadow color\n   * @property {number|null} [blur] Shadow blur\n   * @property {number|null} [offsetX] Shadow offsetX\n   * @property {number|null} [offsetY] Shadow offsetY\n   */\n\n  /**\n   * Constructs a new Shadow.\n   * @exports Shadow\n   * @classdesc Represents a Shadow.\n   * @implements IShadow\n   * @constructor\n   * @param {IShadow=} [properties] Properties to set\n   */\n  function Shadow(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Shadow color.\n   * @member {string} color\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.color = ''\n\n  /**\n   * Shadow blur.\n   * @member {number} blur\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.blur = 0\n\n  /**\n   * Shadow offsetX.\n   * @member {number} offsetX\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetX = 0\n\n  /**\n   * Shadow offsetY.\n   * @member {number} offsetY\n   * @memberof Shadow\n   * @instance\n   */\n  Shadow.prototype.offsetY = 0\n\n  /**\n   * Creates a new Shadow instance using the specified properties.\n   * @function create\n   * @memberof Shadow\n   * @static\n   * @param {IShadow=} [properties] Properties to set\n   * @returns {Shadow} Shadow instance\n   */\n  Shadow.create = function create(properties) {\n    return new Shadow(properties)\n  }\n\n  /**\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encode\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\n    if (\n      message.offsetX != null &&\n      Object.hasOwnProperty.call(message, 'offsetX')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\n    if (\n      message.offsetY != null &&\n      Object.hasOwnProperty.call(message, 'offsetY')\n    )\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {IShadow} message Shadow message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer.\n   * @function decode\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Shadow()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.color = reader.string()\n          break\n        case 2:\n          message.blur = reader.int32()\n          break\n        case 3:\n          message.offsetX = reader.sint32()\n          break\n        case 4:\n          message.offsetY = reader.sint32()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Shadow\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Shadow} Shadow\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Shadow message.\n   * @function verify\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Shadow.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.color != null && message.hasOwnProperty('color'))\n      if (!$util.isString(message.color)) return 'color: string expected'\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\n    return null\n  }\n\n  /**\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Shadow\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Shadow} Shadow\n   */\n  Shadow.fromObject = function fromObject(object) {\n    if (object instanceof $root.Shadow) return object\n    let message = new $root.Shadow()\n    if (object.color != null) message.color = String(object.color)\n    if (object.blur != null) message.blur = object.blur | 0\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Shadow\n   * @static\n   * @param {Shadow} message Shadow\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Shadow.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.color = ''\n      object.blur = 0\n      object.offsetX = 0\n      object.offsetY = 0\n    }\n    if (message.color != null && message.hasOwnProperty('color'))\n      object.color = message.color\n    if (message.blur != null && message.hasOwnProperty('blur'))\n      object.blur = message.blur\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\n      object.offsetX = message.offsetX\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\n      object.offsetY = message.offsetY\n    return object\n  }\n\n  /**\n   * Converts this Shadow to JSON.\n   * @function toJSON\n   * @memberof Shadow\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Shadow.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Shadow\n})())\n\nexport const Style = ($root.Style = (() => {\n  /**\n   * Properties of a Style.\n   * @exports IStyle\n   * @interface IStyle\n   * @property {IFont|null} [font] Style font\n   * @property {IFill|null} [fill] Style fill\n   * @property {boolean|null} [useStroke] Style useStroke\n   * @property {IFill|null} [stroke] Style stroke\n   * @property {boolean|null} [useShadow] Style useShadow\n   * @property {IShadow|null} [shadow] Style shadow\n   * @property {string|null} [bgColor] Style bgColor\n   */\n\n  /**\n   * Constructs a new Style.\n   * @exports Style\n   * @classdesc Represents a Style.\n   * @implements IStyle\n   * @constructor\n   * @param {IStyle=} [properties] Properties to set\n   */\n  function Style(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Style font.\n   * @member {IFont|null|undefined} font\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.font = null\n\n  /**\n   * Style fill.\n   * @member {IFill|null|undefined} fill\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.fill = null\n\n  /**\n   * Style useStroke.\n   * @member {boolean} useStroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useStroke = false\n\n  /**\n   * Style stroke.\n   * @member {IFill|null|undefined} stroke\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.stroke = null\n\n  /**\n   * Style useShadow.\n   * @member {boolean} useShadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.useShadow = false\n\n  /**\n   * Style shadow.\n   * @member {IShadow|null|undefined} shadow\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.shadow = null\n\n  /**\n   * Style bgColor.\n   * @member {string} bgColor\n   * @memberof Style\n   * @instance\n   */\n  Style.prototype.bgColor = ''\n\n  /**\n   * Creates a new Style instance using the specified properties.\n   * @function create\n   * @memberof Style\n   * @static\n   * @param {IStyle=} [properties] Properties to set\n   * @returns {Style} Style instance\n   */\n  Style.create = function create(properties) {\n    return new Style(properties)\n  }\n\n  /**\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encode\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\n      $root.Font.encode(\n        message.font,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\n      ).ldelim()\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\n      $root.Fill.encode(\n        message.fill,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n      ).ldelim()\n    if (\n      message.useStroke != null &&\n      Object.hasOwnProperty.call(message, 'useStroke')\n    )\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\n      $root.Fill.encode(\n        message.stroke,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\n      ).ldelim()\n    if (\n      message.useShadow != null &&\n      Object.hasOwnProperty.call(message, 'useShadow')\n    )\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\n      $root.Shadow.encode(\n        message.shadow,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (\n      message.bgColor != null &&\n      Object.hasOwnProperty.call(message, 'bgColor')\n    )\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Style\n   * @static\n   * @param {IStyle} message Style message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer.\n   * @function decode\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Style()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.font = $root.Font.decode(reader, reader.uint32())\n          break\n        case 2:\n          message.fill = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 3:\n          message.useStroke = reader.bool()\n          break\n        case 4:\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\n          break\n        case 5:\n          message.useShadow = reader.bool()\n          break\n        case 6:\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.bgColor = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Style message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Style\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Style} Style\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Style.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Style message.\n   * @function verify\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Style.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.font != null && message.hasOwnProperty('font')) {\n      let error = $root.Font.verify(message.font)\n      if (error) return 'font.' + error\n    }\n    if (message.fill != null && message.hasOwnProperty('fill')) {\n      let error = $root.Fill.verify(message.fill)\n      if (error) return 'fill.' + error\n    }\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      if (typeof message.useStroke !== 'boolean')\n        return 'useStroke: boolean expected'\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\n      let error = $root.Fill.verify(message.stroke)\n      if (error) return 'stroke.' + error\n    }\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      if (typeof message.useShadow !== 'boolean')\n        return 'useShadow: boolean expected'\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\n      let error = $root.Shadow.verify(message.shadow)\n      if (error) return 'shadow.' + error\n    }\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\n    return null\n  }\n\n  /**\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Style\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Style} Style\n   */\n  Style.fromObject = function fromObject(object) {\n    if (object instanceof $root.Style) return object\n    let message = new $root.Style()\n    if (object.font != null) {\n      if (typeof object.font !== 'object')\n        throw TypeError('.Style.font: object expected')\n      message.font = $root.Font.fromObject(object.font)\n    }\n    if (object.fill != null) {\n      if (typeof object.fill !== 'object')\n        throw TypeError('.Style.fill: object expected')\n      message.fill = $root.Fill.fromObject(object.fill)\n    }\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\n    if (object.stroke != null) {\n      if (typeof object.stroke !== 'object')\n        throw TypeError('.Style.stroke: object expected')\n      message.stroke = $root.Fill.fromObject(object.stroke)\n    }\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\n    if (object.shadow != null) {\n      if (typeof object.shadow !== 'object')\n        throw TypeError('.Style.shadow: object expected')\n      message.shadow = $root.Shadow.fromObject(object.shadow)\n    }\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Style\n   * @static\n   * @param {Style} message Style\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Style.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) {\n      object.font = null\n      object.fill = null\n      object.useStroke = false\n      object.stroke = null\n      object.useShadow = false\n      object.shadow = null\n      object.bgColor = ''\n    }\n    if (message.font != null && message.hasOwnProperty('font'))\n      object.font = $root.Font.toObject(message.font, options)\n    if (message.fill != null && message.hasOwnProperty('fill'))\n      object.fill = $root.Fill.toObject(message.fill, options)\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\n      object.useStroke = message.useStroke\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\n      object.stroke = $root.Fill.toObject(message.stroke, options)\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\n      object.useShadow = message.useShadow\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\n      object.bgColor = message.bgColor\n    return object\n  }\n\n  /**\n   * Converts this Style to JSON.\n   * @function toJSON\n   * @memberof Style\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Style.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Style\n})())\n\nexport const Ui = ($root.Ui = (() => {\n  /**\n   * Properties of an Ui.\n   * @exports IUi\n   * @interface IUi\n   * @property {string|null} [previewText] Ui previewText\n   */\n\n  /**\n   * Constructs a new Ui.\n   * @exports Ui\n   * @classdesc Represents an Ui.\n   * @implements IUi\n   * @constructor\n   * @param {IUi=} [properties] Properties to set\n   */\n  function Ui(properties) {\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Ui previewText.\n   * @member {string} previewText\n   * @memberof Ui\n   * @instance\n   */\n  Ui.prototype.previewText = ''\n\n  /**\n   * Creates a new Ui instance using the specified properties.\n   * @function create\n   * @memberof Ui\n   * @static\n   * @param {IUi=} [properties] Properties to set\n   * @returns {Ui} Ui instance\n   */\n  Ui.create = function create(properties) {\n    return new Ui(properties)\n  }\n\n  /**\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encode\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (\n      message.previewText != null &&\n      Object.hasOwnProperty.call(message, 'previewText')\n    )\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\n    return writer\n  }\n\n  /**\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {IUi} message Ui message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer.\n   * @function decode\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Ui()\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.previewText = reader.string()\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Ui\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Ui} Ui\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Ui.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies an Ui message.\n   * @function verify\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Ui.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      if (!$util.isString(message.previewText))\n        return 'previewText: string expected'\n    return null\n  }\n\n  /**\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Ui\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Ui} Ui\n   */\n  Ui.fromObject = function fromObject(object) {\n    if (object instanceof $root.Ui) return object\n    let message = new $root.Ui()\n    if (object.previewText != null)\n      message.previewText = String(object.previewText)\n    return message\n  }\n\n  /**\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Ui\n   * @static\n   * @param {Ui} message Ui\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Ui.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.defaults) object.previewText = ''\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\n      object.previewText = message.previewText\n    return object\n  }\n\n  /**\n   * Converts this Ui to JSON.\n   * @function toJSON\n   * @memberof Ui\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Ui.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Ui\n})())\n\nexport const Project = ($root.Project = (() => {\n  /**\n   * Properties of a Project.\n   * @exports IProject\n   * @interface IProject\n   * @property {number|Long|null} [id] Project id\n   * @property {string|null} [name] Project name\n   * @property {string|null} [text] Project text\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\n   * @property {IStyle|null} [style] Project style\n   * @property {ILayout|null} [layout] Project layout\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\n   * @property {IUi|null} [ui] Project ui\n   */\n\n  /**\n   * Constructs a new Project.\n   * @exports Project\n   * @classdesc Represents a Project.\n   * @implements IProject\n   * @constructor\n   * @param {IProject=} [properties] Properties to set\n   */\n  function Project(properties) {\n    this.glyphs = {}\n    this.glyphImages = []\n    if (properties)\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }\n\n  /**\n   * Project id.\n   * @member {number|Long} id\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\n\n  /**\n   * Project name.\n   * @member {string} name\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.name = ''\n\n  /**\n   * Project text.\n   * @member {string} text\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.text = ''\n\n  /**\n   * Project glyphs.\n   * @member {Object.<string,IGlyphFont>} glyphs\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphs = $util.emptyObject\n\n  /**\n   * Project glyphImages.\n   * @member {Array.<IGlyphImage>} glyphImages\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.glyphImages = $util.emptyArray\n\n  /**\n   * Project style.\n   * @member {IStyle|null|undefined} style\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.style = null\n\n  /**\n   * Project layout.\n   * @member {ILayout|null|undefined} layout\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.layout = null\n\n  /**\n   * Project globalAdjustMetric.\n   * @member {IMetric|null|undefined} globalAdjustMetric\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.globalAdjustMetric = null\n\n  /**\n   * Project ui.\n   * @member {IUi|null|undefined} ui\n   * @memberof Project\n   * @instance\n   */\n  Project.prototype.ui = null\n\n  /**\n   * Creates a new Project instance using the specified properties.\n   * @function create\n   * @memberof Project\n   * @static\n   * @param {IProject=} [properties] Properties to set\n   * @returns {Project} Project instance\n   */\n  Project.create = function create(properties) {\n    return new Project(properties)\n  }\n\n  /**\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encode\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create()\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\n      for (\n        let keys = Object.keys(message.glyphs), i = 0;\n        i < keys.length;\n        ++i\n      ) {\n        writer\n          .uint32(/* id 4, wireType 2 =*/ 34)\n          .fork()\n          .uint32(/* id 1, wireType 2 =*/ 10)\n          .string(keys[i])\n        $root.GlyphFont.encode(\n          message.glyphs[keys[i]],\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\n        )\n          .ldelim()\n          .ldelim()\n      }\n    if (message.glyphImages != null && message.glyphImages.length)\n      for (let i = 0; i < message.glyphImages.length; ++i)\n        $root.GlyphImage.encode(\n          message.glyphImages[i],\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\n        ).ldelim()\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\n      $root.Style.encode(\n        message.style,\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\n      ).ldelim()\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\n      $root.Layout.encode(\n        message.layout,\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\n      ).ldelim()\n    if (\n      message.globalAdjustMetric != null &&\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\n    )\n      $root.Metric.encode(\n        message.globalAdjustMetric,\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\n      ).ldelim()\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\n      $root.Ui.encode(\n        message.ui,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\n      ).ldelim()\n    return writer\n  }\n\n  /**\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Project\n   * @static\n   * @param {IProject} message Project message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim()\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer.\n   * @function decode\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\n    let end = length === undefined ? reader.len : reader.pos + length,\n      message = new $root.Project(),\n      key,\n      value\n    while (reader.pos < end) {\n      let tag = reader.uint32()\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.int64()\n          break\n        case 2:\n          message.name = reader.string()\n          break\n        case 3:\n          message.text = reader.string()\n          break\n        case 4:\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\n          let end2 = reader.uint32() + reader.pos\n          key = ''\n          value = null\n          while (reader.pos < end2) {\n            let tag2 = reader.uint32()\n            switch (tag2 >>> 3) {\n              case 1:\n                key = reader.string()\n                break\n              case 2:\n                value = $root.GlyphFont.decode(reader, reader.uint32())\n                break\n              default:\n                reader.skipType(tag2 & 7)\n                break\n            }\n          }\n          message.glyphs[key] = value\n          break\n        case 5:\n          if (!(message.glyphImages && message.glyphImages.length))\n            message.glyphImages = []\n          message.glyphImages.push(\n            $root.GlyphImage.decode(reader, reader.uint32()),\n          )\n          break\n        case 6:\n          message.style = $root.Style.decode(reader, reader.uint32())\n          break\n        case 7:\n          message.layout = $root.Layout.decode(reader, reader.uint32())\n          break\n        case 8:\n          message.globalAdjustMetric = $root.Metric.decode(\n            reader,\n            reader.uint32(),\n          )\n          break\n        case 9:\n          message.ui = $root.Ui.decode(reader, reader.uint32())\n          break\n        default:\n          reader.skipType(tag & 7)\n          break\n      }\n    }\n    return message\n  }\n\n  /**\n   * Decodes a Project message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Project\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Project} Project\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Project.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\n    return this.decode(reader, reader.uint32())\n  }\n\n  /**\n   * Verifies a Project message.\n   * @function verify\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n  Project.verify = function verify(message) {\n    if (typeof message !== 'object' || message === null)\n      return 'object expected'\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (\n        !$util.isInteger(message.id) &&\n        !(\n          message.id &&\n          $util.isInteger(message.id.low) &&\n          $util.isInteger(message.id.high)\n        )\n      )\n        return 'id: integer|Long expected'\n    if (message.name != null && message.hasOwnProperty('name'))\n      if (!$util.isString(message.name)) return 'name: string expected'\n    if (message.text != null && message.hasOwnProperty('text'))\n      if (!$util.isString(message.text)) return 'text: string expected'\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\n      let key = Object.keys(message.glyphs)\n      for (let i = 0; i < key.length; ++i) {\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\n        if (error) return 'glyphs.' + error\n      }\n    }\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\n      if (!Array.isArray(message.glyphImages))\n        return 'glyphImages: array expected'\n      for (let i = 0; i < message.glyphImages.length; ++i) {\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\n        if (error) return 'glyphImages.' + error\n      }\n    }\n    if (message.style != null && message.hasOwnProperty('style')) {\n      let error = $root.Style.verify(message.style)\n      if (error) return 'style.' + error\n    }\n    if (message.layout != null && message.hasOwnProperty('layout')) {\n      let error = $root.Layout.verify(message.layout)\n      if (error) return 'layout.' + error\n    }\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    ) {\n      let error = $root.Metric.verify(message.globalAdjustMetric)\n      if (error) return 'globalAdjustMetric.' + error\n    }\n    if (message.ui != null && message.hasOwnProperty('ui')) {\n      let error = $root.Ui.verify(message.ui)\n      if (error) return 'ui.' + error\n    }\n    return null\n  }\n\n  /**\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Project\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Project} Project\n   */\n  Project.fromObject = function fromObject(object) {\n    if (object instanceof $root.Project) return object\n    let message = new $root.Project()\n    if (object.id != null)\n      if ($util.Long)\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\n      else if (typeof object.id === 'string')\n        message.id = parseInt(object.id, 10)\n      else if (typeof object.id === 'number') message.id = object.id\n      else if (typeof object.id === 'object')\n        message.id = new $util.LongBits(\n          object.id.low >>> 0,\n          object.id.high >>> 0,\n        ).toNumber()\n    if (object.name != null) message.name = String(object.name)\n    if (object.text != null) message.text = String(object.text)\n    if (object.glyphs) {\n      if (typeof object.glyphs !== 'object')\n        throw TypeError('.Project.glyphs: object expected')\n      message.glyphs = {}\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\n        if (typeof object.glyphs[keys[i]] !== 'object')\n          throw TypeError('.Project.glyphs: object expected')\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\n          object.glyphs[keys[i]],\n        )\n      }\n    }\n    if (object.glyphImages) {\n      if (!Array.isArray(object.glyphImages))\n        throw TypeError('.Project.glyphImages: array expected')\n      message.glyphImages = []\n      for (let i = 0; i < object.glyphImages.length; ++i) {\n        if (typeof object.glyphImages[i] !== 'object')\n          throw TypeError('.Project.glyphImages: object expected')\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\n          object.glyphImages[i],\n        )\n      }\n    }\n    if (object.style != null) {\n      if (typeof object.style !== 'object')\n        throw TypeError('.Project.style: object expected')\n      message.style = $root.Style.fromObject(object.style)\n    }\n    if (object.layout != null) {\n      if (typeof object.layout !== 'object')\n        throw TypeError('.Project.layout: object expected')\n      message.layout = $root.Layout.fromObject(object.layout)\n    }\n    if (object.globalAdjustMetric != null) {\n      if (typeof object.globalAdjustMetric !== 'object')\n        throw TypeError('.Project.globalAdjustMetric: object expected')\n      message.globalAdjustMetric = $root.Metric.fromObject(\n        object.globalAdjustMetric,\n      )\n    }\n    if (object.ui != null) {\n      if (typeof object.ui !== 'object')\n        throw TypeError('.Project.ui: object expected')\n      message.ui = $root.Ui.fromObject(object.ui)\n    }\n    return message\n  }\n\n  /**\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Project\n   * @static\n   * @param {Project} message Project\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Project.toObject = function toObject(message, options) {\n    if (!options) options = {}\n    let object = {}\n    if (options.arrays || options.defaults) object.glyphImages = []\n    if (options.objects || options.defaults) object.glyphs = {}\n    if (options.defaults) {\n      if ($util.Long) {\n        let long = new $util.Long(0, 0, false)\n        object.id =\n          options.longs === String\n            ? long.toString()\n            : options.longs === Number\n            ? long.toNumber()\n            : long\n      } else object.id = options.longs === String ? '0' : 0\n      object.name = ''\n      object.text = ''\n      object.style = null\n      object.layout = null\n      object.globalAdjustMetric = null\n      object.ui = null\n    }\n    if (message.id != null && message.hasOwnProperty('id'))\n      if (typeof message.id === 'number')\n        object.id = options.longs === String ? String(message.id) : message.id\n      else\n        object.id =\n          options.longs === String\n            ? $util.Long.prototype.toString.call(message.id)\n            : options.longs === Number\n            ? new $util.LongBits(\n                message.id.low >>> 0,\n                message.id.high >>> 0,\n              ).toNumber()\n            : message.id\n    if (message.name != null && message.hasOwnProperty('name'))\n      object.name = message.name\n    if (message.text != null && message.hasOwnProperty('text'))\n      object.text = message.text\n    let keys2\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\n      object.glyphs = {}\n      for (let j = 0; j < keys2.length; ++j)\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\n          message.glyphs[keys2[j]],\n          options,\n        )\n    }\n    if (message.glyphImages && message.glyphImages.length) {\n      object.glyphImages = []\n      for (let j = 0; j < message.glyphImages.length; ++j)\n        object.glyphImages[j] = $root.GlyphImage.toObject(\n          message.glyphImages[j],\n          options,\n        )\n    }\n    if (message.style != null && message.hasOwnProperty('style'))\n      object.style = $root.Style.toObject(message.style, options)\n    if (message.layout != null && message.hasOwnProperty('layout'))\n      object.layout = $root.Layout.toObject(message.layout, options)\n    if (\n      message.globalAdjustMetric != null &&\n      message.hasOwnProperty('globalAdjustMetric')\n    )\n      object.globalAdjustMetric = $root.Metric.toObject(\n        message.globalAdjustMetric,\n        options,\n      )\n    if (message.ui != null && message.hasOwnProperty('ui'))\n      object.ui = $root.Ui.toObject(message.ui, options)\n    return object\n  }\n\n  /**\n   * Converts this Project to JSON.\n   * @function toJSON\n   * @memberof Project\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Project.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\n  }\n\n  return Project\n})())\n\nexport { $root as default }\n","function getVersionNumber(version: string | string[] | number[]): number {\n  if (typeof version === 'string') {\n    version = version.split('.')\n  }\n\n  if (!Array.isArray(version)) return 0\n\n  version = [...version] as number[]\n\n  return version\n    .reverse()\n    .reduce<number>(\n      (previousValue: number, currentValue: number, currentIndex: number) => {\n        return (\n          previousValue + Number(currentValue) * Math.pow(1000, currentIndex)\n        )\n      },\n      0,\n    )\n}\n\nexport default getVersionNumber\n","import { IProject, IGradientColor } from 'src/proto'\n\ntype TransProject = (project: IProject) => IProject\ninterface VersionMap {\n  [key: number]: TransProject\n}\n\nfunction f1000000t1000001(project: IProject) {\n  project.layout = { ...project.layout }\n  project.layout.width = 1024\n  project.layout.height = 1024\n  project.layout.auto = true\n  project.layout.fixedSize = false\n  return project\n}\n\nfunction f1000001t1000002(project: IProject) {\n  function fixOffset(list: IGradientColor[]) {\n    const len = list.length - 1\n    list.forEach((item, idx) => {\n      item.offset = (1 / len) * idx\n    })\n  }\n  if (\n    project?.style?.fill?.gradient?.palette &&\n    project.style.fill.gradient.palette.length > 0\n  ) {\n    fixOffset(project.style.fill.gradient.palette)\n  }\n\n  if (\n    project?.style?.stroke?.gradient?.palette &&\n    project.style.stroke.gradient.palette.length > 0\n  ) {\n    fixOffset(project.style.stroke.gradient.palette)\n  }\n\n  return project\n}\n\nconst obj: VersionMap = {\n  1000000: f1000000t1000001,\n  1000001: f1000001t1000002,\n}\n\nconst verions: (keyof VersionMap)[] = Object.keys(obj)\n  .map((verion) => Number(verion))\n  .sort()\n\nfunction updateOldProject(project: IProject, version: number): IProject {\n  verions.forEach((v) => {\n    if (version <= v && obj[v]) obj[v](project)\n  })\n  return project\n}\n\nexport default updateOldProject\n","import { Project, Font } from 'src/store'\nimport { Project as ProjectProto, IProject } from 'src/proto'\nimport { Project as Project1000000 } from 'src/proto/1.0.0'\nimport { Project as Project1000001 } from 'src/proto/1.0.1'\nimport getVersionNumber from 'src/utils/getVersionNumber'\nimport updateOldProject from './updateOldProject'\nimport prefix from './prefix'\n\ninterface ProtoVersionMap {\n  [key: number]: typeof ProjectProto\n}\n\nconst oldDecodeProto: ProtoVersionMap = {\n  1000000: Project1000000,\n  1000001: Project1000001,\n}\n\nfunction toOriginBuffer(protoProject: IProject): Project {\n  const project = { ...protoProject }\n  const map = new Map()\n\n  // font\n  if (project?.style?.font?.font) {\n    project.style.font = {\n      ...(project.style.font as Font),\n      font: project.style.font.font.slice().buffer as Uint8Array,\n    }\n  }\n\n  // images\n  if (project?.glyphImages) {\n    project.glyphImages.forEach((glyphImage) => {\n      if (glyphImage.buffer) {\n        glyphImage.buffer = glyphImage.buffer.slice().buffer as Uint8Array\n      }\n      if (glyphImage.kerning) {\n        const imgKerning = new Map()\n        Object.keys(glyphImage.kerning).forEach((key) => {\n          if (glyphImage && glyphImage.kerning && glyphImage.kerning[key])\n            imgKerning.set(key, glyphImage.kerning[key] || 0)\n        })\n        glyphImage.kerning = imgKerning as {}\n      }\n    })\n\n    // project.glyphImages = new Set(project.glyphImages)\n  }\n\n  if (project?.glyphs) {\n    Object.keys(project.glyphs).forEach((k) => {\n      if (project && project.glyphs && project.glyphs[k]) {\n        const gl = project.glyphs[k]\n        const glyphKerning = new Map()\n        if (gl && gl.kerning) {\n          Object.keys(gl.kerning).forEach((key) => {\n            if (gl.kerning) glyphKerning.set(key, gl.kerning[key] || 0)\n          })\n        }\n        map.set(k, { ...gl, kerning: glyphKerning })\n      }\n    })\n  }\n\n  // fill\n  if (project?.style?.fill?.patternTexture?.buffer) {\n    project.style.fill.patternTexture.buffer =\n      project.style.fill.patternTexture.buffer.slice().buffer as Uint8Array\n  }\n\n  // stroke\n  if (project?.style?.stroke?.patternTexture?.buffer) {\n    project.style.stroke.patternTexture.buffer =\n      project.style.stroke.patternTexture.buffer.slice().buffer as Uint8Array\n  }\n\n  return {\n    ...project,\n    glyphs: map,\n    glyphImages: project.glyphImages || [],\n  } as unknown as Project\n}\n\nexport default function decodeProject(buffer: ArrayBuffer): Project {\n  if (buffer.byteLength < 17) throw new Error('error')\n  const perfixBuffer = prefix()\n  const perfixName = perfixBuffer.slice(0, perfixBuffer.byteLength - 3)\n  // const latestVersionBuffer = perfixBuffer.slice(perfixBuffer.byteLength - 3)\n  const u8 = new Uint8Array(buffer)\n  const filePrefix = u8.slice(0, perfixBuffer.byteLength)\n  const versionBuffer = filePrefix.slice(filePrefix.byteLength - 3)\n  let isSbf = true\n  perfixName.forEach((e, i) => {\n    if (filePrefix[i] !== e) isSbf = false\n  })\n  if (!isSbf) throw new Error('unknow file')\n  // const currentVersion = getVersionNumber(Array.from(latestVersionBuffer))\n  const fileVersion = getVersionNumber(Array.from(versionBuffer))\n\n  const decodeProto = oldDecodeProto[fileVersion] || ProjectProto\n  const project = decodeProto.decode(u8.slice(filePrefix.byteLength))\n\n  return toOriginBuffer(updateOldProject(project, fileVersion))\n}\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  FunctionComponent,\n} from 'react'\nimport hotkeys from 'hotkeys-js'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport { useProject } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\ninterface ExportButtonProps {\n  className?: string\n  onSave?: (config: { ext: string; type: string }) => void\n}\n\nconst ExportButton: FunctionComponent<ExportButtonProps> = (\n  props: ExportButtonProps,\n) => {\n  const { className, onSave } = props\n  const project = useProject()\n  const { setShowPreview } = project.ui\n  const { name } = project\n  const [open, setOpen] = useState(false)\n  const [val, setVal] = useState(0)\n  const [list] = useState([\n    { id: 0, ext: 'fnt', type: 'xml' },\n    { id: 1, ext: 'xml', type: 'xml' },\n    { id: 2, ext: 'fnt', type: 'text' },\n    { id: 3, ext: 'text', type: 'text' },\n  ])\n\n  const handleClickOpen = useCallback(() => {\n    setShowPreview(false)\n    setOpen(true)\n  }, [setShowPreview])\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleChange = (\n    e: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n    }>,\n  ) => {\n    setVal(e.target.value as number)\n  }\n  const handleSave = () => {\n    if (onSave)\n      onSave({\n        ext: list[val].ext,\n        type: list[val].type,\n      })\n    handleClose()\n  }\n\n  useEffect(() => {\n    hotkeys.unbind('ctrl+shift+s,command+shift+s')\n    hotkeys('ctrl+shift+s,command+shift+s', handleClickOpen)\n    return () => {\n      hotkeys.unbind('ctrl+shift+s,command+shift+s')\n    }\n  }, [handleClickOpen])\n\n  return (\n    <>\n      <Button\n        className={className}\n        title='Export BitmapFont (⌘⇧ + S)'\n        onClick={handleClickOpen}\n      >\n        Export\n      </Button>\n      <Dialog onClose={handleClose} open={open} fullWidth maxWidth='xs'>\n        <DialogTitle>Export Config</DialogTitle>\n        <DialogContent dividers>\n          <GridInput before='Export Type:' childrenWidth={8}>\n            <Select displayEmpty value={val} onChange={handleChange}>\n              {list.map((item) => (\n                <MenuItem value={item.id} key={item.id}>\n                  {`${name}.${item.ext} (BMFont ${item.type.toUpperCase()})`}\n                </MenuItem>\n              ))}\n            </Select>\n          </GridInput>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleSave} color='default'>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default ExportButton\n","import React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from 'react'\nimport { toJS } from 'mobx'\nimport hotkeys from 'hotkeys-js'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nimport { useWorkspace } from 'src/store/hooks'\n\nimport readFile from 'src/utils/readFile'\n\nimport outputFile from 'src/file/outputFile'\nimport saveProject from 'src/file/saveProject'\nimport decodeProject from 'src/file/decodeProject'\n\nimport ExportButton from './ExportButton'\n\nconst useStyles = makeStyles(({ zIndex, spacing }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      zIndex: zIndex.appBar,\n    },\n    appName: {\n      fontSize: '1.25rem',\n      fontWeight: 'bolder',\n      marginRight: spacing(4),\n    },\n    appNameSup: {\n      fontWeight: 'lighter',\n      fontSize: '0.5em',\n      marginLeft: '0.5rem',\n    },\n    btn: {\n      textTransform: 'none',\n    },\n  }),\n)\n\nconst TitleBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const [toast, setToast] = useState<{\n    open: boolean\n    component: React.ReactNode | null\n  }>({ open: false, component: null })\n  const worckSpace = useWorkspace()\n  const labelRef = useRef<HTMLLabelElement>(null)\n  const { addProject } = worckSpace\n  const project = worckSpace.currentProject\n  const handleLoad = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (e.target?.files && e.target.files[0]) {\n      readFile(e.target.files[0]).then((buffer) => {\n        try {\n          if (buffer instanceof ArrayBuffer) addProject(decodeProject(buffer))\n        } catch (err) {\n          setToast({\n            open: true,\n            component: (\n              <Box display='flex' alignItems='center'>\n                <ErrorIcon />\n                {`${(err as Error).toString()}`}\n              </Box>\n            ),\n          })\n        }\n      })\n    }\n  }\n\n  const handleNewProject = useCallback(\n    (e: { preventDefault(): void }) => {\n      e.preventDefault()\n      addProject()\n      return false\n    },\n    [addProject],\n  )\n\n  const handleSaveProject = useCallback(\n    (e: { preventDefault(): void }) => {\n      e.preventDefault()\n      saveProject(toJS(project))\n      return false\n    },\n    [project],\n  )\n\n  const handleSaveBitmapFont = useCallback(\n    (config) => {\n      outputFile(project, config)\n    },\n    [project],\n  )\n\n  const handleOpenProject = useCallback((e: { preventDefault(): void }) => {\n    e.preventDefault()\n    if (labelRef.current) labelRef.current.click()\n    return false\n  }, [])\n\n  const handleToastClose = () => {\n    setToast((t) => {\n      return {\n        ...t,\n        open: false,\n      }\n    })\n  }\n\n  useEffect(() => {\n    hotkeys.unbind('alt+n,control+n')\n    hotkeys.unbind('ctrl+s')\n    hotkeys.unbind('ctrl+o,command+o')\n    hotkeys('alt+n,control+n', handleNewProject)\n    hotkeys('ctrl+s', handleSaveProject)\n    hotkeys('ctrl+o,command+o', handleOpenProject)\n    return () => {\n      hotkeys.unbind('alt+n,control+n')\n      hotkeys.unbind('ctrl+s')\n      hotkeys.unbind('ctrl+o,command+o')\n    }\n  }, [handleNewProject, handleOpenProject, handleSaveProject])\n\n  return (\n    <Box\n      className={classes.root}\n      bgcolor='background.titleBar'\n      paddingX={4}\n      display='flex'\n      alignItems='center'\n    >\n      {/* lowing modifiers: ⇧, shift, option, ⌥, alt, ctrl, control, command, and ⌘. */}\n      <Typography variant='h1' className={classes.appName}>\n        SnowB BMF\n        <sup className={classes.appNameSup}>BETA</sup>\n      </Typography>\n      <Box flex='auto' paddingX={4}>\n        <Button\n          className={classes.btn}\n          title='New Project (ALT + N)'\n          onClick={handleNewProject}\n        >\n          New\n        </Button>\n        <Button\n          className={classes.btn}\n          title='Open Project (⌘ + O)'\n          component='label'\n          ref={labelRef}\n        >\n          Open\n          <input type='file' onChange={handleLoad} accept='.sbf' hidden />\n        </Button>\n        <Button\n          className={classes.btn}\n          title='Save Project (⌘ + S)'\n          onClick={handleSaveProject}\n        >\n          Save\n        </Button>\n        <ExportButton className={classes.btn} onSave={handleSaveBitmapFont} />\n      </Box>\n      <IconButton\n        size='small'\n        component='a'\n        href='https://github.com/SilenceLeo/snowb-bmf'\n        target='_blank'\n        title='GitHub'\n      >\n        <GitHubIcon />\n      </IconButton>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={toast.open}\n        onClose={handleToastClose}\n        message={toast.component}\n      />\n    </Box>\n  )\n}\nexport default observer(TitleBar)\n","import { saveAs } from 'file-saver'\nimport { Project } from 'src/store'\nimport { Project as ProjectProto, IProject } from 'src/proto'\n\nimport prefix from './prefix'\n\nexport default function saveProject(project: Project): void {\n  // font\n  if (project.style.font.font) {\n    project.style.font.font = new Uint8Array(project.style.font.font)\n  }\n\n  // images\n  project.glyphImages.forEach((glyphImage) => {\n    if (glyphImage.buffer) glyphImage.buffer = new Uint8Array(glyphImage.buffer)\n  })\n\n  // fill\n  if (project.style.fill.patternTexture.buffer) {\n    project.style.fill.patternTexture.buffer = new Uint8Array(\n      project.style.fill.patternTexture.buffer,\n    )\n  }\n\n  // stroke\n  if (project.style.stroke.patternTexture.buffer) {\n    project.style.stroke.patternTexture.buffer = new Uint8Array(\n      project.style.stroke.patternTexture.buffer,\n    )\n  }\n\n  const protoProject = ProjectProto.create((project as unknown) as IProject)\n  const projectBuffer = ProjectProto.encode(protoProject).finish()\n  const perfixBuffer = prefix()\n\n  const buffer = new Uint8Array(\n    perfixBuffer.byteLength + projectBuffer.byteLength,\n  )\n  buffer.set(perfixBuffer, 0)\n  buffer.set(projectBuffer, perfixBuffer.byteLength)\n\n  saveAs(new Blob([buffer]), `${project.name}.sbf`)\n}\n","import JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\nimport { Project } from 'src/store'\nimport getXmlString from './getXmlString'\nimport getLuaString from './getLuaString'\nimport getTextString from './getTextString'\nimport toOutputInfo from './toOutputInfo'\n\nexport default function outputFile(\n  project: Project,\n  config = {\n    type: 'xml',\n    ext: 'fnt',\n  },\n): void {\n  const zip = new JSZip()\n  const { packCanvas, name } = project\n  const bmfont = toOutputInfo(project)\n  let text = ''\n\n  switch (config.type) {\n    case 'text':\n      text = getTextString(bmfont)\n      break\n    case 'lua':\n      text = getLuaString(bmfont)\n      break\n    default:\n      text = getXmlString(bmfont)\n      break\n  }\n\n  zip.file(`${name}.${config.ext}`, text)\n  if (packCanvas) {\n    packCanvas.toBlob((blob) => {\n      if (blob) zip.file(`${name}.png`, blob)\n      zip\n        .generateAsync({ type: 'blob' })\n        .then((content) => saveAs(content, `${name}.zip`))\n    })\n  }\n}\n","import React, { FunctionComponent } from 'react'\nimport { SketchPicker, ColorResult } from 'react-color'\nimport { useTheme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper'\n\nexport interface ChildrenProps {\n  open: boolean\n  color: string\n  placement: PopperPlacementType\n  anchorEl: HTMLDivElement | null\n  onChange(color: string): void\n}\n\nconst usePickerStyle = () => {\n  const theme = useTheme()\n  const { palette } = theme\n\n  if (palette.type === 'light') return {}\n\n  return {\n    default: {\n      picker: {\n        background: palette.background.titleBar,\n        shadow: theme.shadows[24],\n      },\n      alpha: {\n        background: '#fff',\n      },\n      color: {\n        background: '#fff',\n      },\n    },\n  }\n}\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    picker: {\n      '& *': {\n        color: `${palette.text.primary} !important`,\n        borderColor: `${palette.divider} !important`,\n      },\n      '& input': {\n        background: 'none',\n        color: `${palette.text.primary} !important`,\n        boxShadow: `none !important`,\n        border: `1px solid ${palette.divider} !important`,\n      },\n    },\n  }),\n)\n\nconst WrappedSketchPicker: FunctionComponent<Partial<ChildrenProps>> = (\n  props: Partial<ChildrenProps>,\n) => {\n  const { open, anchorEl, color, onChange, placement } = props\n  const classes = useStyles()\n  const pickerStyle = usePickerStyle()\n  return (\n    <Popper\n      open={!!open}\n      anchorEl={anchorEl}\n      placement={placement || 'bottom'}\n      style={{ zIndex: 999999 }}\n    >\n      <SketchPicker\n        color={color}\n        styles={pickerStyle}\n        className={classes.picker}\n        onChange={({ rgb }: ColorResult) => {\n          if (onChange)\n            onChange(\n              `rgba(${rgb.r},${rgb.g},${rgb.b},${\n                typeof rgb.a === 'undefined' ? 1 : rgb.a\n              })`,\n            )\n        }}\n      />\n    </Popper>\n  )\n}\n\nexport default WrappedSketchPicker\n","import React, { FunctionComponent, useRef, useState } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport WrappedSketchPicker from '../WrappedSketchPicker'\n\nexport interface ColorInputProps {\n  color?: string\n  onChange?: (color: string) => void\n}\n\nconst useStyles = makeStyles(({ palette, bgPixel }: Theme) =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n    swatch: {\n      ...bgPixel,\n      display: 'inline-block',\n      cursor: 'pointer',\n    },\n    color: {\n      width: '46px',\n      height: '24px',\n      border: `5px solid ${palette.primary.main}`,\n      backgroundColor: (props: ColorInputProps) => props.color || '',\n    },\n  }),\n)\n\nconst ColorInput: FunctionComponent<ColorInputProps> = (\n  props: ColorInputProps,\n) => {\n  const { color, onChange } = props\n  const classes = useStyles(props)\n  const anchorEl = useRef(null)\n  const [open, setOpen] = useState(false)\n\n  return (\n    <ClickAwayListener\n      mouseEvent='onMouseDown'\n      onClickAway={() => setOpen(false)}\n    >\n      <div aria-hidden className={classes.swatch} ref={anchorEl}>\n        <div\n          aria-hidden\n          className={classes.color}\n          onClick={() => setOpen(!open)}\n        />\n        <WrappedSketchPicker\n          open={open}\n          anchorEl={anchorEl.current}\n          color={color || '#000000'}\n          onChange={onChange}\n        />\n      </div>\n    </ClickAwayListener>\n  )\n}\n\nexport default ColorInput\n","import React, { FunctionComponent } from 'react'\n\nimport GridInput from 'src/app/components/GridInput'\nimport ColorInput from 'src/app/components/ColorInput'\n\ninterface FormColorProps {\n  color: string\n  onChange(color: string): void\n}\n\nconst FormColor: FunctionComponent<FormColorProps> = (\n  props: FormColorProps,\n) => {\n  const { color, onChange } = props\n\n  return (\n    <GridInput before='Color:' childrenWidth={3}>\n      <ColorInput color={color} onChange={onChange} />\n    </GridInput>\n  )\n}\n\nexport default FormColor\n","import React, {\n  FunctionComponent,\n  DetailedHTMLProps,\n  HTMLAttributes,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\ninterface ColorStopPorps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  left?: string | number\n  top?: string | number\n  color: string\n  isActive: boolean\n}\n\nconst useStyles = makeStyles(({ bgPixel, palette }: Theme) =>\n  createStyles({\n    root: {\n      ...bgPixel,\n      width: '12px',\n      height: '12px',\n      border: `solid ${palette.primary.main}`,\n      borderWidth: '0 1px 1px',\n      position: 'absolute',\n      cursor: 'pointer',\n      marginLeft: '-6px',\n      left: (props) => props.left || 0,\n      zIndex: (props) => (props.isActive ? 2 : 1),\n      '&:before,&:after': {\n        position: 'absolute',\n        content: '\"\"',\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        left: '0',\n      },\n      '&:before': {\n        top: '-6px',\n        left: '-1px',\n        borderWidth: '0 6px 6px 6px',\n        borderColor: `transparent transparent ${palette.primary.dark} transparent`,\n      },\n      '&:after': {\n        top: '-5px',\n        borderWidth: '0 5px 5px 5px',\n        borderColor: (props) => {\n          const activeColor =\n            palette.type === 'dark'\n              ? palette.common.white\n              : palette.common.black\n\n          return `transparent transparent ${\n            props.isActive ? activeColor : palette.grey[600]\n          } transparent`\n        },\n      },\n    },\n    color: {\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none',\n      backgroundColor: ({ color }: ColorStopPorps) => color || 'transparent',\n    },\n  }),\n)\n\nconst ColorStop: FunctionComponent<ColorStopPorps> = (\n  props: ColorStopPorps,\n) => {\n  const { left, top, color, isActive, className, ...divProps } = props\n  const classes = useStyles({ left, top, color, isActive })\n\n  return (\n    <div className={clsx(classes.root, className)} {...divProps}>\n      <div className={classes.color} />\n    </div>\n  )\n}\n\nexport default ColorStop\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useRef,\n  MutableRefObject,\n  useState,\n  useEffect,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport ColorStop from './ColorStop'\n\nexport interface AddPaletteItem {\n  offset: number\n  color: string\n}\n\nexport interface PaletteItem extends AddPaletteItem {\n  id: number\n  offset: number\n  color: string\n}\n\ninterface ColorStopsHolderProps {\n  className?: string\n  palette: PaletteItem[]\n  activeId?: number\n  onAdd(offset: number): void\n  onUpdate(paletteItem: Partial<AddPaletteItem>, isDelete?: boolean): void\n  onSelect(id?: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '17px',\n      position: 'relative',\n      cursor: 'crosshair',\n    },\n  }),\n)\n\nconst ColorStopsHolder: FunctionComponent<ColorStopsHolderProps> = (\n  props: ColorStopsHolderProps,\n) => {\n  const { className, palette, activeId, onAdd, onUpdate, onSelect } = props\n  const classes = useStyles(props)\n  const [width, setWidth] = useState(0)\n  const [startPoint, setStartPoint] = useState({ x: 0, y: 0, offset: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const rootRef: MutableRefObject<HTMLDivElement | null> = useRef(null)\n\n  useEffect(() => {\n    if (rootRef.current) {\n      setWidth(rootRef.current.clientWidth)\n    }\n  }, [rootRef])\n\n  const handleAddPalette = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    const target = rootRef.current\n    if (!target || e.buttons !== 1) return\n    const { left } = target.getBoundingClientRect()\n    const offset = (e.clientX - left) / width\n    onAdd(offset)\n    setIsDragging(true)\n    setStartPoint({ x: e.clientX, y: e.clientY, offset })\n  }\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    paletteItem: PaletteItem,\n  ) => {\n    if (e.buttons !== 1) return\n    e.preventDefault()\n    e.stopPropagation()\n    setStartPoint({ x: e.clientX, y: e.clientY, offset: paletteItem.offset })\n    setIsDragging(true)\n    onSelect(paletteItem.id)\n  }\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging || !activeId) return\n      if (e.buttons !== 1) {\n        setIsDragging(false)\n        return\n      }\n      const idx = palette.findIndex(\n        (paletteItem) => paletteItem.id === activeId,\n      )\n\n      if (idx < 0) return\n      const newPalette = [...palette]\n\n      if (Math.abs(e.clientY - startPoint.y) > 50) {\n        onUpdate(newPalette[idx], true)\n        return\n      }\n\n      const paletteItem = newPalette[idx]\n      const offset = Math.min(\n        Math.max((e.clientX - startPoint.x) / width + startPoint.offset, 0),\n        1,\n      )\n      newPalette[idx] = { ...paletteItem, offset }\n      onUpdate({ offset })\n    },\n    [\n      activeId,\n      isDragging,\n      onUpdate,\n      palette,\n      startPoint.offset,\n      startPoint.x,\n      startPoint.y,\n      width,\n    ],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      ref={rootRef}\n      className={clsx(classes.root, className)}\n      onMouseDown={handleAddPalette}\n    >\n      {palette.map((paletteItem) => (\n        <ColorStop\n          key={paletteItem.id}\n          left={width * paletteItem.offset}\n          color={paletteItem.color}\n          isActive={paletteItem.id === activeId}\n          onMouseDown={(e) => handleMouseDown(e, paletteItem)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorStopsHolder\n","import React, { FunctionComponent, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nexport interface PaletteItem {\n  id: number | string\n  offset: number\n  color: string\n}\n\ninterface PaletteProps {\n  width?: number | string\n  height?: number | string\n  palette: PaletteItem[]\n}\n\nconst useStyles = makeStyles(({ bgPixel }) => ({\n  root: {\n    ...bgPixel,\n    width: (props: PaletteProps) => props.width || '100%',\n    height: (props: PaletteProps) => props.height || '100%',\n    border: '1px solid #ccc',\n  },\n  svg: {\n    width: '100%',\n    height: '100%',\n    verticalAlign: 'top',\n  },\n}))\n\nconst Palette: FunctionComponent<PaletteProps> = (\n  props: PaletteProps,\n): JSX.Element => {\n  const classes = useStyles(props)\n  const { palette } = props\n  const [id] = useState(`palette_${Math.random().toString().substr(2, 9)}`)\n  const sortedPalette = [...palette].sort(\n    ({ offset: offset1 }, { offset: offset2 }) => offset1 - offset2,\n  )\n\n  return (\n    <div className={classes.root}>\n      <svg className={classes.svg}>\n        <defs>\n          <linearGradient id={id} x1='0' y1='0.5' x2='1' y2='0.5'>\n            {sortedPalette.map((item) => (\n              <stop\n                key={item.id}\n                offset={item.offset}\n                style={{ stopColor: item.color }}\n              />\n            ))}\n          </linearGradient>\n        </defs>\n        <rect x='0' y='0' width='100%' height='100%' fill={`url(#${id})`} />\n      </svg>\n    </div>\n  )\n}\n\nexport default Palette\n","import React, { FunctionComponent, useRef, useState, useEffect } from 'react'\nimport Color from 'color'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport ColorStopsHolder, {\n  AddPaletteItem,\n  PaletteItem,\n} from './ColorStopsHolder'\nimport Palette from '../Palette'\n\nexport interface GradientBuilderProps {\n  children?: JSX.Element\n  palette: PaletteItem[]\n  onAdd: (addPaletteItem: AddPaletteItem) => void\n  onUpdate: (palette: PaletteItem[]) => void\n}\n\nexport interface ChildrenProps {\n  open: boolean\n  anchorEl: HTMLDivElement | null\n  color: string\n  onChange(color: string): void\n}\n\nconst GradientBuilder: FunctionComponent<GradientBuilderProps> = (\n  props: GradientBuilderProps,\n) => {\n  const { children, palette, onUpdate, onAdd } = props\n  const rootEl: React.MutableRefObject<HTMLDivElement | null> = useRef(null)\n  const [oldPalette, setOldPalette] = useState([...palette])\n  const [activeId, setActiveId] = useState<number>(0)\n  const [activeColor, setActiveColor] = useState<string>('')\n  const [isAdd, setIsAdd] = useState(false)\n\n  useEffect(() => {\n    if (isAdd) {\n      const newIds = palette.map(({ id }) => id)\n      const oldIds = oldPalette.map(({ id }) => id)\n      const diff = Array.from(new Set([...newIds, ...oldIds])).filter(\n        (id) => !oldIds.includes(id),\n      )\n      if (diff.length > 0) {\n        setActiveId(diff[0])\n      }\n      setIsAdd(() => false)\n    }\n  }, [palette, isAdd, oldPalette])\n\n  useEffect(() => {\n    setOldPalette([...palette])\n  }, [palette])\n\n  useEffect(() => {\n    if (activeId) {\n      const paletteItem = palette.find((item) => item.id === activeId)\n      if (paletteItem) {\n        setActiveColor(paletteItem.color)\n      }\n    }\n  }, [activeId, palette])\n\n  const handleAdd = (offset: number) => {\n    const list = [...palette]\n    const current = { offset, color: '#000' }\n    let left: PaletteItem | undefined\n    let right: PaletteItem | undefined\n    setActiveId(0)\n\n    list.forEach((item) => {\n      if (\n        item.offset < current.offset &&\n        (!left || left.offset < item.offset)\n      ) {\n        left = item\n      } else if (!right || right.offset > item.offset) {\n        right = item\n      }\n    })\n\n    if (left && right) {\n      const offsetSpace =\n        (current.offset - left.offset) / (right.offset - left.offset)\n      const leftColor = Color(left.color)\n      const rightColor = Color(right.color)\n\n      const r =\n        (rightColor.red() - leftColor.red()) * offsetSpace + leftColor.red()\n      const g =\n        (rightColor.green() - leftColor.green()) * offsetSpace +\n        leftColor.green()\n      const b =\n        (rightColor.blue() - leftColor.blue()) * offsetSpace + leftColor.blue()\n      const a =\n        (rightColor.alpha() - leftColor.alpha()) * offsetSpace +\n        leftColor.alpha()\n      current.color = `rgba(${Math.round(r)},${Math.round(g)},${Math.round(\n        b,\n      )},${Math.round(a)})`\n    } else if (left || right) {\n      current.color = ((left || right) as PaletteItem).color\n    }\n\n    onAdd(current)\n    setIsAdd(true)\n  }\n\n  const handleUpdate = (item: Partial<AddPaletteItem>, isDelete = false) => {\n    if (!activeId) return\n\n    const newPalette = [...palette]\n    const idx = newPalette.findIndex(\n      (paletteItem) => paletteItem.id === activeId,\n    )\n    if (isDelete) {\n      onUpdate([...newPalette.slice(0, idx), ...newPalette.slice(idx + 1)])\n      setActiveId(0)\n    } else {\n      const updateItem = { ...newPalette[idx], ...item }\n      onUpdate([\n        ...newPalette.slice(0, idx),\n        updateItem,\n        ...newPalette.slice(idx + 1),\n      ])\n    }\n  }\n\n  return (\n    <ClickAwayListener\n      mouseEvent='onMouseDown'\n      onClickAway={() => setActiveId(0)}\n    >\n      <div ref={rootEl}>\n        <Palette palette={palette} height='35px' />\n        <ColorStopsHolder\n          palette={palette}\n          activeId={activeId}\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          onSelect={(id) => setActiveId(id || 0)}\n        />\n        {children\n          ? React.cloneElement(children, {\n              open: !!activeId || isAdd,\n              anchorEl: rootEl.current,\n              color: activeColor,\n              onChange: (color: string) =>\n                handleUpdate({\n                  color,\n                }),\n            })\n          : null}\n      </div>\n    </ClickAwayListener>\n  )\n}\nexport default GradientBuilder\n","import React, {\n  useState,\n  useRef,\n  useEffect,\n  FunctionComponent,\n  useCallback,\n} from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nexport interface AnglePickerProps {\n  width?: number\n  angle: number\n  onChange(angle: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: (props: AnglePickerProps) =>\n        props.width ? `${props.width}px` : '36px',\n      height: (props) => (props.width ? `${props.width}px` : '36px'),\n      position: 'relative',\n      cursor: 'crosshair',\n      overflow: 'hidden',\n      borderRadius: '100%',\n      background: '#FFF',\n    },\n    point: {\n      width: '6px',\n      height: '6px',\n      borderRadius: '100%',\n      position: 'relative',\n      left: '50%',\n      top: '50%',\n      marginTop: '-2px',\n      background: '#000',\n      pointerEvents: 'none',\n      transformOrigin: `0 50%`,\n      transform: (props) =>\n        `rotate(${props.angle || 0}deg) translate(${\n          (props.width || 36) / 2 - 8\n        }px, 0)`,\n    },\n  }),\n)\n\nconst AnglePicker: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { onChange } = props\n  const rootRef = useRef<HTMLDivElement>(null)\n  const [isDragging, setIsDragging] = useState(false)\n  const classes = useStyles(props)\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent> | MouseEvent) => {\n      if (!rootRef.current) return\n\n      const { clientX, clientY } = e\n      const bounds = rootRef.current.getBoundingClientRect()\n      const radians = Math.atan2(\n        clientY - (bounds.y + bounds.height / 2),\n        clientX - (bounds.x + bounds.width / 2),\n      )\n      onChange(Math.round(radians * (180 / Math.PI)))\n    },\n    [onChange],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!rootRef.current) return\n    setIsDragging(true)\n    handleMouseMove(e)\n  }\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      className={classes.root}\n      ref={rootRef}\n      onMouseDown={handleMouseDown}\n    >\n      <div className={classes.point} />\n    </div>\n  )\n}\n\nexport default AnglePicker\n","import React, { FunctionComponent } from 'react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\nimport AnglePicker, { AnglePickerProps } from 'src/app/components/AnglePicker'\n\nconst FormAngle: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { angle, onChange } = props\n\n  return (\n    <GridInput\n      before='Angle:'\n      after={<AnglePicker width={24} angle={angle} onChange={onChange} />}\n    >\n      <Input\n        value={angle}\n        fullWidth\n        type='number'\n        onChange={(e) => onChange(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default FormAngle\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport GradientPicker from 'src/app/components/GradientPicker'\nimport WrappedSketchPicker from 'src/app/components/WrappedSketchPicker'\nimport { Gradient, GradientType } from 'src/store'\nimport GridInput from 'src/app/components/GridInput'\n\nimport FormAngle from '../FormAngle'\n\ninterface FormGradientProps {\n  gradient: Gradient\n}\n\nconst FormGradient: FunctionComponent<FormGradientProps> = (\n  props: FormGradientProps,\n) => {\n  const {\n    gradient: {\n      type,\n      angle,\n      palette,\n      addColor,\n      updatePalette,\n      setAngle,\n      setType,\n    },\n  } = props\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <FormAngle angle={angle} onChange={setAngle} />\n      </Box>\n\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Type:' component='div' childrenWidth={8}>\n          <RadioGroup\n            row\n            name='type'\n            value={type}\n            onChange={(e) => setType(Number(e.target.value))}\n            style={{ flexWrap: 'nowrap' }}\n          >\n            <FormControlLabel\n              value={GradientType.LINEAR}\n              control={<Radio size='small' color='default' />}\n              label='Linear'\n            />\n            <FormControlLabel\n              value={GradientType.RADIAL}\n              control={<Radio size='small' color='default' />}\n              label='Radial'\n            />\n          </RadioGroup>\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GradientPicker\n          palette={palette}\n          onAdd={(e) => addColor(e.offset, e.color)}\n          onUpdate={updatePalette}\n        >\n          <WrappedSketchPicker />\n        </GradientPicker>\n      </Box>\n    </>\n  )\n}\n\nexport default observer(FormGradient)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\nimport readFile from 'src/utils/readFile'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: theme.spacing(12),\n      height: theme.spacing(12),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n      border: `1px solid ${theme.palette.primary.main}`,\n      cursor: 'pointer',\n      ...theme.bgPixel,\n    },\n    image: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      pointerEvents: 'none',\n    },\n  }),\n)\n\ninterface FileSelectorProps {\n  src: string\n  onChange(image: ArrayBuffer): void\n}\n\nconst FileSelector: FunctionComponent<FileSelectorProps> = (\n  props: FileSelectorProps,\n) => {\n  const { src, onChange } = props\n  const classes = useStyles()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) return\n    if (e.target.files.length > 0) {\n      readFile(e.target.files[0]).then((buffer) => {\n        if (buffer instanceof ArrayBuffer) onChange(buffer)\n      })\n    }\n  }\n\n  return (\n    <Box component='label' className={classes.root}>\n      <input\n        hidden\n        type='file'\n        multiple\n        accept='image/*'\n        onChange={handleChange}\n      />\n      <img className={classes.image} src={src} alt='' />\n    </Box>\n  )\n}\n\nexport default FileSelector\n","import React, { FunctionComponent } from 'react'\n\nimport GridInput from 'src/app/components/GridInput'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport { PatternTexture, Repetition } from 'src/store'\n\nimport FileSelector from './FileSelector'\n\ninterface FormImageProps {\n  patternTexture: PatternTexture\n  scale: number\n  src: string\n  // onChangeImage(buffer: ArrayBuffer): void\n  // onChangeScale(scale: number): void\n}\n\nconst FormImage: FunctionComponent<FormImageProps> = (\n  props: FormImageProps,\n) => {\n  const { patternTexture } = props\n  const {\n    src,\n    scale,\n    repetition,\n    setRepetition,\n    setScale,\n    setImage,\n  } = patternTexture\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <GridInput\n          component='div'\n          before='Scale:'\n          after={<FileSelector src={src} onChange={setImage} />}\n        >\n          <Input\n            value={scale}\n            fullWidth\n            type='number'\n            inputProps={{ min: 0.01, step: 0.1 }}\n            onChange={(e) => setScale(Number(e.target.value))}\n          />\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Repeat:'>\n          <Select\n            value={repetition}\n            onChange={(e) => setRepetition(e.target.value as Repetition)}\n            displayEmpty\n            fullWidth\n          >\n            <MenuItem value='repeat'>Repeat</MenuItem>\n            <MenuItem value='repeat-x'>Repeat-x</MenuItem>\n            <MenuItem value='repeat-y'>Repeat-y</MenuItem>\n            <MenuItem value='no-repeat'>No Repeat</MenuItem>\n          </Select>\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default FormImage\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nimport { FontStyleConfig, FillType } from 'src/store'\n\nimport FormColor from '../FormColor'\nimport FormGradient from '../FormGradient'\nimport FormImage from '../FormImage'\n\ninterface FormFillProps {\n  config: FontStyleConfig\n}\n\nconst FormFill: FunctionComponent<FormFillProps> = (props: FormFillProps) => {\n  const {\n    config: { type, color, gradient, patternTexture, setType, setColor },\n  } = props\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <RadioGroup\n          row\n          name='type'\n          value={type}\n          onChange={(e) => setType(Number(e.target.value))}\n        >\n          <FormControlLabel\n            value={FillType.SOLID}\n            control={<Radio size='small' color='default' />}\n            label='Solid'\n          />\n          <FormControlLabel\n            value={FillType.GRADIENT}\n            control={<Radio size='small' color='default' />}\n            label='Gradient'\n          />\n          <FormControlLabel\n            value={FillType.IMAGE}\n            control={<Radio size='small' color='default' />}\n            label='Image'\n          />\n        </RadioGroup>\n      </Box>\n      {type === 0 ? (\n        <Box paddingX={2} marginY={4}>\n          <FormColor color={color} onChange={setColor} />\n        </Box>\n      ) : null}\n      {type === 1 ? <FormGradient gradient={gradient} /> : null}\n      {type === 2 ? (\n        <FormImage\n          patternTexture={patternTexture}\n          src={patternTexture.src}\n          scale={patternTexture.scale}\n          // onChangeImage={patternTexture.setImage}\n          // onChangeScale={patternTexture.setScale}\n        />\n      ) : null}\n    </>\n  )\n}\n\nexport default observer(FormFill)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useFill } from 'src/store/hooks'\nimport FormFill from '../../../common/FormFill'\n\nconst Fill: FunctionComponent<unknown> = () => {\n  const fill = useFill()\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Fill</Typography>\n      </Box>\n      <FormFill config={fill} />\n    </>\n  )\n}\n\nexport default observer(Fill)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\n\nimport FormFill from 'src/app/layout/common/FormFill'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Stroke: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { stroke, useStroke, setUseStroke } = useStyle()\n  const { setWidth, lineJoin, setLineJoin, lineCap, setLineCap } = stroke\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Stroke\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useStroke}\n          onChange={(e) => setUseStroke(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useStroke ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Width:' after='px'>\n            <Input\n              value={stroke?.width || 0}\n              fullWidth\n              type='number'\n              inputProps={{ min: 0 }}\n              onChange={(e) => setWidth(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Cap:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineCap('butt')}\n                variant={lineCap === 'butt' ? 'contained' : 'outlined'}\n              >\n                Butt\n              </Button>\n              <Button\n                onClick={() => setLineCap('round')}\n                variant={lineCap === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineCap('square')}\n                variant={lineCap === 'square' ? 'contained' : 'outlined'}\n              >\n                Square\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Join:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineJoin('miter')}\n                variant={lineJoin === 'miter' ? 'contained' : 'outlined'}\n              >\n                Miter\n              </Button>\n              <Button\n                onClick={() => setLineJoin('round')}\n                variant={lineJoin === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineJoin('bevel')}\n                variant={lineJoin === 'bevel' ? 'contained' : 'outlined'}\n              >\n                Bevel\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n        <FormFill config={stroke} />\n      </div>\n    </>\n  )\n}\n\nexport default observer(Stroke)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\nimport FormColor from '../../../common/FormColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Shadow: FunctionComponent<unknown> = () => {\n  const { shadow, useShadow, setUseShadow } = useStyle()\n  const { setOffsetX, setOffsetY, setBlur, setColor } = shadow\n  const classes = useStyles()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Shadow\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useShadow}\n          onChange={(e) => setUseShadow(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useShadow ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset X:' after='px'>\n            <Input\n              value={shadow?.offsetX || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetX(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset Y:' after='px'>\n            <Input\n              value={shadow?.offsetY || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetY(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Blur:' after='px'>\n            <Input\n              value={shadow?.blur || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              inputProps={{ style: { textAlign: 'right' }, min: 0 }}\n              onChange={(e) => setBlur(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <FormColor color={shadow?.color || ''} onChange={setColor} />\n        </Box>\n      </div>\n    </>\n  )\n}\nexport default observer(Shadow)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useStyle } from 'src/store/hooks'\nimport FormColor from '../../../common/FormColor'\n\nconst BackgroundColor: FunctionComponent<unknown> = () => {\n  const { bgColor, setBgColor } = useStyle()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography>Background Color</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FormColor color={bgColor || ''} onChange={setBgColor} />\n      </Box>\n    </>\n  )\n}\n\nexport default observer(BackgroundColor)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Fill from './modules/Fill'\nimport Stroke from './modules/Stroke'\nimport Shadow from './modules/Shadow'\nimport BackgroundColor from './modules/BackgroundColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      width: '256px',\n    },\n  }),\n)\n\nconst RightBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box\n      bgcolor='background.sidebar'\n      display='flex'\n      flexDirection='column'\n      overflow='hidden'\n      className={classes.root}\n    >\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\n        <Typography variant='subtitle2'>Style Config</Typography>\n      </Box>\n      <Box flex={1} height={0} overflow='hidden auto'>\n        <Fill />\n        <Divider />\n        <Stroke />\n        <Divider />\n        <Shadow />\n        <Divider />\n        <BackgroundColor />\n      </Box>\n    </Box>\n  )\n}\n\nexport default RightBar\n","import { useEffect, useCallback, RefObject, DependencyList } from 'react'\n\ninterface DeltaInfo {\n  deltaScale: number\n  deltaX: number\n  deltaY: number\n}\n\ninterface WheelCallback {\n  (deltaInfo: DeltaInfo): void\n}\n\nfunction useWheel(\n  ref: RefObject<HTMLElement>,\n  onWheel: WheelCallback,\n  deps: DependencyList = [],\n): void {\n  const callback = useCallback(onWheel, [onWheel, deps])\n  const handleWheel = useCallback(\n    (e: WheelEvent) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const { ctrlKey, altKey, deltaX, deltaY } = e\n      if (ctrlKey) {\n        let d = -0.01\n        if (Math.abs(deltaY) > 50) d *= 0.1\n        callback({ deltaScale: deltaY * d, deltaX: 0, deltaY: 0 })\n      } else {\n        let x = -deltaX\n        let y = -deltaY\n        if (deltaX === 0 && altKey && Math.abs(deltaY) > 50) {\n          x = -deltaY\n          y = 0\n        }\n        callback({\n          deltaX: x,\n          deltaY: y,\n          deltaScale: 0,\n        })\n      }\n    },\n    [callback],\n  )\n\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    const dom = ref.current\n\n    dom.addEventListener('wheel', handleWheel, {\n      passive: false,\n    })\n\n    return () => dom.removeEventListener('wheel', handleWheel)\n  }, [ref, handleWheel])\n}\nexport default useWheel\n","import {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  DependencyList,\n} from 'react'\n\ninterface OffsetInfo {\n  offsetX: number\n  offsetY: number\n}\n\ninterface WheelCallback {\n  (offsetInfo: OffsetInfo): void\n}\n\nconst point = {\n  x: 0,\n  y: 0,\n}\n\nfunction useSpaceDrag<T extends HTMLElement>(\n  onMove: WheelCallback,\n  deps: DependencyList = [],\n): [0 | 1 | 2, (e: React.MouseEvent<T, MouseEvent>) => void] {\n  const [moveState, setMoveState] = useState({\n    ks: false,\n    ms: false,\n  })\n\n  const dragStatus = useMemo(() => {\n    if (moveState.ks && moveState.ms) return 2\n    if (moveState.ks) return 1\n    return 0\n  }, [moveState.ks, moveState.ms])\n\n  const moveCallback = useCallback(onMove, [onMove, ...deps])\n\n  const handleKeyEvent = useCallback(\n    (e: KeyboardEvent) => {\n      const state = e.keyCode === 32 && e.type === 'keydown'\n      if (moveState.ks === state) return\n      setMoveState((s) => {\n        return {\n          ...s,\n          ks: e.keyCode === 32 && e.type === 'keydown',\n        }\n      })\n    },\n    [moveState.ks],\n  )\n\n  const handleMouseDown = (e: React.MouseEvent<T, MouseEvent>) => {\n    if (!moveState.ks) return\n    const { clientX, clientY } = e\n    point.x = clientX\n    point.y = clientY\n    setMoveState((s) => {\n      return {\n        ...s,\n        ms: true,\n      }\n    })\n  }\n\n  const handleMove = useCallback(\n    (e: MouseEvent) => {\n      const { clientX, clientY } = e\n      const { x, y } = point\n\n      if (clientX - x === 0 && clientY - y === 0) return\n\n      moveCallback({\n        offsetX: clientX - x,\n        offsetY: clientY - y,\n      })\n\n      point.x = clientX\n      point.y = clientY\n    },\n    [moveCallback],\n  )\n\n  const handleEnd = useCallback(() => {\n    setMoveState((s) => {\n      return {\n        ...s,\n        ms: false,\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyEvent)\n    window.addEventListener('keyup', handleKeyEvent)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyEvent)\n      window.removeEventListener('keyup', handleKeyEvent)\n    }\n  }, [handleKeyEvent])\n\n  useEffect(() => {\n    if (moveState.ks && moveState.ms) {\n      window.addEventListener('mousemove', handleMove)\n      window.addEventListener('mouseup', handleEnd)\n    } else {\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleEnd)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleEnd)\n    }\n  }, [handleEnd, handleMove, moveState.ks, moveState.ms])\n\n  return [dragStatus, handleMouseDown]\n}\nexport default useSpaceDrag\n","import React, { useRef, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProject } from 'src/store/hooks'\nimport useWheel from 'src/app/hooks/useWheel'\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\n\ninterface StyleProps {\n  width: number\n  height: number\n  scale: number\n  offsetX: number\n  offsetY: number\n  dragState: number\n}\n\nconst useStyles = makeStyles(({ bgPixel }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      flex: 1,\n      cursor: (props: StyleProps) => {\n        if (props.dragState === 2) return 'grabbing'\n        if (props.dragState === 1) return 'grab'\n        return 'default'\n      },\n    },\n    canvas: {\n      ...bgPixel,\n      transformOrigin: '50% 50%',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      width: (props: StyleProps) => `${props.width}px`,\n      height: (props: StyleProps) => `${props.height}px`,\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\n      transform: (props: StyleProps) =>\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\n      imageRendering: 'pixelated',\n    },\n  }),\n)\n\nconst PackCanvas: FunctionComponent<unknown> = () => {\n  const {\n    isPacking,\n    ui,\n    layout: { padding, auto, fixedSize, width: packWidth, height: packHeight },\n    glyphList,\n    style: { bgColor },\n    packCanvas,\n    setCanvas,\n  } = useProject()\n  const { width, height, scale, offsetX, offsetY } = ui\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const domRef = useRef<HTMLDivElement>(null)\n  const [dragState, handleMouseDown] = useSpaceDrag(\n    (offsetInfo) => {\n      const { offsetX: ix, offsetY: iy } = offsetInfo\n      const { scale: os, offsetX: ox, offsetY: oy, setTransform } = ui\n      setTransform({\n        offsetX: ox + ix / os,\n        offsetY: oy + iy / os,\n      })\n    },\n    [ui],\n  )\n\n  const classes = useStyles({\n    width,\n    height,\n    scale,\n    offsetX,\n    offsetY,\n    dragState,\n  })\n\n  useWheel(\n    domRef,\n    (info) => {\n      const { offsetX: ox, offsetY: oy, scale: os, setTransform } = ui\n      const s = os + info.deltaScale\n      const x = ox + info.deltaX / s\n      const y = oy + info.deltaY / s\n      setTransform({\n        offsetX: x,\n        offsetY: y,\n        scale: s,\n      })\n    },\n    [ui],\n  )\n\n  useEffect(() => {\n    if (canvasRef.current && canvasRef.current !== packCanvas)\n      setCanvas(canvasRef.current)\n  }, [canvasRef, packCanvas, setCanvas])\n\n  useEffect(() => {\n    if (!glyphList || isPacking || !width || !height) return\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    canvas.width = width\n    canvas.height = height\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n\n    if (bgColor) {\n      ctx.fillStyle = bgColor\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n    }\n\n    glyphList.forEach((glyph) => {\n      if (\n        glyph.source &&\n        glyph.source.width !== 0 &&\n        glyph.source.height !== 0\n      ) {\n        ctx.drawImage(\n          glyph.source as HTMLCanvasElement,\n          glyph.x + (padding || 0),\n          glyph.y + (padding || 0),\n        )\n      }\n    })\n  }, [\n    bgColor,\n    glyphList,\n    isPacking,\n    height,\n    width,\n    padding,\n    auto,\n    fixedSize,\n    packWidth,\n    packHeight,\n  ])\n\n  return (\n    <div\n      aria-hidden\n      ref={domRef}\n      className={classes.root}\n      onMouseDown={handleMouseDown}\n    >\n      <canvas ref={canvasRef} className={classes.canvas} />\n    </div>\n  )\n}\n\nexport default observer(PackCanvas)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport { useProject } from 'src/store/hooks'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    root: {\n      width: '100%',\n      background: palette.background.paper,\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 12,\n      padding: 2,\n      animationDuration: '300ms',\n      pointerEvents: 'none',\n      color: palette.text.secondary,\n      position: 'relative',\n    },\n    loading: {\n      position: 'absolute',\n      left: 0,\n      top: '100%',\n      width: '100%',\n    },\n  }),\n)\n\nconst PackSizeBar: FunctionComponent<unknown> = () => {\n  const { isPacking, ui } = useProject()\n  const { width, height } = ui\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      Packed texture size: {width} x {height}\n      {isPacking ? <LinearProgress className={classes.loading} /> : null}\n    </div>\n  )\n}\n\nexport default observer(PackSizeBar)\n","import React, { FunctionComponent } from 'react'\n\nimport PackCanvas from './PackCanvas'\nimport PackSizeBar from './PackSizeBar'\n\nconst PackView: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <PackSizeBar />\n      <PackCanvas />\n    </>\n  )\n}\n\nexport default PackView\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nimport { PreviewObject } from './getPreviewCanvas'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    letter: {\n      position: 'absolute',\n      '&:hover,&$select': {\n        background: 'rgba(0,0,0,0.2)',\n        outline: '1px solid #000',\n      },\n    },\n    select: {\n      '& + $next': {\n        background: 'rgba(0,0,0,0.1)',\n        outline: '1px dashed #666',\n      },\n    },\n    next: {},\n  }),\n)\n\ninterface LetterListProps {\n  data: PreviewObject\n}\n\nconst LetterList: FunctionComponent<LetterListProps> = (\n  props: LetterListProps,\n) => {\n  const {\n    data: { xOffset, yOffset, list },\n  } = props\n  const classes = useStyles()\n  const ui = useProjectUi()\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    letter: string,\n    next: string,\n  ) => {\n    // setSelectLetter\n    e.stopPropagation()\n    ui.setSelectLetter(letter, next)\n  }\n  return (\n    <>\n      {list.map((item, idx) => {\n        const key = `${item.letter}${idx}`\n        return (\n          <div\n            aria-hidden\n            className={clsx(classes.letter, {\n              [classes.select]: item.letter === ui.selectLetter,\n              [classes.next]: item.letter === ui.selectNextLetter,\n            })}\n            style={{\n              width: item.width,\n              height: item.height,\n              left: `${item.x - xOffset}px`,\n              top: `${item.y - yOffset}px`,\n            }}\n            key={key}\n            onClick={(e) => handleSelect(e, item.letter, item.next)}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default observer(LetterList)\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProject } from 'src/store/hooks'\nimport useWheel from 'src/app/hooks/useWheel'\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\nimport toOutputInfo, { BMFontChar } from 'src/file/toOutputInfo'\n\nimport getPreviewCanvas, { PreviewObject } from './getPreviewCanvas'\nimport LetterList from './LetterList'\n\ninterface StyleProps {\n  width: number\n  height: number\n  scale: number\n  offsetX: number\n  offsetY: number\n  dragState: number\n}\n\nconst useStyles = makeStyles(({ bgPixel }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      flex: 1,\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      ...bgPixel,\n      cursor: (props: StyleProps) => {\n        if (props.dragState === 2) return 'grabbing'\n        if (props.dragState === 1) return 'grab'\n        return 'default'\n      },\n    },\n    wrap: {\n      transformOrigin: '50% 50%',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      width: (props: StyleProps) => `${props.width}px`,\n      height: (props: StyleProps) => `${props.height}px`,\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\n      transform: (props: StyleProps) =>\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\n    },\n    canvas: {\n      width: '100%',\n      height: '100%',\n      imageRendering: 'pixelated',\n    },\n  }),\n)\n\nconst PreviewCanvas: FunctionComponent<unknown> = () => {\n  const project = useProject()\n  const [data, setData] = useState<PreviewObject | null>(null)\n  const {\n    ui,\n    style: {\n      font: {\n        size,\n        lineHeight,\n        middle,\n        hanging,\n        top,\n        alphabetic,\n        ideographic,\n        bottom,\n        minBaseLine,\n        maxBaseLine,\n      },\n    },\n    isPacking,\n  } = project\n  const { previewScale, previewOffsetX, previewOffsetY } = ui\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const domRef = useRef<HTMLDivElement>(null)\n  const [dragState, handleMouseDown] = useSpaceDrag(\n    (offsetInfo) => {\n      const { offsetX: ix, offsetY: iy } = offsetInfo\n      const {\n        previewScale: os,\n        previewOffsetX: ox,\n        previewOffsetY: oy,\n        setPreviewTransform,\n      } = ui\n      setPreviewTransform({\n        previewOffsetX: ox + ix / os,\n        previewOffsetY: oy + iy / os,\n      })\n    },\n    [ui],\n  )\n  const classes = useStyles({\n    width: data ? data.width : 0,\n    height: data ? data.height : 0,\n    scale: previewScale,\n    offsetX: previewOffsetX,\n    offsetY: previewOffsetY,\n    dragState,\n  })\n\n  useWheel(\n    domRef,\n    (info) => {\n      const {\n        previewOffsetX: ox,\n        previewOffsetY: oy,\n        previewScale: os,\n        setPreviewTransform,\n      } = ui\n      const s = os + info.deltaScale\n      const x = ox + info.deltaX / s\n      const y = oy + info.deltaY / s\n      setPreviewTransform({\n        previewOffsetX: x,\n        previewOffsetY: y,\n        previewScale: s,\n      })\n    },\n    [ui],\n  )\n\n  useEffect(() => {\n    if (!canvasRef.current || isPacking || !data) return\n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    const lh = size * lineHeight\n\n    canvas.width = data.width\n    canvas.height = data.height\n    data.list.forEach((item) => {\n      if (!item.source || item.source.width === 0 || item.source.height === 0)\n        return\n      ctx.drawImage(item.source, item.x - data.xOffset, item.y - data.yOffset)\n    })\n\n    for (let index = 0; index < data.lines; index += 1) {\n      ;[middle, hanging, top, alphabetic, ideographic, bottom].forEach(\n        (baseLine) => {\n          const basey = Math.round(baseLine - minBaseLine + index * lh)\n          ctx.beginPath()\n          ctx.moveTo(-data.xOffset, basey + 0.5 - data.yOffset)\n          ctx.lineTo(data.width, basey + 0.5 - data.yOffset)\n          if (baseLine === minBaseLine || baseLine === maxBaseLine) {\n            ctx.strokeStyle = 'rgba(0,0,0,1)'\n            ctx.setLineDash([])\n          } else {\n            ctx.strokeStyle = 'rgba(0,0,0,0.5)'\n            ctx.setLineDash([10, 3, 2, 3])\n          }\n          ctx.stroke()\n        },\n      )\n      ctx.beginPath()\n      ctx.moveTo(-data.xOffset + 0.5, index * lh - data.yOffset)\n      ctx.lineTo(\n        -data.xOffset + 0.5,\n        index * lh - data.yOffset + maxBaseLine - minBaseLine,\n      )\n      ctx.strokeStyle = 'rgba(0,0,0,1)'\n      ctx.setLineDash([])\n      ctx.stroke()\n    }\n  }, [\n    alphabetic,\n    bottom,\n    data,\n    hanging,\n    ideographic,\n    isPacking,\n    lineHeight,\n    maxBaseLine,\n    middle,\n    minBaseLine,\n    size,\n    top,\n  ])\n\n  useEffect(() => {\n    if (!canvasRef.current || isPacking) return\n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n\n    const { chars, kernings } = toOutputInfo(project)\n    const kerningMap: Map<number, Map<number, number>> = new Map()\n    kernings.list.forEach(({ first, second, amount }) => {\n      if (!kerningMap.has(first)) kerningMap.set(first, new Map())\n      const k = kerningMap.get(first)\n      k?.set(second, amount)\n    })\n    const charMap: Map<string, BMFontChar> = new Map()\n    chars.list.forEach((char) => {\n      charMap.set(char.letter, char)\n    })\n    const lh = size * lineHeight\n    const obj = getPreviewCanvas(\n      ui.previewText,\n      charMap,\n      kerningMap,\n      lh,\n      maxBaseLine - minBaseLine,\n    )\n    setData(() => obj)\n  }, [\n    isPacking,\n    lineHeight,\n    maxBaseLine,\n    minBaseLine,\n    project,\n    size,\n    ui.previewText,\n  ])\n\n  return (\n    <div\n      aria-hidden\n      ref={domRef}\n      className={classes.root}\n      onMouseDown={handleMouseDown}\n      onClick={() => ui.setSelectLetter('', '')}\n    >\n      <div className={classes.wrap}>\n        <canvas ref={canvasRef} className={classes.canvas} />\n        {data ? <LetterList data={data} /> : null}\n      </div>\n    </div>\n  )\n}\n\nexport default observer(PreviewCanvas)\n","import { BMFontChar } from 'src/file/toOutputInfo'\n\ninterface PreviewItem {\n  x: number\n  y: number\n  width: number\n  height: number\n  source: HTMLImageElement | HTMLCanvasElement | null\n  letter: string\n  next: string\n}\n\nexport interface PreviewObject {\n  xOffset: number\n  yOffset: number\n  width: number\n  height: number\n  list: PreviewItem[]\n  lines: number\n}\n\nexport default function getPreviewCanvas(\n  text: string,\n  chars: Map<string, BMFontChar>,\n  kernings: Map<number, Map<number, number>>,\n  lineHeight: number,\n  fontHeight: number,\n): PreviewObject {\n  // const letters = Array.from(new Set(text.replace(/\\r\\n|\\r|\\n/g, '').split('')))\n  const list: PreviewItem[] = []\n  const lines = text.split(/\\r\\n|\\r|\\n/)\n  let minX = 0\n  let minY = 0\n  let maxX = 0\n  let maxY = 0\n  let y = 0\n  let x = 0\n\n  lines.forEach((str, index) => {\n    y = lineHeight * index\n    x = 0\n    const arr = Array.from(str)\n    arr.forEach((letter, idx) => {\n      const char = chars.get(letter)\n      if (!char) return\n      const next = arr[idx + 1]\n      const lk = kernings.get(letter.charCodeAt(0))\n      let kering = 0\n      if (next && lk && lk.has(next.charCodeAt(0))) {\n        kering = lk.get(next.charCodeAt(0)) || 0\n      }\n      const obj = {\n        x: x + char.xoffset,\n        y: y + char.yoffset,\n        width: char.width || char.xadvance,\n        height: char.height || fontHeight,\n        source: char.source,\n        letter: char.letter,\n        next,\n      }\n      x += char.xadvance + kering\n      minX = Math.min(obj.x, minX)\n      minY = Math.min(obj.y, minY)\n      maxX = Math.max(obj.x + obj.width, maxX)\n      maxY = Math.max(obj.y + char.height, maxY)\n      list.push(obj)\n    })\n  })\n\n  return {\n    lines: lines.length,\n    list,\n    xOffset: minX,\n    yOffset: minY,\n    width: maxX - minX,\n    height: Math.max(maxY - minY, lines.length * lineHeight - minY),\n  }\n}\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  const { previewText, setPreviewText } = useProjectUi()\n  const [isIME, setIsIME] = useState(false)\n  const [inputText, setInputText] = useState(previewText)\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = event.target\n    if (isIME) {\n      setInputText(value)\n    } else {\n      setInputText(value)\n      if (value !== previewText) setPreviewText(value)\n    }\n  }\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    setInputText(inputText)\n    if (inputText !== previewText) setPreviewText(inputText)\n  }\n\n  return (\n    <Box>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Glyphs</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <TextField\n          margin='none'\n          value={isIME ? inputText : previewText}\n          fullWidth\n          multiline\n          rows={7}\n          variant='outlined'\n          inputProps={{ spellCheck: false }}\n          onChange={handleInput}\n          onCompositionStart={() => setIsIME(true)}\n          onCompositionEnd={handleCompositionEnd}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default observer(Preview)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProject } from 'src/store/hooks'\n\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const project = useProject()\n  const { glyphList, ui } = project\n  const glyph = glyphList.find((gl) => gl.letter === ui.selectLetter)\n  if (!glyph) return null\n  const { adjustMetric, letter } = glyph\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = adjustMetric\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>{`\"${letter}\" Adjustment`}</Typography>\n      </Box>\n      <FormAdjustMetric\n        xAdvance={xAdvance}\n        xOffset={xOffset}\n        yOffset={yOffset}\n        setXAdvance={setXAdvance}\n        setXOffset={setXOffset}\n        setYOffset={setYOffset}\n      />\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { useState, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { deepObserve } from 'mobx-utils'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useProject } from 'src/store/hooks'\nimport { GlyphFont, GlyphImage } from 'src/store'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const {\n    glyphList,\n    ui,\n    style: {\n      font: { opentype, size },\n    },\n  } = useProject()\n  const [offset, setOffset] = useState(0)\n  const [glyph, setGlyph] = useState<GlyphFont | GlyphImage | undefined>()\n  const [kerning, setKerning] = useState(0)\n\n  useEffect(() => {\n    setGlyph(glyphList.find((gl) => gl.letter === ui.selectLetter))\n  }, [glyphList, ui.selectLetter])\n\n  useEffect(() => {\n    if (glyph && ui.selectNextLetter && opentype) {\n      const fontScale = (1 / opentype.unitsPerEm) * size\n      setOffset(\n        Math.round(\n          opentype.getKerningValue(\n            opentype.charToGlyphIndex(glyph.letter),\n            opentype.charToGlyphIndex(ui.selectNextLetter),\n          ) * fontScale,\n        ),\n      )\n    }\n  }, [glyph, opentype, size, ui.selectNextLetter])\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    if (glyph)\n      glyph.steKerning(ui.selectNextLetter, Number(e.target.value) - offset)\n  }\n\n  useEffect(() => {\n    let disposer\n\n    if (glyph) {\n      setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      disposer = deepObserve(glyph.kerning, () => {\n        setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      })\n    }\n\n    return disposer\n  }, [glyph, ui.selectNextLetter])\n\n  if (!glyph || !ui.selectNextLetter) return null\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>{`\"${glyph.letter}\" - \"${ui.selectNextLetter}\" Kerning`}</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Amount:' after='px'>\n          <Input\n            value={kerning + offset}\n            fullWidth\n            type='number'\n            onChange={handleChange}\n          />\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { FunctionComponent } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport PreviewCanvas from './PreviewCanvas'\nimport PreviewText from './PreviewText'\nimport PreviewMertic from './PreviewMertic'\nimport PreviewKerning from './PreviewKerning'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <PreviewCanvas />\n      <Grid container alignItems='flex-start'>\n        <Grid item xs={4}>\n          <PreviewText />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewMertic />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewKerning />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Preview\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nimport PackView from '../PackView'\nimport Preview from '../Preview'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    '@keyframes slideDown': {\n      from: { opacity: 0, transform: 'translate(0, -100%)' },\n      to: { opacity: 1, transform: 'translate(0, 0)' },\n    },\n    root: {\n      backgroundColor: palette.background.default,\n      position: 'relative',\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n    },\n    toast: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      zIndex: 10,\n      background: palette.error.main,\n      textAlign: 'center',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 14,\n      padding: 2,\n      animationName: '$slideDown',\n      animationDuration: '300ms',\n      pointerEvents: 'none',\n    },\n    icon: {\n      marginRight: 5,\n    },\n  }),\n)\n\nconst MainView: FunctionComponent<unknown> = () => {\n  const { showPreview, packFailed } = useProjectUi()\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      {packFailed ? (\n        <div className={classes.toast}>\n          <ErrorOutlineIcon className={classes.icon} fontSize='inherit' />\n          Packaging failed, try to increase the size of the package please.\n        </div>\n      ) : null}\n      {showPreview ? <Preview /> : <PackView />}\n    </div>\n  )\n}\n\nexport default observer(MainView)\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\n// import { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n// import Input from '@material-ui/core/Input'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      minWidth: '80px',\n      maxWidth: 'none',\n      height: '34px',\n      lineHeight: '16px',\n      padding: '10px',\n      color: 'rgba(255,255,255,0.5)',\n      backgroundColor: 'rgb(45, 45, 45)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      cursor: 'pointer',\n      '&:hover': {\n        '& $icon': {\n          opacity: 1,\n        },\n      },\n      '&:last-child': {\n        borderRight: '0 none',\n      },\n    },\n    selected: {\n      background: palette.background.default,\n      color: '#fff',\n      '& $icon': {\n        opacity: 1,\n      },\n    },\n    name: {\n      whiteSpace: 'nowrap',\n      position: 'relative',\n      background: 'inherit',\n    },\n    editor: {\n      color: 'rgba(0,0,0,0)',\n    },\n    input: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      left: 0,\n      fontSize: 'inherit',\n      padding: 0,\n      border: '0 none',\n      appearance: 'none',\n      color: 'inherit',\n      background: 'inherit',\n    },\n    icon: {\n      width: '16px',\n      height: '16px',\n      marginLeft: '10px',\n      opacity: 0,\n    },\n  }),\n)\n\ninterface ProjectTabProps {\n  name: string\n  value: number\n  selected?: boolean\n  useRemove?: boolean\n  onRemove?: (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value: number,\n  ) => void\n  onChange?: (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    value: number,\n  ) => void\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  onRename?: (name: string, value: number) => void\n}\n\nconst ProjectTab: FunctionComponent<ProjectTabProps> = (\n  props: ProjectTabProps,\n) => {\n  const {\n    name,\n    useRemove,\n    selected,\n    value,\n    onChange,\n    onClick,\n    onRemove,\n    onRename,\n  } = props\n  const [editor, setEditor] = useState(false)\n  const [sname, setSName] = useState(name)\n  const editorRef = useRef<HTMLInputElement>(null)\n  const classes = useStyles()\n\n  const handleRemove = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    e.stopPropagation()\n    if (onRemove) onRemove(e, value)\n  }\n\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (onChange) onChange(e, value)\n    if (onClick) onClick(e)\n  }\n\n  const handleDoubleClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (editorRef.current) {\n      setEditor(true)\n    }\n  }\n\n  const handleEditorEnd = (e: { preventDefault?(): void }) => {\n    if (e.preventDefault) e.preventDefault()\n    setEditor(false)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === 13 && editorRef.current) {\n      editorRef.current.blur()\n    }\n  }\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSName(e.target.value)\n  }\n\n  useEffect(() => {\n    if (editor && editorRef.current) editorRef.current.focus()\n    if (!editor && onRename) onRename(sname, value)\n  }, [editor, onRename, sname, value])\n\n  useEffect(() => {\n    setSName(name)\n  }, [name])\n\n  return (\n    <div\n      aria-hidden\n      className={clsx(classes.root, {\n        [classes.selected]: selected,\n      })}\n      onClick={handleSelect}\n      onDoubleClick={handleDoubleClick}\n      title='Double click rename'\n    >\n      <span aria-hidden className={classes.name}>\n        {editor ? sname : name}\n        <input\n          className={classes.input}\n          hidden={!editor}\n          ref={editorRef}\n          value={editor ? sname : name}\n          type='text'\n          onKeyDown={handleKeyDown}\n          onBlur={handleEditorEnd}\n          //   onInput={handleInput}\n          onChange={handleInput}\n        />\n      </span>\n      {useRemove ? (\n        <CloseIcon\n          className={classes.icon}\n          onClick={handleRemove}\n          onDoubleClick={handleRemove}\n        />\n      ) : null}\n    </div>\n  )\n}\n\nexport default ProjectTab\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Tabs from '@material-ui/core/Tabs'\nimport { useWorkspace } from 'src/store/hooks'\nimport ProjectTab from './ProjectTab'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n  }),\n)\n\nconst ProjectTabs: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const workSpace = useWorkspace()\n  const {\n    addProject,\n    selectProject,\n    removeProject,\n    setProjectName,\n    namedList,\n    activeId,\n  } = workSpace\n\n  const handleChange = (e: unknown, value: number): void => {\n    selectProject(value)\n  }\n\n  const handleRemove = (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value?: number,\n  ): void => {\n    if (typeof value !== 'undefined') removeProject(value)\n  }\n\n  const handleDoubleClick = (): void => {\n    addProject()\n  }\n\n  return (\n    <Tabs\n      classes={classes}\n      value={activeId}\n      onChange={handleChange}\n      indicatorColor='primary'\n      textColor='primary'\n      variant='scrollable'\n      scrollButtons='off'\n      selectionFollowsFocus\n      TabIndicatorProps={{ hidden: true }}\n      onDoubleClick={handleDoubleClick}\n    >\n      {namedList.map((item) => {\n        return (\n          <ProjectTab\n            useRemove={namedList.length > 1}\n            name={item.name}\n            value={item.id}\n            key={item.id}\n            onRename={setProjectName}\n            onRemove={handleRemove}\n          />\n        )\n      })}\n    </Tabs>\n  )\n}\n\nexport default observer(ProjectTabs)\n","import React, { FunctionComponent, useState, useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Popper from '@material-ui/core/Popper'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport MenuList from '@material-ui/core/MenuList'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    slider: {\n      width: '200px',\n    },\n  }),\n)\n\nconst ControlerBar: FunctionComponent<unknown> = () => {\n  const {\n    scale,\n    setTransform,\n    previewScale,\n    setPreviewTransform,\n    showPreview,\n    setShowPreview,\n  } = useProjectUi()\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n  const anchorRef = useRef<HTMLButtonElement>(null)\n  const [list] = useState([0.25, 0.5, 0.75, 1, 1.25, 1.5, 5, 10])\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen)\n  }\n\n  const handleClose = (event: React.MouseEvent<EventTarget>) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const handleChange = (event: unknown, val: number | number[]) => {\n    if (showPreview) {\n      setPreviewTransform({ previewScale: val as number })\n    } else {\n      setTransform({ scale: val as number })\n    }\n  }\n\n  const handleSelect = (val: number) => {\n    // setTransform({ scale: val })\n    handleChange(null, val)\n    setOpen(false)\n  }\n\n  return (\n    <Box paddingX={2} display='flex' justifyContent='space-between'>\n      <Box component='label' display='flex' alignItems='center'>\n        Preview\n        <Switch\n          size='small'\n          color='primary'\n          checked={showPreview}\n          onChange={(e) => setShowPreview(e.target.checked)}\n        />\n      </Box>\n      <Slider\n        className={classes.slider}\n        value={showPreview ? previewScale : scale}\n        min={0.01}\n        max={10}\n        step={0.01}\n        onChange={handleChange}\n      />\n      <Button ref={anchorRef} onClick={handleToggle}>\n        {`${Math.round((showPreview ? previewScale : scale) * 1000) / 10}%`}\n      </Button>\n      <Popper open={open} anchorEl={anchorRef.current} placement='top-end'>\n        <Paper>\n          <ClickAwayListener onClickAway={handleClose}>\n            <MenuList>\n              {list.map((n) => (\n                <MenuItem key={n} onClick={() => handleSelect(n)}>\n                  {`${n * 100}%`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </ClickAwayListener>\n        </Paper>\n      </Popper>\n    </Box>\n  )\n}\n\nexport default observer(ControlerBar)\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport InputBase from '@material-ui/core/InputBase'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport { GlyphImage } from 'src/store'\nimport { useProject } from 'src/store/hooks'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: theme.spacing(24),\n      height: theme.spacing(24),\n      margin: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n    },\n    image: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      pointerEvents: 'none',\n    },\n    actions: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n    },\n    inputLabel: {\n      width: '100%',\n      height: '100%',\n      '& input': {\n        textAlign: 'center',\n      },\n    },\n  }),\n)\n\ninterface ImageGlyphProps {\n  glyph: GlyphImage\n  selected?: boolean\n}\n\nconst ImageGlyph: FunctionComponent<ImageGlyphProps> = (\n  props: ImageGlyphProps,\n) => {\n  const classes = useStyles()\n  const { removeImage } = useProject()\n  const [isIME, setIsIME] = useState(false)\n  const { glyph } = props\n  const [inputValue, setInputValue] = useState(glyph.letter)\n  const { changeSelect, selected, setGlyph } = glyph\n\n  const handleChangeGlyph = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value } = e.target\n    if (!isIME) {\n      setGlyph(value)\n    } else {\n      setInputValue(value.slice(0, 1))\n      setGlyph(value.slice(0, 1))\n    }\n  }\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    setInputValue((iv) => iv.slice(0, 1))\n    setGlyph(inputValue.slice(0, 1))\n  }\n\n  return (\n    <Paper variant='outlined' className={classes.root}>\n      <img className={classes.image} src={glyph.src} alt={glyph.fileName} />\n      <Grid container direction='column' className={classes.actions}>\n        <Grid item container justifyContent='space-between' alignItems='center'>\n          <Checkbox\n            checked={selected}\n            size='small'\n            color='default'\n            onChange={(e) => changeSelect(e.target.checked)}\n          />\n          <IconButton\n            color='primary'\n            size='small'\n            onClick={() => removeImage(glyph)}\n          >\n            <DeleteIcon fontSize='small' />\n          </IconButton>\n        </Grid>\n        <Grid\n          item\n          xs\n          component='label'\n          className={classes.inputLabel}\n          container\n          alignItems='flex-end'\n        >\n          <InputBase\n            fullWidth\n            value={isIME ? inputValue : glyph.letter}\n            onFocus={(e) => e.target.select()}\n            onInput={handleChangeGlyph}\n            onCompositionEnd={handleCompositionEnd}\n            onCompositionStart={() => setIsIME(true)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default observer(ImageGlyph)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\n\nimport { useProject } from 'src/store/hooks'\n\nimport ImageGlyph from './ImageGlyph'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n  }),\n)\n\nconst ImageGlyphList: FunctionComponent<unknown> = () => {\n  const { glyphImages } = useProject()\n  const classes = useStyles()\n  return (\n    <Box className={classes.root}>\n      {glyphImages.map((glyph) => {\n        return <ImageGlyph glyph={glyph} key={glyph.src} />\n      })}\n    </Box>\n  )\n}\n\nexport default observer(ImageGlyphList)\n","import React, { FunctionComponent, useState, useEffect } from 'react'\nimport { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'\nimport IconButton from '@material-ui/core/IconButton'\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary'\n\nimport { FileInfo } from 'src/store'\nimport { useProject } from 'src/store/hooks'\n\nimport readFile from 'src/utils/readFile'\n\nimport ImageGlyphList from './ImageGlyphList'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      position: 'relative',\n    },\n    fixed: {\n      position: 'fixed',\n      left: 0,\n      top: 0,\n      zIndex: 999999,\n      width: '100%',\n      height: '100%',\n      '& $panel': {\n        maxHeight: 'none',\n      },\n    },\n    panel: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      maxHeight: '305px',\n    },\n    continer: {\n      flex: 1,\n      overflow: 'hidden',\n      overflowY: 'auto',\n    },\n    listWrap: {\n      minHeight: '224px',\n      height: '100%',\n      width: '100%',\n      overflow: 'hidden',\n      overflowY: 'auto',\n    },\n  }),\n)\n\nconst LayerBox: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { addImages } = useProject()\n  const [isFullscreen, setFullscreen] = useState(false)\n  const [open, setOpen] = useState(false)\n  // const [isDroping, setIsDroping] = useState(false)\n\n  const handleLoadFile = (files: FileList) => {\n    const list = Array.from(files).filter((file) => /^image\\//.test(file.type))\n    if (!list.length) return\n    Promise.all(\n      list.map((file) =>\n        readFile(file).then((buffer) => {\n          if (!buffer || typeof buffer === 'string') return null\n\n          const matched = file.name.match(/(\\S)\\.[a-zA-Z0-9]+$/i)\n          return {\n            letter: matched ? matched[1] : '',\n            fileName: file.name,\n            fileType: file.type,\n            buffer,\n          }\n        }),\n      ),\n    ).then((fileList) => {\n      addImages(fileList.filter((f) => f) as FileInfo[])\n    })\n  }\n\n  const handleDrop = (e: React.DragEvent<HTMLElement>): void => {\n    e.preventDefault()\n    handleLoadFile(e.dataTransfer.files)\n  }\n\n  const hanfleToggleFullScreen = (\n    e?: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    if (e) e.stopPropagation()\n    setFullscreen((f) => !f)\n  }\n\n  const handleToggleOpen = () => {\n    setOpen((o) => isFullscreen || !o)\n  }\n  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) return\n    const { files } = e.target\n    handleLoadFile(files)\n  }\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    const target = e.target as HTMLElement\n    if (e.keyCode === 27) {\n      if (!target || target.tagName !== 'INPUT') setFullscreen(false)\n      else if (target) target.blur()\n    }\n  }\n\n  useEffect(() => {\n    if (isFullscreen) window.addEventListener('keydown', handleKeyDown)\n    else window.removeEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [isFullscreen])\n\n  return (\n    <Box\n      onDragEnter={(e) => e.preventDefault()}\n      onDragOver={(e) => e.preventDefault()}\n      // onDragLeave={handleDrop}\n      onDrop={handleDrop}\n      className={clsx(classes.root, {\n        [classes.fixed]: isFullscreen,\n      })}\n    >\n      <Accordion\n        className={classes.panel}\n        expanded={isFullscreen || open}\n        onChange={handleToggleOpen}\n        TransitionProps={{\n          style:\n            isFullscreen || open\n              ? { flex: 1, overflow: 'hidden', overflowY: 'auto' }\n              : {},\n        }}\n      >\n        <AccordionSummary\n          expandIcon={isFullscreen ? undefined : <ExpandMoreIcon />}\n        >\n          <Grid container alignItems='center'>\n            <Grid item>\n              <Typography>Image Glyph List</Typography>\n            </Grid>\n            <Grid item xs container justifyContent='center'>\n              <Button\n                component='label'\n                color='primary'\n                size='small'\n                variant='contained'\n                startIcon={<PhotoLibraryIcon />}\n              >\n                Select Images\n                <input\n                  hidden\n                  type='file'\n                  multiple\n                  accept='image/*'\n                  onChange={handleFilesChange}\n                />\n              </Button>\n            </Grid>\n            <Grid item>\n              <IconButton component='div' onClick={hanfleToggleFullScreen}>\n                {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\n              </IconButton>\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails className={classes.continer}>\n          <Box className={classes.listWrap}>\n            <ImageGlyphList />\n          </Box>\n        </AccordionDetails>\n      </Accordion>\n    </Box>\n  )\n}\nexport default observer(LayerBox)\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport MainView from './modules/MainView'\nimport ProjectTabs from './modules/ProjectTabs'\nimport ControlerBar from './modules/ControlerBar'\nimport ImageGlyphList from './modules/ImageGlyphList'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      width: 0,\n    },\n    tabsRoot: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n    tabRoot: {\n      minHeight: 'auto',\n      minWidth: 'auto',\n      maxWidth: 'none',\n      height: '34px',\n      color: 'rgba(255,255,255,0.5)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n    },\n    tabSelected: {\n      background: palette.background.default,\n    },\n    tabWrapper: {\n      color: '#FFF',\n    },\n  }),\n)\n\nconst WorkSpace: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.root}>\n      <ProjectTabs />\n      <MainView />\n      <ControlerBar />\n      <ImageGlyphList />\n    </Box>\n  )\n}\n\nexport default WorkSpace\n","import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    close: {\n      padding: theme.spacing(0.5),\n    },\n  }),\n)\n\nexport interface SnackbarMessage {\n  message: string\n  key: number\n}\n\nexport interface State {\n  open: boolean\n  snackPack: SnackbarMessage[]\n  messageInfo?: SnackbarMessage\n}\n\nexport default function ConsecutiveSnackbars() {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  const handleClose = (\n    event: React.SyntheticEvent | MouseEvent,\n    reason?: string,\n  ) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    setOpen(false)\n  }\n\n  const updateVersion = React.useCallback((event) => {\n    const { detail } = event\n    setOpen(!!detail)\n  }, [])\n\n  const handleReload = () => {\n    window.location.reload()\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('updateVerion', updateVersion, false)\n    return () =>\n      window.removeEventListener('updateVerion', updateVersion, false)\n  }, [updateVersion])\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={open}\n      onClose={handleClose}\n      message='New version is available.'\n      action={\n        <React.Fragment>\n          <Button color='secondary' size='small' onClick={handleReload}>\n            Reload\n          </Button>\n          <IconButton\n            aria-label='close'\n            color='inherit'\n            className={classes.close}\n            onClick={handleClose}\n          >\n            <CloseIcon />\n          </IconButton>\n        </React.Fragment>\n      }\n    />\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useStores from 'src/store/hooks'\n\nimport LeftBar from '../LeftBar'\nimport TitleBar from '../TitleBar'\nimport RightBar from '../RightBar'\nimport WorkSpace from '../WorkSpace'\nimport UpdateToast from './UpdateToast'\n\nconst useStyles = makeStyles(({ zIndex }) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      display: 'flex',\n      flex: 1,\n      position: 'relative',\n      height: '0',\n      overflow: 'hidden',\n    },\n    loadingBackdrop: {\n      zIndex: zIndex.drawer + 1,\n      color: '#fff',\n    },\n  }),\n)\n\nconst Wrap: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { ui } = useStores()\n\n  return (\n    <Box className={classes.root}>\n      <TitleBar />\n      <UpdateToast />\n      <Box className={classes.content}>\n        <LeftBar />\n        <WorkSpace />\n        <RightBar />\n      </Box>\n      <Backdrop className={classes.loadingBackdrop} open={!!ui.globalLoader}>\n        <CircularProgress color='inherit' />\n      </Backdrop>\n    </Box>\n  )\n}\n\nexport default observer(Wrap)\n","import React from 'react'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { Provider } from 'mobx-react'\n\nimport createStore from 'src/store'\nimport theme from './theme'\n\nimport Wrap from './layout/Wrap'\n\nfunction App(): JSX.Element {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider {...createStore()}>\n        <Wrap />\n      </Provider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate(registration) {\n    const worker = registration.waiting\n    if (!worker) return\n\n    const channel = new MessageChannel()\n\n    channel.port1.onmessage = () => {\n      window.dispatchEvent(new CustomEvent('updateVerion', { detail: worker }))\n    }\n\n    worker.postMessage({ type: 'SKIP_WAITING' }, [channel.port2])\n  },\n})\n"],"sourceRoot":""}