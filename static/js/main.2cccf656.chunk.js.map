{"version":3,"sources":["store/ui.ts","workers/AutoPacker.worker.ts","utils/is.ts","utils/getTextBaselines.ts","utils/use.ts","store/base/ui.ts","utils/fontStyleStringify.ts","utils/updateFontFace.ts","store/base/font.ts","store/base/gradient.ts","utils/base64ToArrayBuffer.ts","store/base/patternTexture.ts","store/base/fill.ts","utils/getTextSize.ts","store/base/stroke.ts","store/base/shadow.ts","store/base/style.ts","store/base/layout.ts","store/base/metric.ts","utils/trimImageData.ts","utils/getPointOnCircle.ts","utils/getCanvasStyle.ts","utils/getGlyphInfo.ts","store/base/glyphBase.ts","store/base/glyphFont.ts","store/index.ts","store/base/glyphImage.ts","utils/getTrimImageInfo.ts","store/project.ts","store/workspace.ts","app/theme/props.ts","app/theme/overrides.ts","app/theme/index.ts","store/hooks.ts","utils/readFile.ts","app/layout/LeftBar/modules/Font/FontFamily.tsx","app/components/GridInput/GridInput.tsx","app/layout/LeftBar/modules/Font/FontSize.tsx","app/layout/LeftBar/modules/Font/LineHeight.tsx","app/layout/LeftBar/modules/Font/Font.tsx","app/layout/LeftBar/modules/Glyphs/Glyphs.tsx","app/layout/LeftBar/modules/PackConfig/Padding.tsx","app/layout/LeftBar/modules/PackConfig/Spacing.tsx","app/layout/LeftBar/modules/PackConfig/AutoPack.tsx","app/layout/LeftBar/modules/PackConfig/FixedSize.tsx","app/layout/LeftBar/modules/PackConfig/PackWidth.tsx","app/layout/LeftBar/modules/PackConfig/PackHeight.tsx","app/layout/LeftBar/modules/PackConfig/PackConfig.tsx","app/layout/common/FormAdjustMetric/FormAdjustMetric.tsx","app/layout/LeftBar/modules/GlobalMetric/GlobalMetric.tsx","app/layout/LeftBar/LeftBar.tsx","app/layout/TitleBar/ButtonNew.tsx","utils/getVersionNumber.ts","file/conversion/types/sbf/prefix.ts","file/conversion/types/sbf/getVersion.ts","file/conversion/types/sbf/check.ts","file/conversion/types/sbf/proto/1.0.0/project.js","file/conversion/types/sbf/proto/1.0.0/updateToNext.ts","file/conversion/types/sbf/proto/1.0.1/project.js","file/conversion/types/sbf/proto/1.0.1/updateToNext.ts","file/conversion/types/sbf/proto/1.0.2/project.js","file/conversion/types/sbf/proto/1.0.2/updateToNext.ts","file/conversion/types/sbf/proto/project.js","file/conversion/types/sbf/proto/index.ts","file/conversion/types/sbf/updateOldProject.ts","file/conversion/types/sbf/encode.ts","file/conversion/types/sbf/proto/encodeProject.ts","file/conversion/types/sbf/index.ts","file/conversion/types/sbf/decode.ts","file/conversion/types/sbf/proto/toOriginBuffer.ts","file/conversion/types/littera/schema/index.ts","file/conversion/types/littera/schema/glow.ts","file/conversion/types/littera/schema/fill.ts","file/conversion/types/littera/schema/settings.ts","file/conversion/types/littera/schema/shadow.ts","file/conversion/types/littera/schema/stroke.ts","file/conversion/types/littera/schema/background.ts","file/conversion/types/littera/schema/bevel.ts","file/conversion/types/littera/schema/glyphs.ts","file/conversion/types/littera/schema/font.ts","file/conversion/types/littera/check.ts","file/conversion/types/littera/decode.ts","file/conversion/types/index.ts","file/conversion/types/littera/index.ts","file/conversion/index.ts","app/layout/TitleBar/ButtonOpen.tsx","app/layout/TitleBar/ButtonSave.tsx","utils/formatStr.ts","file/export/types/text.ts","file/export/types/xml.ts","file/export/toBmfInfo.ts","file/export/index.ts","app/layout/TitleBar/ButtonExport.tsx","file/export/exportFile.ts","app/layout/TitleBar/TitleBar.tsx","app/components/WrappedSketchPicker/WrappedSketchPicker.tsx","app/components/ColorInput/ColorInput.tsx","app/layout/common/FormColor/FormColor.tsx","app/components/GradientPicker/ColorStop.tsx","app/components/GradientPicker/ColorStopsHolder.tsx","app/components/Palette/Palette.tsx","app/components/GradientPicker/GradientBuilder.tsx","app/components/AnglePicker/AnglePicker.tsx","app/layout/common/FormAngle/FormAngle.tsx","app/layout/common/FormGradient/FormGradient.tsx","app/layout/common/FormImage/FileSelector.tsx","app/layout/common/FormImage/FormImage.tsx","app/layout/common/FormFill/FormFill.tsx","app/layout/RightBar/modules/Fill/Fill.tsx","app/layout/RightBar/modules/Stroke/Stroke.tsx","app/layout/RightBar/modules/Shadow/Shadow.tsx","app/layout/RightBar/modules/BackgroundColor/BackgroundColor.tsx","app/layout/RightBar/RightBar.tsx","app/hooks/useWheel.ts","app/hooks/useSpaceDrag.ts","app/layout/WorkSpace/modules/PackView/PackCanvas.tsx","app/layout/WorkSpace/modules/PackView/PackSizeBar.tsx","app/layout/WorkSpace/modules/PackView/PackView.tsx","app/layout/WorkSpace/modules/Preview/LetterList.tsx","app/layout/WorkSpace/modules/Preview/PreviewCanvas.tsx","app/layout/WorkSpace/modules/Preview/getPreviewCanvas.ts","app/layout/WorkSpace/modules/Preview/PreviewText.tsx","app/layout/WorkSpace/modules/Preview/PreviewMertic.tsx","app/layout/WorkSpace/modules/Preview/PreviewKerning.tsx","app/layout/WorkSpace/modules/Preview/Preview.tsx","app/layout/WorkSpace/modules/MainView/MainView.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTab.tsx","app/layout/WorkSpace/modules/ProjectTabs/ProjectTabs.tsx","app/layout/WorkSpace/modules/ControlerBar/ControlerBar.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyph.tsx","app/layout/WorkSpace/modules/ImageGlyphList/ImageGlyphList.tsx","app/layout/WorkSpace/modules/ImageGlyphList/LayerBox.tsx","app/layout/WorkSpace/WorkSpace.tsx","app/layout/Wrap/UpdateToast.tsx","app/layout/Wrap/Wrap.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Ui","action","bound","num","this","globalLoader","observable","Worker_fn","Worker","canvas","is","n","Number","isNaN","use","a","b","ui","previewText","offsetX","Math","min","max","width","offsetY","height","scale","trans","reOffset","text","showPreview","previewScale","previewOffsetX","previewOffsetY","letter","next","selectLetter","selectNextLetter","packFailed","defaultConfig","fontSize","fontFamily","fontStyleStringify","fontStyleConfig","config","arr","fontStyle","push","fontVariant","fontWeight","lineHeight","join","fontTargeCache","loadDiv","GradientType","DEFAULT_FAMILY","Font","font","size","fonts","length","forEach","fontResource","addFont","updateBaseines","mainFont","family","opentype","map","middle","hanging","top","alphabetic","ideographic","bottom","bls","styleConig","document","createElement","ctx","getContext","Error","textBaseline","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","getTextBaselines","parse","lowMemory","e","Promise","reject","names","postScriptName","Object","keys","find","url","URL","createObjectURL","Blob","name","cssNode","createTextNode","appendChild","textNode","head","style","position","left","opacity","pointerEvents","body","resolve","setTimeout","updateFontFace","then","runInAction","idx","indexOf","splice","computed","Gradient","shallow","gradient","type","angle","palette","item","id","nextId","addColor","color","ids","offset","base64ToArrayBuffer","base64","binaryString","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","FillType","PatternTexture","ref","pt","repetition","setImage","src","img","Image","onload","image","Fill","fill","patternTexture","Stroke","stroke","lineCap","lineJoin","Shadow","shadow","blur","Style","useShadow","useStroke","bgColor","Layout","layout","padding","spacing","auto","fixedSize","Metric","metric","xAdvance","xOffset","yOffset","trimImageData","imageData","threshold","data","topTrim","bottomTrim","leftTrim","rightTrim","topStatus","bottomStatus","leftStatus","rightStatus","h","ceil","w","j","trimOffsetLeft","trimOffsetTop","getPointOnCircle","x","y","r","cos","PI","sin","matrix","createElementNS","createSVGMatrix","getCanvasStyle","cx","cy","startPoint","endPoint","createLinearGradient","createRadialGradient","addColorStop","pattern","createPattern","setTransform","translate","getGlyphInfo","trimInfo","textAlign","testA","actualBoundingBoxLeft","parseInt","fontWidth","fontHeight","trimOffsetRight","trimOffsetBottom","testB","actualBoundingBoxRight","getTextSize","lineWidth","addX","addY","styleX","styleY","abs","strokeStyle","strokeText","fillStyle","fillText","cvs","newCtx","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","drawImage","imgData","getImageData","styleTrimInfo","putImageData","GlyphBase","glyph","adjustMetric","kerning","set","Map","GlyphFont","galyphFont","textStyle","setGlyphInfo","glyphInfo","source","store","GlyphImage","glyphImage","fileName","fileType","initImage","naturalWidth","naturalHeight","getTrimImageInfo","isSelect","selected","Project","project","worker","packStart","packTimer","idleId","Date","now","globalAdjustMetric","glyphs","value","key","glyphImages","has","addGlyphs","addAutoRun","pack","obj","split","get","glyphList","isUnEmpty","terminate","isPacking","packList","rectangleList","sort","packer","GuillotineBinPack","list","filter","InsertSizes","setPack","usedRectangles","AutoPacker","addEventListener","messageEvent","postMessage","failedList","imgList","maxWidth","maxHeight","rectangle","gi","setPackFailed","setSize","cancel","tasks","runTasks","request","deadline","tr","timeRemaining","start","shift","window","clearTimeout","isName","deepObserve","throttlePack","change","packStyle","str","oldText","replace","currentList","Array","from","Set","oldList","diffList","concat","t","includes","delete","all","packCanvas","Workspace","activeId","projectList","namedList","p","named","match","setName","configure","enforceActions","computedRequiresReaction","props","MuiButton","MuiButtonBase","disableRipple","MuiFilledInput","margin","MuiFormControl","MuiFormHelperText","MuiIconButton","MuiInputBase","MuiInputLabel","MuiListItem","dense","MuiOutlinedInput","MuiFab","MuiTable","MuiTextField","MuiToolbar","variant","overrides","MuiCssBaseline","html","WebkitFontSmoothing","MozOsxFontSmoothing","userSelect","minWidth","marginLeft","background","input","theme","createTheme","primary","main","secondary","paper","default","activityBar","titleBar","sidebar","common","black","white","hover","bgPixel","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","typography","transitions","create","shape","borderRadius","responsiveFontSizes","useStores","useContext","MobXProviderContext","useWorkspace","workspace","useLayout","currentProject","useProject","useStyle","useFont","useProjectUi","readFile","file","isText","arrayBuffer","reader","FileReader","readAsText","readAsArrayBuffer","target","result","observer","useState","loading","setLoading","removeFont","enqueueSnackbar","useSnackbar","List","disablePadding","ListItem","disableGutters","divider","ListItemText","ListItemSecondaryAction","IconButton","edge","onClick","Button","component","fullWidth","startIcon","CircularProgress","disabled","hidden","onChange","event","files","arrBuf","ArrayBuffer","catch","message","Sentry","accept","GridInput","before","children","after","childrenWidth","Grid","container","wrap","justifyContent","alignItems","xs","Typography","noWrap","align","Input","inputProps","setLineHeight","step","Box","paddingX","marginY","setText","isIME","setIsIME","inputText","setInputText","handleCompositionStart","useCallback","useEffect","TextField","multiline","rows","spellCheck","onCompositionStart","onCompositionEnd","setPadding","setSpacing","setAuto","Checkbox","checked","setFixedSize","setWidth","setHeight","PackConfig","FormAdjustMetric","setXAdvance","setXOffset","setYOffset","getHandle","handleSet","useStyles","makeStyles","createStyles","root","overflow","LeftBar","classes","bgcolor","display","flexDirection","className","boxShadow","flex","Divider","addProject","handleNewProject","preventDefault","hotkeys","unbind","title","getVersionNumber","version","isArray","reverse","reduce","previousValue","currentValue","currentIndex","pow","prefix","s","decode","byteLength","perfixBuffer","perfixName","slice","filePrefix","versionBuffer","isSbf","check","getVersion","$Reader","$protobuf","$Writer","$util","$root","properties","prototype","encode","writer","hasOwnProperty","call","uint32","sint32","encodeDelimited","ldelim","end","undefined","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","toObject","options","defaults","toJSON","constructor","toJSONOptions","GradientColor","int32","string","isString","String","emptyArray","float","fork","error","TypeError","arrays","json","isFinite","newBuffer","double","emptyObject","end2","tag2","isObject","keys2","objects","bool","Boolean","power","Long","fromBits","int64","low","high","fromValue","unsigned","LongBits","toNumber","long","longs","toString","updateToNext","fixOffset","FontResource","oldProto","proto1000000","proto1000001","proto1000002","verions","verion","updateOldProject","v","projectBuffer","ProjectProto","finish","encodeProject","sbfFile","ext","u8","decodeProto","console","log","protoProject","imgKerning","k","gl","glyphKerning","toOriginBuffer","schema","glow","quality","colors","elements","glowEnabled","alphas","ratios","blurX","blurY","strength","distance","gradientAlphas","gradientType","enum","gradientRotation","fillType","textureScale","distanceFieldEnabled","distanceFieldColor","gradientColors","distanceFieldDownscale","distanceFieldSpread","distanceFieldType","gradientRatios","optionalProperties","texture","settings","postfixes","filename","scalings","shadowEnabled","alpha","pixelHinting","strokeEnabled","miterLimit","jointStyle","bevel","bevelEnabled","highlightColor","highlightAlpha","shadowAlpha","powerOfTwo","canvasHeight","packMethod","canvasWidth","roundValues","descriptionFormat","fallbackfont","validate","Ajv","compile","litteraStr","litteraData","JSON","isLittera","errors","category","level","Info","transformFill","litteraFill","SOLID","Color","hex","GRADIENT","RADIAL","LINEAR","assign","round","conversionList","sbf","conversion","inputFile","worckSpace","labelRef","useRef","test","handleSaveProject","toJS","saveAs","formatStr","matchs","returns","outputConfig","exts","getString","bmfont","info","pages","chars","kernings","charset","char","count","parser","DOMParser","xmlDOM","implementation","createDocument","infoDoc","parseFromString","documentElement","childNodes","commonDoc","pagesDoc","charsDoc","charDoc","kerningsDoc","kerningDoc","XMLSerializer","serializeToString","toBmfInfo","fontScale","unitsPerEm","face","mainFamily","bold","italic","unicode","stretchH","smooth","aa","base","scaleW","scaleH","packed","xoffset","yoffset","xadvance","page","chnl","amount","getKerningValue","charToGlyphIndex","first","second","configList","xml","setShowPreview","open","setOpen","val","setVal","handleOpen","handleClose","handleSave","zip","JSZip","toBlob","blob","generateAsync","content","exportFile","Dialog","onClose","DialogTitle","DialogContent","dividers","Select","displayEmpty","MenuItem","toUpperCase","DialogActions","autoFocus","zIndex","appBar","appName","marginRight","appNameSup","btn","textTransform","TitleBar","href","picker","borderColor","border","WrappedSketchPicker","anchorEl","placement","pickerStyle","useTheme","shadows","usePickerStyle","Popper","styles","rgb","g","swatch","cursor","ColorInput","ClickAwayListener","mouseEvent","onClickAway","current","FormColor","borderWidth","isActive","borderStyle","dark","activeColor","grey","ColorStop","divProps","clsx","ColorStopsHolder","onAdd","onUpdate","onSelect","setStartPoint","isDragging","setIsDragging","rootRef","clientWidth","handleMouseMove","buttons","findIndex","paletteItem","newPalette","clientY","clientX","handleMouseUp","stopPropagation","removeEventListener","onMouseDown","getBoundingClientRect","handleMouseDown","svg","verticalAlign","Palette","random","substr","sortedPalette","x1","y1","x2","y2","stopColor","GradientBuilder","rootEl","oldPalette","setOldPalette","setActiveId","setActiveColor","isAdd","setIsAdd","newIds","oldIds","diff","handleUpdate","isDelete","updateItem","right","offsetSpace","leftColor","rightColor","red","green","blue","React","cloneElement","point","marginTop","transformOrigin","transform","AnglePicker","bounds","radians","atan2","FormAngle","updatePalette","setAngle","setType","RadioGroup","row","flexWrap","FormControlLabel","control","Radio","label","FileSelector","multiple","alt","FormImage","setRepetition","setScale","setColor","IMAGE","setUseStroke","setLineJoin","setLineCap","Switch","ButtonGroup","setUseShadow","setOffsetX","setOffsetY","setBlur","setBgColor","RightBar","useWheel","onWheel","deps","callback","handleWheel","ctrlKey","altKey","deltaX","deltaY","d","deltaScale","dom","passive","useSpaceDrag","onMove","ks","ms","moveState","setMoveState","dragStatus","useMemo","moveCallback","handleKeyEvent","state","keyCode","handleMove","handleEnd","dragState","imageRendering","packWidth","packHeight","setCanvas","canvasRef","domRef","offsetInfo","ix","iy","os","ox","oy","fillRect","animationDuration","LinearProgress","PackView","outline","select","setSelectLetter","handleSelect","setData","minBaseLine","maxBaseLine","setPreviewTransform","lh","index","baseLine","basey","beginPath","moveTo","lineTo","setLineDash","lines","autorun","kerningMap","charMap","minX","minY","maxX","maxY","lk","kering","getPreviewCanvas","setPreviewText","setOffset","setGlyph","setKerning","disposer","steKerning","Preview","PreviewText","PreviewMertic","PreviewKerning","to","toast","animationName","icon","minHeight","borderRight","whiteSpace","editor","appearance","ProjectTab","useRemove","onRemove","onRename","setEditor","sname","setSName","editorRef","handleRemove","focus","onDoubleClick","onKeyDown","onBlur","workSpace","selectProject","removeProject","setProjectName","Tabs","indicatorColor","textColor","scrollButtons","selectionFollowsFocus","TabIndicatorProps","slider","anchorRef","handleChange","Slider","prevOpen","Paper","contains","MenuList","actions","inputLabel","removeImage","inputValue","setInputValue","changeSelect","direction","InputBase","onFocus","onInput","iv","fixed","panel","continer","overflowY","listWrap","addImages","isFullscreen","setFullscreen","handleLoadFile","matched","fileList","f","handleKeyDown","tagName","onDragEnter","onDragOver","onDrop","dataTransfer","Accordion","expanded","o","TransitionProps","AccordionSummary","expandIcon","AccordionDetails","tabsRoot","tabRoot","tabSelected","tabWrapper","WorkSpace","close","ConsecutiveSnackbars","reason","updateVersion","detail","Snackbar","anchorOrigin","vertical","horizontal","Fragment","location","reload","loadingBackdrop","drawer","Backdrop","App","ThemeProvider","CssBaseline","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","dsn","process","release","integrations","Integrations","BrowserTracing","tracesSampleRate","environment","ReactDOM","render","getElementById","origin","fetch","headers","response","contentType","status","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","waiting","channel","MessageChannel","port1","onmessage","dispatchEvent","CustomEvent","port2"],"mappings":"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","file":"static/js/main.2cccf656.chunk.js","sourcesContent":["import { action, observable } from 'mobx'\n\nclass Ui {\n  @observable globalLoader = 0\n\n  @action.bound showGlobalLoader(num = 1): void {\n    this.globalLoader += num\n  }\n\n  @action.bound hideGlobalLoader(num = -1): void {\n    this.globalLoader += num\n  }\n}\n\nexport default Ui\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/AutoPacker.d4f5dd9550ff18a5dd82.worker.js\");\n}\n","type UseType<T, U> = T extends U ? true : false\r\n\r\ntype IsNumber<T> = UseType<T, number>\r\n\r\nconst num = <T>(n: T): IsNumber<T> => {\r\n  return (typeof n === 'number' && !Number.isNaN(n)) as IsNumber<T>\r\n}\r\n\r\nconst is = {\r\n  num,\r\n}\r\n\r\nexport default is\r\n","import fontStyleStringify from './fontStyleStringify'\n\ninterface StyleConig {\n  fontFamily: string\n  fontSize: number\n}\ninterface Baselines {\n  middle: number\n  hanging: number\n  top: number\n  alphabetic: number\n  ideographic: number\n  bottom: number\n}\n\nlet canvas: HTMLCanvasElement\n\nexport default function getTextBaselines(\n  text: string,\n  styleConig: StyleConig,\n): Baselines {\n  if (!canvas) canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  if (!ctx) throw new Error('Get context 2d failed.')\n  const font = fontStyleStringify(styleConig)\n\n  // clear before settings\n  canvas.width = 1\n  canvas.height = 1\n\n  ctx.font = font\n\n  ctx.textBaseline = 'middle'\n  const middle = ctx.measureText(text)\n  ctx.textBaseline = 'hanging'\n  const hanging = ctx.measureText(text)\n  ctx.textBaseline = 'top'\n  const top = ctx.measureText(text)\n  ctx.textBaseline = 'alphabetic'\n  const alphabetic = ctx.measureText(text)\n  ctx.textBaseline = 'ideographic'\n  const ideographic = ctx.measureText(text)\n  ctx.textBaseline = 'bottom'\n  const bottom = ctx.measureText(text)\n\n  return {\n    middle: 0,\n    hanging: hanging.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\n    top: top.actualBoundingBoxAscent - middle.actualBoundingBoxAscent,\n    alphabetic:\n      middle.actualBoundingBoxDescent - alphabetic.actualBoundingBoxDescent,\n    ideographic:\n      middle.actualBoundingBoxDescent - ideographic.actualBoundingBoxDescent,\n    bottom: middle.actualBoundingBoxDescent - bottom.actualBoundingBoxDescent,\n  }\n}\n","import is from './is'\r\n\r\nconst num = <T extends unknown>(a: T, b: number): number => {\r\n  if (is.num(a)) return a as number\r\n  return b\r\n}\r\n\r\nconst use = {\r\n  num,\r\n}\r\n\r\nexport default use\r\n","import { action, observable } from 'mobx'\r\nimport use from 'src/utils/use'\r\n\r\nclass Ui {\r\n  @observable scale = 1\r\n\r\n  @observable offsetX = 0\r\n\r\n  @observable offsetY = 0\r\n\r\n  @observable width = 0\r\n\r\n  @observable height = 0\r\n\r\n  @observable previewText = 'Hello World!\\nHello Snow Bamboo!' // /\\r\\n|\\r|\\n/\r\n\r\n  @observable selectLetter = ''\r\n\r\n  @observable selectNextLetter = ''\r\n\r\n  @observable showPreview = false\r\n\r\n  @observable previewScale = 1\r\n\r\n  @observable previewOffsetX = 0\r\n\r\n  @observable previewOffsetY = 0\r\n\r\n  @observable packFailed = false\r\n\r\n  constructor(ui: Partial<Ui> = {}) {\r\n    if (ui.previewText) {\r\n      this.previewText = ui.previewText\r\n    }\r\n  }\r\n\r\n  reOffset() {\r\n    this.offsetX = Math.min(\r\n      Math.max(this.width / -2, this.offsetX),\r\n      this.width / 2,\r\n    )\r\n    this.offsetY = Math.min(\r\n      Math.max(this.height / -2, this.offsetY),\r\n      this.height / 2,\r\n    )\r\n    this.scale = Math.max(this.scale, 0.01)\r\n  }\r\n\r\n  @action.bound setTransform(trans: Partial<Ui>): void {\r\n    this.scale = use.num(trans.scale, this.scale)\r\n    this.offsetX = use.num(trans.offsetX, this.offsetX)\r\n    this.offsetY = use.num(trans.offsetY, this.offsetY)\r\n    this.reOffset()\r\n  }\r\n\r\n  @action.bound setSize(width: number, height: number): void {\r\n    this.width = width\r\n    this.height = height\r\n    this.reOffset()\r\n  }\r\n\r\n  @action.bound setPreviewText(text: string): void {\r\n    this.previewText = text\r\n  }\r\n\r\n  @action.bound setShowPreview(showPreview: boolean): void {\r\n    this.showPreview = showPreview\r\n  }\r\n\r\n  @action.bound setPreviewTransform(trans: Partial<Ui>): void {\r\n    this.previewScale = Math.max(\r\n      use.num(trans.previewScale, this.previewScale),\r\n      0.01,\r\n    )\r\n    this.previewOffsetX = use.num(trans.previewOffsetX, this.previewOffsetX)\r\n    this.previewOffsetY = use.num(trans.previewOffsetY, this.previewOffsetY)\r\n  }\r\n\r\n  @action.bound setSelectLetter(letter: string = '', next: string = ''): void {\r\n    this.selectLetter = letter\r\n    this.selectNextLetter = next\r\n  }\r\n\r\n  @action.bound setPackFailed(packFailed: boolean): void {\r\n    this.packFailed = packFailed\r\n  }\r\n}\r\n\r\nexport default Ui\r\n","import is from './is'\n\nexport interface FontStyleConfig {\n  fontStyle?: 'normal' | 'italic' | 'oblique' | string\n  fontVariant?: 'normal' | 'none' | 'small-caps' | string\n  fontWeight?:\n    | 'normal'\n    | 'bold'\n    | 'lighter'\n    | 'bolder'\n    | '100'\n    | '200'\n    | '300'\n    | '400'\n    | '500'\n    | '600'\n    | '700'\n    | '800'\n    | '900'\n    | 100\n    | 200\n    | 300\n    | 400\n    | 500\n    | 600\n    | 700\n    | 800\n    | 900\n    | 'inherit'\n    | 'initial'\n    | 'unset'\n  fontSize?: string | number\n  lineHeight?: string | number\n  fontFamily?: string\n}\n\nconst defaultConfig: FontStyleConfig = {\n  fontSize: '14px',\n  fontFamily: 'sans-serif',\n}\n\n// https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\nexport default function fontStyleStringify(\n  fontStyleConfig: FontStyleConfig,\n): string {\n  const config = { ...defaultConfig, ...fontStyleConfig }\n  const arr = []\n\n  if (config.fontStyle) arr.push(config.fontStyle)\n\n  if (config.fontVariant) arr.push(config.fontVariant)\n\n  if (config.fontWeight) arr.push(config.fontWeight)\n\n  if (is.num(config.fontSize)) {\n    config.fontSize = `${config.fontSize}px`\n  } else {\n    config.fontSize = defaultConfig.fontSize\n  }\n\n  if (config.lineHeight) {\n    arr.push(`${config.fontSize}/${config.lineHeight}`)\n  } else {\n    arr.push(config.fontSize)\n  }\n\n  arr.push(config.fontFamily)\n\n  return arr.join(' ')\n}\n","let fontTargeCache: HTMLStyleElement\nlet loadDiv: HTMLDivElement\n\nexport default function updateFontFace(\n  name: string,\n  url: string,\n): Promise<void> {\n  const cssNode = document.createTextNode(`\n    @font-face {\n        font-family: \"${name}\";\n        src: url(\"${url}\") format('truetype');\n    }`)\n\n  if (!fontTargeCache) {\n    const textNode = document.createTextNode(`A`)\n    fontTargeCache = document.createElement('style')\n    loadDiv = document.createElement('div')\n    document.head.appendChild(fontTargeCache)\n    fontTargeCache.appendChild(cssNode)\n    loadDiv.appendChild(textNode)\n    loadDiv.style.position = 'absolute'\n    loadDiv.style.left = '-1000px'\n    loadDiv.style.top = '-1000px'\n    loadDiv.style.opacity = '0'\n    loadDiv.style.fontSize = '12px'\n    loadDiv.style.pointerEvents = 'none'\n    document.body.appendChild(loadDiv)\n  } else {\n    fontTargeCache.appendChild(cssNode)\n  }\n  loadDiv.style.fontFamily = name\n  return new Promise((resolve) => setTimeout(resolve, 200))\n}\n","import { action, observable, computed, runInAction } from 'mobx'\r\nimport getTextBaselines from 'src/utils/getTextBaselines'\r\nimport { parse, Font as OpenType } from 'opentype.js'\r\nimport updateFontFace from 'src/utils/updateFontFace'\r\n\r\nexport interface FontResource {\r\n  font: ArrayBuffer\r\n  family: string\r\n  opentype: OpenType\r\n}\r\n\r\nconst DEFAULT_FAMILY = 'sans-serif'\r\n\r\nclass Font {\r\n  @observable fonts: FontResource[] = []\r\n\r\n  @observable size: number\r\n\r\n  @observable lineHeight = 1.25\r\n\r\n  @observable middle = 0\r\n\r\n  @observable hanging = 0\r\n\r\n  @observable top = 0\r\n\r\n  @observable alphabetic = 0\r\n\r\n  @observable ideographic = 0\r\n\r\n  @observable bottom = 0\r\n\r\n  @computed get mainFont() {\r\n    if (this.fonts.length > 0) return this.fonts[0]\r\n    return null\r\n  }\r\n\r\n  @computed get mainFamily() {\r\n    if (this.mainFont) return this.mainFont.family\r\n    return DEFAULT_FAMILY\r\n  }\r\n\r\n  @computed get opentype() {\r\n    if (this.mainFont) return this.mainFont.opentype\r\n    return null\r\n  }\r\n\r\n  @computed get family(): string {\r\n    return (\r\n      this.fonts.map((fontResource) => `\"${fontResource.family}\"`).join(',') ||\r\n      DEFAULT_FAMILY\r\n    )\r\n  }\r\n\r\n  @computed get minBaseLine() {\r\n    const min = Math.min(\r\n      this.middle,\r\n      this.hanging,\r\n      this.top,\r\n      this.alphabetic,\r\n      this.ideographic,\r\n      this.bottom,\r\n    )\r\n    if (Number.isNaN(Number(min))) return 0\r\n    return min\r\n  }\r\n\r\n  @computed get maxBaseLine() {\r\n    const max = Math.max(\r\n      this.middle,\r\n      this.hanging,\r\n      this.top,\r\n      this.alphabetic,\r\n      this.ideographic,\r\n      this.bottom,\r\n    )\r\n    if (Number.isNaN(Number(max))) return this.size\r\n    return max\r\n  }\r\n\r\n  constructor(font: Partial<Font> = {}) {\r\n    this.size = font.size || 72\r\n    this.lineHeight = font.lineHeight || 1.25\r\n    if (font.fonts && font.fonts.length) {\r\n      font.fonts.forEach((fontResource) => this.addFont(fontResource.font))\r\n    } else {\r\n      this.updateBaseines()\r\n    }\r\n  }\r\n\r\n  updateBaseines(): void {\r\n    const bls = getTextBaselines('a', {\r\n      fontFamily: this.family,\r\n      fontSize: this.size,\r\n    })\r\n\r\n    this.middle = bls.middle\r\n    this.hanging = bls.hanging\r\n    this.top = bls.top\r\n    this.alphabetic = bls.alphabetic\r\n    this.ideographic = bls.ideographic\r\n    this.bottom = bls.bottom\r\n  }\r\n\r\n  @action.bound addFont(font: ArrayBuffer): Promise<void> {\r\n    let opentype: OpenType\r\n    try {\r\n      opentype = parse(font, { lowMemory: true })\r\n    } catch (e) {\r\n      return Promise.reject(e)\r\n    }\r\n    const { names } = opentype\r\n    const family = names.postScriptName[Object.keys(names.postScriptName)[0]]\r\n    const hasFont = this.fonts.find(\r\n      (fontResource) => fontResource.family === family,\r\n    )\r\n    if (hasFont) {\r\n      return Promise.reject(new Error('Font already exists.'))\r\n    }\r\n    const url = URL.createObjectURL(new Blob([font]))\r\n    return updateFontFace(family, url).then(() => {\r\n      runInAction(() => {\r\n        this.fonts.push({\r\n          font,\r\n          family,\r\n          opentype,\r\n        })\r\n        this.updateBaseines()\r\n      })\r\n    })\r\n  }\r\n\r\n  @action.bound removeFont(fontResource: FontResource) {\r\n    const idx = this.fonts.indexOf(fontResource)\r\n    if (idx === -1) return\r\n    this.fonts.splice(idx, 1)\r\n  }\r\n\r\n  @action.bound setSize(size: number): void {\r\n    this.size = size\r\n    this.updateBaseines()\r\n  }\r\n\r\n  @action.bound setLineHeight(lineHeight: number): void {\r\n    this.lineHeight = lineHeight\r\n  }\r\n}\r\n\r\nexport default Font\r\n","import { action, computed, observable } from 'mobx'\r\n\r\n// import GradientPaletteItem from './gradientPaletteItem'\r\n\r\nexport enum GradientType {\r\n  LINEAR,\r\n  RADIAL,\r\n}\r\n\r\nexport interface GradientColor {\r\n  offset: number\r\n  color: string\r\n}\r\n\r\nexport interface GradientPaletteItem extends GradientColor {\r\n  id: number\r\n}\r\n\r\nexport interface GradientColorOption extends GradientColor {\r\n  id?: number\r\n}\r\n\r\nclass Gradient {\r\n  @observable type: GradientType = 0\r\n\r\n  @observable angle: number\r\n\r\n  @observable.shallow palette: GradientPaletteItem[] = []\r\n\r\n  constructor(gradient: Partial<Gradient> = {}) {\r\n    this.type = gradient.type && GradientType[gradient.type] ? gradient.type : 0\r\n    this.angle = gradient.angle || 0\r\n    if (gradient.palette) {\r\n      gradient.palette.forEach((item) => {\r\n        this.palette.push({\r\n          ...item,\r\n          id: item.id || this.nextId,\r\n        })\r\n      })\r\n    } else {\r\n      this.addColor(0, '#FFF')\r\n      this.addColor(1)\r\n    }\r\n  }\r\n\r\n  @computed get ids(): number[] {\r\n    return this.palette.map((color) => color.id)\r\n  }\r\n\r\n  @computed get nextId(): number {\r\n    if (this.ids.length === 0) return 1\r\n    return Math.max(...this.ids) + 1\r\n  }\r\n\r\n  @action.bound setType(type: GradientType): void {\r\n    this.type = type\r\n  }\r\n\r\n  @action.bound setAngle(angle: number): void {\r\n    this.angle = angle\r\n  }\r\n\r\n  @action.bound addColor(offset = 0, color = '#000000'): void {\r\n    this.palette.push({ offset, color, id: this.nextId })\r\n  }\r\n\r\n  @action.bound updatePalette(palette: GradientPaletteItem[]): void {\r\n    this.palette = palette\r\n  }\r\n}\r\n\r\nexport default Gradient\r\n","export default function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = atob(base64)\n  const len = binaryString.length\n  const bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i += 1) {\n    bytes[i] = binaryString.charCodeAt(i)\n  }\n  return bytes.buffer\n}\n","import { action, observable, runInAction } from 'mobx'\nimport use from 'src/utils/use'\nimport base64ToArrayBuffer from 'src/utils/base64ToArrayBuffer'\n\nexport type Repetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat'\n\nconst DEFAULT_IMAGE =\n  'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX////MzMw46qqDAAAADklEQVQI12Pgh8IPEAgAEeAD/Xk4HBcAAAAASUVORK5CYII='\n\nclass PatternTexture {\n  @observable.ref buffer: ArrayBuffer = base64ToArrayBuffer(DEFAULT_IMAGE)\n\n  @observable.ref image: HTMLImageElement | null = null\n\n  @observable src = ''\n\n  @observable repetition: Repetition = 'repeat'\n\n  @observable scale: number\n\n  constructor(pt: Partial<PatternTexture> = {}) {\n    this.scale = use.num(pt.scale, 1)\n    this.repetition = pt.repetition || 'repeat'\n    this.setImage(pt.buffer || this.buffer)\n  }\n\n  @action.bound setImage(buffer: ArrayBuffer): void {\n    const src = URL.createObjectURL(new Blob([buffer]))\n    const img = new Image()\n    img.onload = () => {\n      runInAction('setPatternTextureImage', () => {\n        this.buffer = buffer\n        this.image = img\n        this.src = src\n        img.onload = null\n      })\n    }\n    img.src = src\n  }\n\n  @action.bound setRepetition(repetition: Repetition): void {\n    this.repetition = repetition\n  }\n\n  @action.bound setScale(scale: number): void {\n    this.scale = scale\n  }\n}\n\nexport default PatternTexture\n","import { action, observable } from 'mobx'\n\nimport Gradient from './gradient'\nimport PatternTexture from './patternTexture'\n\nexport enum FillType {\n  SOLID,\n  GRADIENT,\n  IMAGE,\n}\n\nclass Fill {\n  @observable type: FillType\n\n  @observable color: string\n\n  @observable.shallow gradient: Gradient\n\n  @observable.shallow patternTexture: PatternTexture\n\n  constructor(fill: Partial<Fill> = {}) {\n    this.color = fill.color || '#000000'\n    this.type = fill.type && FillType[fill.type] ? fill.type : 0\n    this.gradient = new Gradient(fill.gradient)\n    this.patternTexture = new PatternTexture(fill.patternTexture)\n  }\n\n  @action.bound setType(type: FillType = 0): void {\n    this.type = type\n  }\n\n  @action.bound setColor(color = '#000000'): void {\n    this.color = color\n  }\n}\n\nexport default Fill\n","import fontStyleStringify, { FontStyleConfig } from './fontStyleStringify'\n\nexport interface TextSize {\n  text: string\n  font: string\n  width: number\n  height: number\n  fontWidth: number\n  fontHeight: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n  trimOffsetRight: number\n  trimOffsetBottom: number\n}\n\nlet canvas: HTMLCanvasElement\n\nexport default function getTextSize(\n  text: string,\n  config: FontStyleConfig,\n): TextSize {\n  if (!canvas) canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  if (!ctx) throw new Error('Get context 2d failed.')\n\n  // clear before settings\n  canvas.width = 1\n  canvas.height = 1\n\n  const font = fontStyleStringify(config)\n\n  ctx.font = font\n\n  ctx.textAlign = 'left'\n  ctx.textBaseline = 'bottom'\n\n  const testA = ctx.measureText(text)\n\n  if (typeof testA.actualBoundingBoxLeft === 'undefined') {\n    return {\n      text,\n      font,\n      width: testA.width,\n      height: parseInt(`${config.fontSize ?? '14'}`, 10),\n      fontWidth: testA.width,\n      fontHeight: parseInt(`${config.fontSize ?? '14'}`, 10),\n      trimOffsetTop: 0,\n      trimOffsetLeft: 0,\n      trimOffsetRight: 0,\n      trimOffsetBottom: 0,\n    }\n  }\n\n  ctx.textAlign = 'right'\n  ctx.textBaseline = 'top'\n\n  const testB = ctx.measureText(text)\n\n  const trimOffsetLeft = Math.ceil(testA.actualBoundingBoxLeft)\n  const trimOffsetRight = Math.ceil(testB.actualBoundingBoxRight)\n  const trimOffsetTop = Math.ceil(testB.actualBoundingBoxAscent)\n  const trimOffsetBottom = Math.ceil(testA.actualBoundingBoxDescent)\n  const width = trimOffsetLeft + Math.ceil(testA.actualBoundingBoxRight)\n  const height = trimOffsetBottom + Math.ceil(testA.actualBoundingBoxAscent)\n  const fontWidth = Math.ceil(testA.width)\n  const fontHeight =\n    testA.actualBoundingBoxAscent - testB.actualBoundingBoxAscent\n\n  return {\n    text,\n    font,\n    width,\n    height,\n    fontWidth,\n    fontHeight,\n    trimOffsetTop,\n    trimOffsetLeft,\n    trimOffsetRight,\n    trimOffsetBottom,\n  }\n}\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nimport Fill from './fill'\n\nclass Stroke extends Fill {\n  @observable width = 1\n\n  /**\n   * butt   默认。向线条的每个末端添加平直的边缘。\n   * round  向线条的每个末端添加圆形线帽。\n   * square 向线条的每个末端添加正方形线帽。\n   */\n  @observable lineCap: CanvasLineCap\n\n  /**\n   * bevel 创建斜角。\n   * round 创建圆角。\n   * miter 默认。创建尖角。\n   */\n  @observable lineJoin: CanvasLineJoin\n\n  constructor(stroke: Partial<Stroke> = {}) {\n    super(stroke)\n    this.width = use.num(stroke.width, 1)\n    this.lineCap = stroke.lineCap || 'round'\n    this.lineJoin = stroke.lineJoin || 'round'\n  }\n\n  @action.bound setWidth(width: number): void {\n    this.width = width\n  }\n\n  @action.bound setLineCap(lineCap: CanvasLineCap): void {\n    this.lineCap = lineCap\n  }\n\n  @action.bound setLineJoin(lineJoin: CanvasLineJoin): void {\n    this.lineJoin = lineJoin\n  }\n}\n\nexport default Stroke\n","import { action, observable } from 'mobx'\nimport use from 'src/utils/use'\n\nclass Shadow {\n  @observable color: string\n\n  @observable blur = 1\n\n  @observable offsetX = 1\n\n  @observable offsetY = 1\n\n  constructor(shadow: Partial<Shadow> = {}) {\n    this.color = shadow.color || '#000000'\n    this.blur = use.num(shadow.blur, 1)\n    this.offsetX = use.num(shadow.offsetX, 1)\n    this.offsetY = use.num(shadow.offsetY, 1)\n  }\n\n  @action.bound setColor(color: string): void {\n    this.color = color\n  }\n\n  @action.bound setBlur(blur: number): void {\n    this.blur = blur\n  }\n\n  @action.bound setOffsetX(offsetX: number): void {\n    this.offsetX = offsetX\n  }\n\n  @action.bound setOffsetY(offsetY: number): void {\n    this.offsetY = offsetY\n  }\n\n  @action.bound setOffset(offsetX: number, offsetY: number): void {\n    this.offsetX = offsetX\n    this.offsetY = offsetY\n  }\n}\n\nexport default Shadow\n","import { action, observable } from 'mobx'\n\nimport Font from './font'\nimport Fill from './fill'\nimport Stroke from './stroke'\nimport Shadow from './shadow'\n\nclass Style {\n  @observable readonly font: Font\n\n  @observable readonly fill: Fill\n\n  @observable useStroke: boolean\n\n  @observable readonly stroke: Stroke\n\n  @observable useShadow: boolean\n\n  @observable readonly shadow: Shadow\n\n  @observable bgColor = 'rgba(0,0,0,0)'\n\n  constructor(style: Partial<Style> = {}) {\n    this.font = new Font(style.font)\n    this.fill = new Fill(style.fill)\n    this.stroke = new Stroke(style.stroke)\n    this.shadow = new Shadow(style.shadow)\n    this.useShadow = !!style.useShadow\n    this.useStroke = !!style.useStroke\n  }\n\n  @action.bound setUseStroke(useStroke: boolean): void {\n    this.useStroke = useStroke\n  }\n\n  @action.bound setUseShadow(useShadow: boolean): void {\n    this.useShadow = useShadow\n  }\n\n  @action.bound setBgColor(bgColor: string): void {\n    this.bgColor = bgColor\n  }\n}\n\nexport default Style\n","import { action, observable } from 'mobx'\r\nimport use from 'src/utils/use'\r\n\r\nclass Layout {\r\n  @observable padding = 1\r\n\r\n  @observable spacing = 1\r\n\r\n  @observable width = 1024\r\n\r\n  @observable height = 1024\r\n\r\n  @observable auto = true\r\n\r\n  @observable fixedSize = false\r\n\r\n  constructor(layout: Partial<Layout> = {}) {\r\n    this.padding = use.num(layout.padding, 1)\r\n\r\n    this.spacing = use.num(layout.spacing, 1)\r\n\r\n    this.width = use.num(layout.width, 1024)\r\n\r\n    this.height = use.num(layout.height, 1024)\r\n\r\n    // Compatible with old files, default true.\r\n    this.auto = layout.auto === false ? false : true\r\n\r\n    this.fixedSize = !!layout.fixedSize\r\n  }\r\n\r\n  @action.bound setPadding(padding: number): void {\r\n    this.padding = padding\r\n  }\r\n\r\n  @action.bound setSpacing(spacing: number): void {\r\n    this.spacing = spacing\r\n  }\r\n\r\n  @action.bound setWidth(width: number): void {\r\n    this.width = width\r\n  }\r\n\r\n  @action.bound setHeight(height: number): void {\r\n    this.height = height\r\n  }\r\n\r\n  @action.bound setAuto(auto: boolean): void {\r\n    this.auto = auto\r\n  }\r\n\r\n  @action.bound setFixedSize(fixedSize: boolean): void {\r\n    this.fixedSize = fixedSize\r\n  }\r\n}\r\n\r\nexport default Layout\r\n","import { action, observable } from 'mobx'\n\nclass Metric {\n  @observable xAdvance = 0\n\n  @observable xOffset = 0\n\n  @observable yOffset = 0\n\n  constructor(metric: Partial<Metric> = {}) {\n    this.xAdvance = metric.xAdvance || 0\n    this.xOffset = metric.xOffset || 0\n    this.yOffset = metric.yOffset || 0\n  }\n\n  @action.bound setXAdvance(xAdvance: number): void {\n    this.xAdvance = xAdvance\n  }\n\n  @action.bound setXOffset(xOffset: number): void {\n    this.xOffset = xOffset\n  }\n\n  @action.bound setYOffset(yOffset: number): void {\n    this.yOffset = yOffset\n  }\n}\n\nexport default Metric\n","export interface TrimImageInfo {\n  width: number\n  height: number\n  trimOffsetTop: number\n  trimOffsetLeft: number\n}\n\nexport default function trimImageData(\n  imageData: ImageData,\n  threshold = 0,\n): TrimImageInfo {\n  const { data, width, height } = imageData\n  let topTrim = 0\n  let bottomTrim = 0\n  let leftTrim = 0\n  let rightTrim = 0\n  let topStatus = true\n  let bottomStatus = true\n  let leftStatus = true\n  let rightStatus = true\n\n  let h: number = Math.ceil(height / 2)\n  const w: number = Math.ceil(width / 2)\n\n  for (let i = 0; i < h; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      if (topStatus && data[(i * width + j) * 4 + 3] > threshold) {\n        topStatus = false\n      }\n      if (\n        bottomStatus &&\n        data[((height - i - 1) * width + j) * 4 + 3] > threshold\n      ) {\n        bottomStatus = false\n      }\n      if (!topStatus && !bottomStatus) {\n        break\n      }\n    }\n    if (!topStatus && !bottomStatus) {\n      break\n    }\n    if (topStatus) topTrim += 1\n    if (bottomStatus) bottomTrim += 1\n  }\n\n  if (topTrim + bottomTrim >= height) {\n    // Is empty image.\n    return {\n      trimOffsetLeft: width * -1,\n      trimOffsetTop: height * -1,\n      width: 0,\n      height: 0,\n    }\n  }\n\n  h = height - bottomTrim\n\n  for (let i = 0; i < w; i += 1) {\n    for (let j = topTrim; j < h; j += 1) {\n      if (leftStatus && data[(width * j + i) * 4 + 3] > threshold) {\n        leftStatus = false\n      }\n      if (\n        rightStatus &&\n        data[(width * j + width - i - 1) * 4 + 3] > threshold\n      ) {\n        rightStatus = false\n      }\n      if (!leftStatus && !rightStatus) {\n        break\n      }\n    }\n    if (!leftStatus && !rightStatus) {\n      break\n    }\n    if (leftStatus) leftTrim += 1\n    if (rightStatus) rightTrim += 1\n  }\n\n  return {\n    trimOffsetLeft: leftTrim * -1,\n    trimOffsetTop: topTrim * -1,\n    width: width - leftTrim - rightTrim,\n    height: height - topTrim - bottomTrim,\n  }\n}\n","export interface Point {\n  x: number\n  y: number\n}\n\nexport default function getPointOnCircle(\n  x: number,\n  y: number,\n  r: number,\n  angle: number,\n): Point {\n  return {\n    x: x + r * Math.cos((Math.PI / 180) * angle),\n    y: y + r * Math.sin((Math.PI / 180) * angle),\n  }\n}\n","import getPointOnCircle from './getPointOnCircle'\r\n\r\ninterface GarentColor {\r\n  offset: number\r\n  color: string\r\n}\r\n\r\ninterface Pradient {\r\n  type: 0 | 1\r\n  palette: GarentColor[]\r\n  angle: number\r\n}\r\n\r\ninterface PatternTexture {\r\n  image: HTMLImageElement | null\r\n  repetition: string\r\n  scale: number\r\n}\r\n\r\ninterface Config {\r\n  type: number\r\n  color: string\r\n  gradient: Pradient\r\n  patternTexture: PatternTexture\r\n}\r\n\r\nconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\nconst matrix = svg.createSVGMatrix()\r\n\r\nexport default function getCanvasStyle(\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  config: Config,\r\n): string | CanvasGradient | CanvasPattern {\r\n  // 纯色\r\n  if (config.type === 0) {\r\n    return config.color\r\n  }\r\n\r\n  // 渐变\r\n  if (config.type === 1) {\r\n    const { type, palette, angle } = config.gradient\r\n    let gradient: CanvasGradient\r\n    const cx = x + width / 2\r\n    const cy = y + height / 2\r\n    const r = Math.max(width, height) / 2\r\n    if (type === 0) {\r\n      const startPoint = getPointOnCircle(cx, cy, r, angle + 180)\r\n      const endPoint = getPointOnCircle(cx, cy, r, angle)\r\n      gradient = ctx.createLinearGradient(\r\n        startPoint.x,\r\n        startPoint.y,\r\n        endPoint.x,\r\n        endPoint.y,\r\n      )\r\n    } else {\r\n      gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, r)\r\n    }\r\n\r\n    palette.forEach((color) => {\r\n      gradient.addColorStop(color.offset, color.color)\r\n    })\r\n\r\n    return gradient\r\n  }\r\n\r\n  const { image, repetition, scale } = config.patternTexture\r\n  if (!image) return 'rgba(0,0,0,0)'\r\n\r\n  const pattern = ctx.createPattern(image, repetition)\r\n  if (!pattern) return 'rgba(0,0,0,0)'\r\n  // TODO: Add trim translate and rotate.\r\n  pattern.setTransform(matrix.scale(scale).translate(x, y))\r\n  return pattern\r\n}\r\n","import trimImageData from './trimImageData'\r\nimport getTextSize, { TextSize } from './getTextSize'\r\nimport fontStyleStringify from './fontStyleStringify'\r\nimport getCanvasStyle from './getCanvasStyle'\r\n\r\nexport interface GlyphInfo extends TextSize {\r\n  canvas: HTMLCanvasElement | null\r\n}\r\n\r\ninterface ParentColor {\r\n  offset: number\r\n  color: string\r\n}\r\n\r\ninterface Gradient {\r\n  type: 0 | 1\r\n  palette: ParentColor[]\r\n  angle: number\r\n}\r\n\r\ninterface PatternTexture {\r\n  image: HTMLImageElement | null\r\n  repetition: string\r\n  scale: number\r\n}\r\n\r\ninterface Fill {\r\n  type: number\r\n  color: string\r\n  gradient: Gradient\r\n  patternTexture: PatternTexture\r\n}\r\n\r\ninterface Stroke extends Fill {\r\n  width: number\r\n  lineJoin: CanvasLineJoin\r\n  lineCap: CanvasLineCap\r\n}\r\n\r\ninterface Font {\r\n  family: string\r\n  size: number\r\n}\r\n\r\ninterface Shadow {\r\n  color: string\r\n  blur: number\r\n  offsetX: number\r\n  offsetY: number\r\n}\r\n\r\nexport interface Config {\r\n  font: Font\r\n  fill: Fill\r\n  stroke?: Stroke\r\n  shadow?: Shadow\r\n}\r\n\r\nexport default function getGlyphInfo(text: string, config: Config): GlyphInfo {\r\n  const { font, stroke, shadow, fill } = config\r\n\r\n  const styleConig = {\r\n    fontSize: font.size,\r\n    fontFamily: font.family,\r\n  }\r\n\r\n  const trimInfo = getTextSize(text, styleConig)\r\n  const { width, height, trimOffsetLeft, trimOffsetTop } = trimInfo\r\n  if (width === 0 || height === 0) return { canvas: null, ...trimInfo }\r\n\r\n  const lineWidth = stroke ? stroke.width * 2 : 0 // canvas is center stroke\r\n  let addX = lineWidth\r\n  let addY = lineWidth\r\n  let styleX = (width - font.size) / 2\r\n  let styleY = trimOffsetTop\r\n\r\n  if (shadow) {\r\n    const blur = Math.ceil(shadow.blur * 1.5)\r\n    addX += Math.abs(shadow.offsetX) + blur\r\n    addY += Math.abs(shadow.offsetY) + blur\r\n  }\r\n\r\n  styleX += addX\r\n  styleY += addY\r\n\r\n  let canvas = document.createElement('canvas')\r\n  let ctx = canvas.getContext('2d') as CanvasRenderingContext2D\r\n  canvas.width = width + addX * 2\r\n  canvas.height = height + addY * 2\r\n\r\n  ctx.textAlign = 'left'\r\n  ctx.textBaseline = 'top'\r\n\r\n  ctx.font = fontStyleStringify({\r\n    fontSize: font.size,\r\n    fontFamily: font.family,\r\n  })\r\n\r\n  if (stroke && lineWidth) {\r\n    ctx.lineWidth = lineWidth\r\n    ctx.lineCap = stroke.lineCap\r\n    ctx.lineJoin = stroke.lineJoin\r\n    ctx.strokeStyle = getCanvasStyle(\r\n      ctx,\r\n      styleX,\r\n      styleY,\r\n      font.size,\r\n      font.size,\r\n      stroke,\r\n    )\r\n    ctx.strokeText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\r\n  }\r\n\r\n  ctx.fillStyle = getCanvasStyle(\r\n    ctx,\r\n    styleX,\r\n    styleY,\r\n    font.size,\r\n    font.size,\r\n    fill,\r\n  )\r\n  ctx.fillText(text, addX + trimOffsetLeft, addY + trimOffsetTop)\r\n\r\n  if (shadow) {\r\n    const cvs = document.createElement('canvas')\r\n    cvs.width = width + addX * 2\r\n    cvs.height = height + addY * 2\r\n    const newCtx = cvs.getContext('2d') as CanvasRenderingContext2D\r\n\r\n    newCtx.shadowColor = shadow.color\r\n    newCtx.shadowBlur = shadow.blur\r\n    newCtx.shadowOffsetX = shadow.offsetX\r\n    newCtx.shadowOffsetY = shadow.offsetY\r\n\r\n    newCtx.drawImage(canvas, 0, 0)\r\n\r\n    canvas = cvs\r\n    ctx = newCtx\r\n  }\r\n\r\n  if (canvas.width === 0 || canvas.height === 0) {\r\n    return {\r\n      canvas,\r\n      ...trimInfo,\r\n    }\r\n  }\r\n\r\n  const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n  const styleTrimInfo = trimImageData(imgData)\r\n  canvas.width = styleTrimInfo.width\r\n  canvas.height = styleTrimInfo.height\r\n  trimInfo.width = styleTrimInfo.width\r\n  trimInfo.height = styleTrimInfo.height\r\n  ctx.putImageData(\r\n    imgData,\r\n    styleTrimInfo.trimOffsetLeft,\r\n    styleTrimInfo.trimOffsetTop,\r\n  )\r\n  trimInfo.trimOffsetLeft += addX + styleTrimInfo.trimOffsetLeft\r\n  trimInfo.trimOffsetTop += addY + styleTrimInfo.trimOffsetTop\r\n  trimInfo.trimOffsetBottom +=\r\n    addY +\r\n    (height + addY * 2 + styleTrimInfo.trimOffsetTop - styleTrimInfo.height)\r\n\r\n  return {\r\n    canvas,\r\n    ...trimInfo,\r\n  }\r\n}\r\n","import { observable, action } from 'mobx'\n\nimport Metric from './metric'\n\nexport type GlyphType = 'text' | 'image'\n\nclass GlyphBase {\n  readonly type: GlyphType = 'text'\n\n  @observable letter = ''\n\n  @observable.ref source: HTMLImageElement | HTMLCanvasElement | null = null\n\n  @observable width = 0\n\n  @observable height = 0\n\n  @observable x = 0\n\n  @observable y = 0\n\n  @observable fontWidth = 0\n\n  @observable fontHeight = 0\n\n  @observable trimOffsetTop = 0\n\n  @observable trimOffsetLeft = 0\n\n  @observable trimOffsetRight = 0\n\n  @observable trimOffsetBottom = 0\n\n  @observable.ref adjustMetric: Metric\n\n  @observable kerning: Map<string, number> = new Map()\n\n  constructor(glyph: Partial<GlyphBase> = {}) {\n    this.letter = glyph.letter || ''\n    this.adjustMetric = new Metric(glyph.adjustMetric)\n\n    if (glyph.kerning) {\n      this.kerning = glyph.kerning\n    }\n  }\n\n  @action.bound steKerning(text: string, kerning: number) {\n    this.kerning.set(text, kerning)\n  }\n}\n\nexport default GlyphBase\n","import { action } from 'mobx'\nimport getGlyphInfo, { Config } from 'src/utils/getGlyphInfo'\nimport GlyphBase from './glyphBase'\n\nimport Style from './style'\n\nclass GlyphFont extends GlyphBase {\n  constructor(galyphFont: Partial<GlyphFont> = {}, textStyle: Style) {\n    super(galyphFont)\n    this.setGlyphInfo(textStyle)\n  }\n\n  @action setGlyphInfo(textStyle: Style): void {\n    const { font, fill, useStroke, stroke, useShadow, shadow } = textStyle\n    const config: Config = { font, fill }\n    if (useStroke) config.stroke = stroke\n    if (useShadow) config.shadow = shadow\n\n    const glyphInfo = getGlyphInfo(this.letter, config)\n    this.source = glyphInfo.canvas\n    this.width = glyphInfo.width\n    this.height = glyphInfo.height\n    this.fontWidth = glyphInfo.fontWidth\n    this.fontHeight = glyphInfo.fontHeight\n    this.trimOffsetTop = glyphInfo.trimOffsetTop\n    this.trimOffsetLeft = glyphInfo.trimOffsetLeft\n    this.trimOffsetRight = glyphInfo.trimOffsetRight\n    this.trimOffsetBottom = glyphInfo.trimOffsetBottom\n  }\n}\n\nexport default GlyphFont\n","import { configure } from 'mobx'\r\n\r\nimport Ui from './ui'\r\nimport Workspace from './workspace'\r\n\r\nconfigure({\r\n  enforceActions: 'always',\r\n  computedRequiresReaction: true,\r\n})\r\n\r\nexport interface Store {\r\n  ui: Ui\r\n  workspace: Workspace\r\n}\r\n\r\nlet store: Store\r\n\r\nexport default function createStore(): Store {\r\n  if (!store) store = { ui: new Ui(), workspace: new Workspace() }\r\n  return store\r\n}\r\n\r\nexport type TStore = ReturnType<typeof createStore>\r\n\r\nexport { default as Ui } from './ui'\r\nexport { default as Project } from './project'\r\nexport { default as Workspace } from './workspace'\r\n\r\nexport * from './base'\r\n","import { action, observable, runInAction } from 'mobx'\r\nimport getTrimImageInfo from 'src/utils/getTrimImageInfo'\r\n\r\nimport GlyphBase, { GlyphType } from './glyphBase'\r\n\r\nexport interface FileInfo {\r\n  letter?: string\r\n  fileName: string\r\n  fileType: string\r\n  buffer: ArrayBuffer\r\n}\r\n\r\nclass GlyphImage extends GlyphBase {\r\n  readonly type: GlyphType = 'image'\r\n\r\n  @observable src = '' // 仅显示列表中\r\n\r\n  @observable.ref buffer: ArrayBuffer | null = null\r\n\r\n  @observable fileName = ''\r\n\r\n  @observable fileType = ''\r\n\r\n  @observable selected = true\r\n\r\n  constructor(glyphImage: Partial<GlyphImage>) {\r\n    super(glyphImage)\r\n    this.letter = glyphImage.letter || ''\r\n    this.fileName = glyphImage.fileName || ''\r\n    this.fileType = glyphImage.fileType || ''\r\n    this.buffer = glyphImage.buffer || null\r\n    if (glyphImage.buffer) {\r\n      this.src = URL.createObjectURL(new Blob([glyphImage.buffer]))\r\n      this.initImage()\r\n    }\r\n  }\r\n\r\n  @action.bound initImage(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      const image = new Image()\r\n      image.onload = () => {\r\n        runInAction('trimImage', () => {\r\n          const { naturalWidth, naturalHeight } = image\r\n          this.fontWidth = naturalWidth\r\n          this.fontHeight = naturalHeight\r\n\r\n          const trimInfo = getTrimImageInfo(image)\r\n          this.width = trimInfo.width\r\n          this.height = trimInfo.height\r\n          this.trimOffsetLeft = trimInfo.trimOffsetLeft\r\n          this.trimOffsetTop = trimInfo.trimOffsetTop\r\n          this.trimOffsetRight =\r\n            trimInfo.width - trimInfo.trimOffsetLeft - naturalWidth\r\n          this.trimOffsetBottom =\r\n            trimInfo.height - trimInfo.trimOffsetTop - naturalHeight\r\n\r\n          this.source = trimInfo.canvas\r\n          resolve()\r\n        })\r\n      }\r\n      image.src = this.src\r\n    })\r\n  }\r\n\r\n  @action.bound setGlyph(text: string): void {\r\n    this.letter = text[0] || ''\r\n  }\r\n\r\n  @action.bound changeSelect(isSelect: boolean): void {\r\n    this.selected = isSelect\r\n  }\r\n}\r\n\r\nexport default GlyphImage\r\n","import trimImageData, { TrimImageInfo } from './trimImageData'\n\ninterface TrimInfo extends TrimImageInfo {\n  canvas: HTMLCanvasElement\n}\n\nexport default function getTrimImageInfo(\n  image: HTMLImageElement,\n  threshold = 10,\n): TrimInfo {\n  const width = image.naturalWidth\n  const height = image.naturalHeight\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n  ctx.drawImage(image, 0, 0)\n  const imageData = ctx.getImageData(0, 0, width, height)\n  const trimInfo = trimImageData(imageData, threshold)\n  canvas.width = trimInfo.width\n  canvas.height = trimInfo.height\n  ctx.drawImage(image, trimInfo.trimOffsetLeft, trimInfo.trimOffsetTop)\n\n  return {\n    canvas,\n    ...trimInfo,\n  }\n}\n","import { observable, action, computed } from 'mobx'\r\nimport { deepObserve } from 'mobx-utils'\r\nimport { cancel, request } from 'requestidlecallback'\r\nimport { GuillotineBinPack } from 'rectangle-packer'\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\n// import RectanglePacker from 'worker-loader?filename=static/js/RectanglePacker.[hash].worker.js!src/workers/RectanglePacker.worker'\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport AutoPacker from 'worker-loader?filename=static/js/AutoPacker.[hash].worker.js!src/workers/AutoPacker.worker'\r\n\r\nimport Ui from './base/ui'\r\nimport Style from './base/style'\r\nimport Layout from './base/layout'\r\nimport Metric from './base/metric'\r\nimport GlyphFont from './base/glyphFont'\r\nimport GlyphImage, { FileInfo } from './base/glyphImage'\r\nimport { GlyphType } from './base/glyphBase'\r\ninterface TextRectangle {\r\n  width: number\r\n  height: number\r\n  x: number\r\n  y: number\r\n  letter: string\r\n  type: GlyphType\r\n}\r\n\r\nclass Project {\r\n  @observable name = 'Unnamed'\r\n\r\n  id: number\r\n\r\n  worker: AutoPacker | null = null\r\n\r\n  packStart = 0\r\n\r\n  packTimer = 0\r\n\r\n  idleId = 0\r\n\r\n  @observable isPacking = false\r\n\r\n  @observable text =\r\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!№;%:?*()_+-=.,/|\"\\'@#$^&{}[]'\r\n\r\n  @observable.shallow glyphs: Map<string, GlyphFont> = new Map()\r\n\r\n  @observable.shallow glyphImages: GlyphImage[] = []\r\n\r\n  @observable.ref style: Style\r\n\r\n  @observable.ref layout: Layout\r\n\r\n  @observable.ref globalAdjustMetric: Metric\r\n\r\n  @observable.ref packCanvas: HTMLCanvasElement | null = null\r\n\r\n  @observable.ref ui: Ui = new Ui()\r\n\r\n  constructor(project: Partial<Project> = {}) {\r\n    this.id = project.id || Date.now()\r\n    this.name = project.name || 'Unnamed'\r\n    this.text = project.text || this.text\r\n    this.ui = new Ui(project.ui)\r\n    this.style = new Style(project.style)\r\n    this.layout = new Layout(project.layout)\r\n    this.globalAdjustMetric = new Metric(project.globalAdjustMetric)\r\n\r\n    if (project.glyphs) {\r\n      project.glyphs.forEach((value, key) => {\r\n        this.glyphs.set(key, new GlyphFont(value, this.style))\r\n      })\r\n    }\r\n\r\n    project.glyphImages?.forEach((img) => {\r\n      this.glyphImages.push(new GlyphImage(img))\r\n    })\r\n\r\n    if (!this.glyphs.has(' '))\r\n      this.glyphs.set(' ', new GlyphFont({ letter: ' ' }, this.style))\r\n\r\n    this.addGlyphs(project.text || '')\r\n    this.addAutoRun()\r\n    this.pack()\r\n  }\r\n\r\n  @computed get glyphList(): (GlyphFont | GlyphImage)[] {\r\n    const obj: { [key: string]: GlyphImage } = {}\r\n\r\n    this.glyphImages.forEach((glyph) => {\r\n      if (glyph.letter && glyph.selected) {\r\n        obj[glyph.letter] = glyph\r\n      }\r\n    })\r\n\r\n    return ` ${this.text}`.split('').map((letter) => {\r\n      if (obj[letter]) return obj[letter]\r\n      return this.glyphs.get(letter) as GlyphFont\r\n    })\r\n  }\r\n\r\n  @computed get rectangleList(): TextRectangle[] {\r\n    const { padding, spacing } = this.layout\r\n    return this.glyphList.map((glyph) => {\r\n      const isUnEmpty = !!(glyph.width && glyph.height)\r\n      return {\r\n        letter: glyph.letter,\r\n        type: glyph.type,\r\n        width: isUnEmpty ? glyph.width + padding * 2 + spacing : 0,\r\n        height: isUnEmpty ? glyph.height + padding * 2 + spacing : 0,\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    })\r\n  }\r\n\r\n  @action.bound pack(): void {\r\n    if (this.idleId) return\r\n    if (this.worker) this.worker.terminate()\r\n    this.isPacking = true\r\n    const packList = this.rectangleList.sort((a, b) => b.height - a.height)\r\n    if (!this.layout.auto) {\r\n      const packer = new GuillotineBinPack<TextRectangle>(\r\n        this.layout.width + this.layout.spacing,\r\n        this.layout.height + this.layout.spacing,\r\n      )\r\n\r\n      const list = packList.filter(({ width, height }) => !!(width && height))\r\n\r\n      packer.InsertSizes(list, true, 1, 1)\r\n\r\n      this.setPack(packer.usedRectangles, list)\r\n\r\n      this.isPacking = false\r\n      return\r\n    }\r\n    this.worker = new AutoPacker()\r\n    this.worker.addEventListener(\r\n      'message',\r\n      action('PackerWorkerCallback', (messageEvent) => {\r\n        const { data } = messageEvent\r\n        this.setPack(data)\r\n\r\n        this.isPacking = false\r\n        this.worker?.terminate()\r\n        this.worker = null\r\n      }),\r\n      false,\r\n    )\r\n\r\n    this.worker.postMessage(\r\n      packList.filter(({ width, height }) => !!(width && height)),\r\n    )\r\n  }\r\n\r\n  @action.bound setPack(\r\n    list: TextRectangle[],\r\n    failedList?: TextRectangle[],\r\n  ): void {\r\n    const imgList = this.glyphImages\r\n    let maxWidth = 0\r\n    let maxHeight = 0\r\n    const { auto, fixedSize, width, height, spacing } = this.layout\r\n\r\n    list.forEach((rectangle) => {\r\n      const { letter, x, y, type, width, height } = rectangle\r\n      let glyph: GlyphFont | GlyphImage | undefined\r\n\r\n      if (type === 'image') {\r\n        glyph = imgList.find((gi) => {\r\n          if (gi && gi.letter === letter) return true\r\n          return false\r\n        })\r\n      }\r\n\r\n      if (!glyph) {\r\n        glyph = this.glyphs.get(letter)\r\n      }\r\n\r\n      if (glyph) {\r\n        glyph.x = x || 0\r\n        glyph.y = y || 0\r\n      }\r\n\r\n      maxWidth = Math.max(maxWidth, x + width)\r\n      maxHeight = Math.max(maxHeight, y + height)\r\n    })\r\n\r\n    if (failedList?.length) {\r\n      failedList.forEach((rectangle) => {\r\n        const { letter, type } = rectangle\r\n        let glyph: GlyphFont | GlyphImage | undefined\r\n\r\n        if (type === 'image') {\r\n          glyph = imgList.find((gi) => {\r\n            if (gi && gi.letter === letter) return true\r\n            return false\r\n          })\r\n        }\r\n\r\n        if (!glyph) {\r\n          glyph = this.glyphs.get(letter)\r\n        }\r\n\r\n        if (glyph) {\r\n          glyph.x = 0\r\n          glyph.y = 0\r\n        }\r\n      })\r\n      this.ui.setPackFailed(true)\r\n    } else {\r\n      this.ui.setPackFailed(false)\r\n    }\r\n\r\n    if (!auto && fixedSize) {\r\n      this.ui.setSize(width, height)\r\n      return\r\n    }\r\n\r\n    this.ui.setSize(maxWidth - spacing, maxHeight - spacing)\r\n  }\r\n\r\n  @action.bound packStyle(): void {\r\n    this.isPacking = true\r\n    if (this.worker) {\r\n      this.worker.terminate()\r\n      this.worker = null\r\n    }\r\n    cancel(this.idleId)\r\n\r\n    const tasks: GlyphFont[] = []\r\n\r\n    this.glyphs.forEach((glyph) => {\r\n      tasks.push(glyph)\r\n    })\r\n\r\n    const runTasks = () => {\r\n      this.idleId = request((deadline) => {\r\n        const tr = deadline.timeRemaining()\r\n        const start = Date.now()\r\n        while (tasks.length && tr - (Date.now() - start) > -100) {\r\n          // while (tasks.length) {\r\n          const glyph = tasks.shift()\r\n          if (glyph) glyph.setGlyphInfo(this.style)\r\n        }\r\n\r\n        if (tasks.length) {\r\n          runTasks()\r\n        } else {\r\n          this.idleId = 0\r\n          this.pack()\r\n        }\r\n      })\r\n    }\r\n\r\n    runTasks()\r\n  }\r\n\r\n  @action.bound throttlePack(): void {\r\n    if (this.idleId) return\r\n    window.clearTimeout(this.packTimer)\r\n    if (Date.now() - this.packStart > 500) {\r\n      Promise.resolve().then(this.pack)\r\n    } else {\r\n      this.packTimer = window.setTimeout(() => {\r\n        this.pack()\r\n      }, 500)\r\n    }\r\n    this.packStart = Date.now()\r\n  }\r\n\r\n  addAutoRun(): void {\r\n    const isName = (obj: { name?: unknown }, name: string): boolean =>\r\n      !!(obj.name && obj.name === name)\r\n\r\n    deepObserve(this.glyphs, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.glyphImages, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.layout, () => {\r\n      this.throttlePack()\r\n    })\r\n\r\n    deepObserve(this.style, (change) => {\r\n      if (isName(change, 'bgColor') || isName(change, 'lineHeight')) return\r\n      this.packStyle()\r\n    })\r\n  }\r\n\r\n  @action.bound setText(str: string): void {\r\n    const oldText = this.text\r\n    this.text = str.replace(/\\s/gm, '')\r\n    this.addGlyphs(oldText)\r\n  }\r\n\r\n  @action.bound addGlyphs(oldText = ''): void {\r\n    const currentList = Array.from(new Set(this.text.split('')))\r\n    const oldList = Array.from(new Set(oldText.split('')))\r\n    this.text = currentList.join('')\r\n    const diffList = oldText\r\n      ? Array.from(new Set(currentList.concat(oldList))).filter(\r\n          (t) => !(currentList.includes(t) && oldList.includes(t)),\r\n        )\r\n      : currentList\r\n\r\n    if (!diffList.length) return\r\n\r\n    diffList.forEach((letter) => {\r\n      if (currentList.includes(letter)) {\r\n        this.glyphs.set(letter, new GlyphFont({ letter }, this.style))\r\n      } else {\r\n        // in diff\r\n        this.glyphs.delete(letter)\r\n      }\r\n    })\r\n  }\r\n\r\n  @action.bound addImages<T extends FileInfo>(list: T[]): void {\r\n    Promise.all(\r\n      list.map((img) => {\r\n        const glyphImage = new GlyphImage(img)\r\n        this.glyphImages.push(glyphImage)\r\n        return glyphImage.initImage()\r\n      }),\r\n    ).then(this.pack)\r\n  }\r\n\r\n  @action.bound removeImage(image: GlyphImage): void {\r\n    const idx = this.glyphImages.indexOf(image)\r\n    if (idx > -1) this.glyphImages.splice(idx, 1)\r\n  }\r\n\r\n  @action.bound setCanvas(canvas: HTMLCanvasElement): void {\r\n    this.packCanvas = canvas\r\n  }\r\n\r\n  @action.bound setName(name: string): void {\r\n    this.name = name || this.name\r\n  }\r\n}\r\n\r\nexport default Project\r\n","import { action, observable, runInAction, computed } from 'mobx'\n\nimport Project from './project'\n\nclass Workspace {\n  @observable activeId = 0\n\n  @observable.shallow projectList: Map<number, Project> = new Map()\n\n  constructor() {\n    runInAction(() => {\n      this.activeId = Date.now()\n      const project = new Project({ id: this.activeId })\n      this.projectList.set(project.id, project)\n    })\n  }\n\n  @computed get currentProject(): Project {\n    return this.projectList.get(this.activeId) as Project\n  }\n\n  @computed get namedList(): { id: number; name: string }[] {\n    const list: { id: number; name: string }[] = []\n    this.projectList.forEach((value) => {\n      list.push({\n        id: value.id,\n        name: value.name,\n      })\n    })\n    return list\n  }\n\n  @action.bound selectProject(id: number): void {\n    if (this.projectList.has(id)) this.activeId = id\n  }\n\n  @action.bound removeProject(id: number): void {\n    const list = this.namedList.filter((item) => item.id !== id)\n    if (list.length === 0) return\n    this.activeId = list[0].id\n    this.projectList.delete(id)\n  }\n\n  @action.bound addProject(p: Partial<Project> = {}): void {\n    if (p.id && this.projectList.has(p.id)) {\n      this.activeId = p.id\n      return\n    }\n    if (!p.name) {\n      p.name = 'Unnamed'\n      const namedList: number[] = []\n      this.projectList.forEach((item) => {\n        const named = item.name.match(/^Unnamed-?(\\d+)?$/)\n        if (named) {\n          namedList.push(Number(named[1]) || 0)\n        }\n      })\n      if (namedList.length > 0) {\n        p.name += `-${Math.max(...namedList) + 1}`\n      }\n    }\n\n    const project = new Project(p)\n    this.projectList.set(project.id, project)\n    this.activeId = project.id\n  }\n\n  @action.bound setProjectName(name: string, value: number): void {\n    const project = this.projectList.get(value)\n    if (project) {\n      project.setName(name)\n    }\n  }\n}\n\nexport default Workspace\n","import { ComponentsProps } from '@material-ui/core/styles/props'\n\nconst props: ComponentsProps = {\n  MuiButton: {\n    size: 'small',\n  },\n  MuiButtonBase: {\n    disableRipple: true,\n  },\n  MuiFilledInput: {\n    margin: 'dense',\n  },\n  MuiFormControl: {\n    margin: 'dense',\n  },\n  MuiFormHelperText: {\n    margin: 'dense',\n  },\n  MuiIconButton: {\n    size: 'small',\n  },\n  MuiInputBase: {\n    margin: 'dense',\n  },\n  MuiInputLabel: {\n    margin: 'dense',\n  },\n  MuiListItem: {\n    dense: true,\n  },\n  MuiOutlinedInput: {\n    margin: 'dense',\n  },\n  MuiFab: {\n    size: 'small',\n  },\n  MuiTable: {\n    size: 'small',\n  },\n  MuiTextField: {\n    margin: 'dense',\n  },\n  MuiToolbar: {\n    variant: 'dense',\n  },\n}\n\nexport default props\n","import { Overrides } from '@material-ui/core/styles/overrides'\r\n\r\nconst overrides: Overrides = {\r\n  MuiCssBaseline: {\r\n    '@global': {\r\n      'html,body,#root': {\r\n        width: '100%',\r\n        height: '100%',\r\n      },\r\n      html: {\r\n        fontSize: '14px',\r\n      },\r\n      body: {\r\n        margin: 0,\r\n        // fontFamily: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\r\n        WebkitFontSmoothing: 'antialiased',\r\n        MozOsxFontSmoothing: 'grayscale',\r\n        userSelect: 'none',\r\n      },\r\n      '#root': {\r\n        minWidth: 900,\r\n      },\r\n      'input::-webkit-inner-spin-button': {\r\n        marginLeft: '10px',\r\n      },\r\n      'input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-inner-spin-button': {\r\n        opacity: 0.3,\r\n      },\r\n      '::-webkit-scrollbar': {\r\n        width: '4px',\r\n        height: '4px',\r\n      },\r\n      '::-webkit-scrollbar-thumb': {\r\n        background: 'rgba(255, 255, 255, 0.2)',\r\n      },\r\n      '::-webkit-scrollbar-track': {\r\n        background: 'rgba(0, 0, 0, 0.1)',\r\n      },\r\n    },\r\n  },\r\n  MuiInputBase: {\r\n    input: {\r\n      '&[type=number]': {\r\n        textAlign: 'right',\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\nexport default overrides\r\n","import { createTheme, responsiveFontSizes } from '@material-ui/core/styles'\r\n\r\nimport props from './props'\r\nimport overrides from './overrides'\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: { main: '#444' },\r\n    secondary: { main: '#424242' },\r\n    background: {\r\n      paper: 'rgb(37, 37, 37)',\r\n      default: 'rgb(30, 30, 30)',\r\n      activityBar: 'rgb(51, 51, 51)',\r\n      titleBar: 'rgb(50, 50, 50)',\r\n      sidebar: 'rgb(37, 37, 37)',\r\n    },\r\n    common: {\r\n      black: 'rgb(30,30,30)',\r\n      white: 'rgb(204,204,204)',\r\n    },\r\n    action: {\r\n      hover: 'rgba(255, 255, 255, 0.1)',\r\n    },\r\n  },\r\n  bgPixel: {\r\n    backgroundColor: '#fff',\r\n    backgroundImage: `\r\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0),\r\n    linear-gradient(45deg, #ccc 25%, transparent 0, transparent 75%, #ccc 0)`,\r\n    backgroundSize: '8px 8px',\r\n    backgroundPosition: '0 0, 4px 4px',\r\n    backgroundRepeat: 'repeat',\r\n  },\r\n  spacing: 4,\r\n  typography: { fontSize: 13 },\r\n  transitions: {\r\n    create: () => 'none',\r\n  },\r\n  shape: { borderRadius: 0 },\r\n  props,\r\n  overrides,\r\n})\r\n\r\nexport default responsiveFontSizes(theme)\r\n","import { useContext } from 'react'\nimport { MobXProviderContext } from 'mobx-react'\nimport {\n  TStore,\n  Workspace,\n  Layout,\n  Project,\n  Style,\n  Font,\n  ProjectUi,\n  FontStyleConfig,\n} from '.'\n\nexport default function useStores(): TStore {\n  return useContext(MobXProviderContext) as TStore\n}\n\nexport function useWorkspace(): Workspace {\n  const store = useStores()\n  return store.workspace\n}\n\nexport function useLayout(): Layout {\n  const store = useStores()\n  return store.workspace.currentProject.layout\n}\n\nexport function useProject(): Project {\n  const store = useStores()\n  return store.workspace.currentProject\n}\n\nexport function useStyle(): Style {\n  const { style } = useProject()\n  return style\n}\n\nexport function useFont(): Font {\n  const { font } = useStyle()\n  return font\n}\n\nexport function useFill(): FontStyleConfig {\n  const { fill } = useStyle()\n  return fill\n}\n\nexport function useProjectUi(): ProjectUi {\n  const { ui } = useProject()\n  return ui\n}\n","function readFile(\r\n  file: File,\r\n  isText?: boolean,\r\n): Promise<string | ArrayBuffer | null> {\r\n  if (file.arrayBuffer && !isText) return file.arrayBuffer()\r\n\r\n  return new Promise((resolve) => {\r\n    const reader = new FileReader()\r\n\r\n    if (isText) {\r\n      reader.readAsText(file)\r\n    } else {\r\n      reader.readAsArrayBuffer(file)\r\n    }\r\n\r\n    reader.onload = (e) => {\r\n      resolve(e?.target?.result || null)\r\n    }\r\n  })\r\n}\r\n\r\nexport default readFile\r\n","import React, { useState, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { useSnackbar } from 'notistack'\r\nimport * as Sentry from '@sentry/react'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport FontDownload from '@material-ui/icons/FontDownload'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\r\n\r\nimport { useFont } from 'src/store/hooks'\r\nimport readFile from 'src/utils/readFile'\r\n\r\nconst FontFamily: FunctionComponent<unknown> = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const { fonts, addFont, removeFont } = useFont()\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const hanleUploadFile = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n  ): void => {\r\n    if (\r\n      !event ||\r\n      !event.target ||\r\n      !event.target.files ||\r\n      !event.target.files[0]\r\n    )\r\n      return\r\n\r\n    const file = event.target.files[0]\r\n    const ext = file.name.match(/\\.([A-Z0-9]+)$/i)\r\n    if (!ext) return\r\n\r\n    setLoading(true)\r\n\r\n    readFile(file).then((arrBuf) => {\r\n      if (!(arrBuf instanceof ArrayBuffer)) {\r\n        setLoading(false)\r\n        return\r\n      }\r\n\r\n      event.target.value = ''\r\n\r\n      addFont(arrBuf)\r\n        .then(() => setLoading(false))\r\n        .catch((e) => {\r\n          setLoading(false)\r\n          enqueueSnackbar(e.message, { variant: 'error' })\r\n          Sentry.captureException(e)\r\n        })\r\n    })\r\n  }\r\n\r\n  // TODO: List add sort.\r\n  return (\r\n    <div>\r\n      <List dense={true} disablePadding={true}>\r\n        {fonts.map((fontResource) => (\r\n          <ListItem\r\n            key={fontResource.family}\r\n            disableGutters={true}\r\n            divider={true}\r\n            dense={true}\r\n          >\r\n            <ListItemText primary={fontResource.family} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton\r\n                edge='end'\r\n                aria-label='delete'\r\n                onClick={() => removeFont(fontResource)}\r\n              >\r\n                <HighlightOffIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Button\r\n        component='label'\r\n        variant='contained'\r\n        color='primary'\r\n        fullWidth\r\n        size='large'\r\n        startIcon={\r\n          loading ? (\r\n            <CircularProgress size={22} color='inherit' />\r\n          ) : (\r\n            <FontDownload />\r\n          )\r\n        }\r\n        disabled={loading}\r\n      >\r\n        Add Font File\r\n        <input\r\n          hidden\r\n          type='file'\r\n          onChange={hanleUploadFile}\r\n          accept='.ttf,.otf,.woff'\r\n        />\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(FontFamily)\r\n","import React, {\r\n  ReactNode,\r\n  FunctionComponent,\r\n  PropsWithChildren,\r\n  ElementType,\r\n} from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\ninterface GridInputProps {\r\n  before?: ReactNode\r\n  after?: ReactNode\r\n  component?: ElementType\r\n  childrenWidth?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\r\n}\r\n\r\nconst GridInput: FunctionComponent<GridInputProps> = (\r\n  props: PropsWithChildren<GridInputProps>,\r\n): JSX.Element => {\r\n  const { before, children, component, after, childrenWidth } = props\r\n  return (\r\n    <Grid\r\n      component={component || 'label'}\r\n      container\r\n      spacing={2}\r\n      wrap='nowrap'\r\n      justifyContent='center'\r\n      alignItems='center'\r\n    >\r\n      <Grid item xs={4}>\r\n        {typeof before === 'object' ? (\r\n          before\r\n        ) : (\r\n          <Typography noWrap align='right'>\r\n            {before}\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={childrenWidth || 5}>\r\n        {children}\r\n      </Grid>\r\n      <Grid item xs>\r\n        {typeof after === 'object' ? (\r\n          after\r\n        ) : (\r\n          <Typography noWrap variant='caption'>\r\n            {after}\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GridInput\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\nimport { useFont } from 'src/store/hooks'\n\nconst FontSize: FunctionComponent<unknown> = () => {\n  const { size, setSize } = useFont()\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setSize(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Font Size:' after='px'>\n      <Input\n        value={size}\n        fullWidth\n        type='number'\n        inputProps={{ min: 1 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(FontSize)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput/GridInput'\n\nimport { useFont } from 'src/store/hooks'\n\nconst LineHeight: FunctionComponent<unknown> = () => {\n  const { lineHeight, setLineHeight } = useFont()\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setLineHeight(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Line Height:' after='multiple'>\n      <Input\n        value={lineHeight}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0.5, step: 0.1 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(LineHeight)\n","import React, { FunctionComponent } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport FontFamily from './FontFamily'\nimport FontSize from './FontSize'\nimport LineHeight from './LineHeight'\n\nconst Font: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Font</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FontFamily />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FontSize />\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <LineHeight />\n      </Box>\n    </>\n  )\n}\n\nexport default Font\n","import React, {\r\n  useState,\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n} from 'react'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { observer } from 'mobx-react'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nconst Glyphs: FunctionComponent<unknown> = () => {\r\n  const { text, setText } = useProject()\r\n  const [isIME, setIsIME] = useState(false)\r\n  const [inputText, setInputText] = useState(text)\r\n\r\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    const { value } = event.target\r\n    const str = Array.from(new Set(value.split(''))).join('')\r\n    if (isIME) {\r\n      setInputText(value)\r\n    } else {\r\n      setInputText(str)\r\n      if (str !== text) setText(str)\r\n    }\r\n  }\r\n\r\n  const handleCompositionStart = useCallback((): void => {\r\n    setInputText(text)\r\n    setIsIME(true)\r\n  }, [text])\r\n\r\n  const handleCompositionEnd = (): void => {\r\n    setIsIME(false)\r\n    const str = Array.from(new Set(inputText.split(''))).join('')\r\n    setInputText(str)\r\n    if (str !== text) setText(str)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setInputText(text)\r\n  }, [text])\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Typography>Glyphs</Typography>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <TextField\r\n          margin='none'\r\n          value={isIME ? inputText : text}\r\n          fullWidth\r\n          multiline\r\n          rows={4}\r\n          variant='outlined'\r\n          inputProps={{ spellCheck: false }}\r\n          onChange={handleInput}\r\n          onCompositionStart={handleCompositionStart}\r\n          onCompositionEnd={handleCompositionEnd}\r\n        />\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(Glyphs)\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useLayout } from 'src/store/hooks'\n\nconst Padding: FunctionComponent<unknown> = () => {\n  const { padding, setPadding } = useLayout()\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setPadding(Number(event.target.value))\n  }\n\n  return (\n    <GridInput before='Padding:' after='px'>\n      <Input\n        value={padding}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={handleInput}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Padding)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Input from '@material-ui/core/Input'\n\nimport { useLayout } from 'src/store/hooks'\n\nimport GridInput from 'src/app/components/GridInput'\n\nconst Spacing: FunctionComponent<unknown> = () => {\n  const { spacing, setSpacing } = useLayout()\n\n  return (\n    <GridInput before='Spacing:' after='px'>\n      <Input\n        value={spacing}\n        fullWidth\n        type='number'\n        inputProps={{ min: 0 }}\n        onChange={(e) => setSpacing(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default observer(Spacing)\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n\r\nimport { useLayout } from 'src/store/hooks'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\nconst AutoPack: FunctionComponent<unknown> = () => {\r\n  const { auto, setAuto } = useLayout()\r\n\r\n  return (\r\n    <GridInput before='Auto Pack:'>\r\n      <Checkbox\r\n        checked={auto}\r\n        size='small'\r\n        color='default'\r\n        onChange={(e) => setAuto(e.target.checked)}\r\n      />\r\n    </GridInput>\r\n  )\r\n}\r\n\r\nexport default observer(AutoPack)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n\r\nimport { useLayout } from 'src/store/hooks'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\nconst FixedSize: FunctionComponent<unknown> = () => {\r\n  const { auto, fixedSize, setFixedSize } = useLayout()\r\n\r\n  return (\r\n    <GridInput before='Fixed Size:'>\r\n      <Checkbox\r\n        checked={fixedSize}\r\n        size='small'\r\n        color='default'\r\n        onChange={(e) => setFixedSize(e.target.checked)}\r\n        disabled={auto}\r\n      />\r\n    </GridInput>\r\n  )\r\n}\r\n\r\nexport default observer(FixedSize)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Input from '@material-ui/core/Input'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\nimport { useLayout } from 'src/store/hooks'\r\n\r\nconst PackWidth: FunctionComponent<unknown> = () => {\r\n  const { width, auto, fixedSize, setWidth } = useLayout()\r\n\r\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setWidth(Number(event.target.value))\r\n  }\r\n\r\n  return (\r\n    <GridInput before={fixedSize ? 'Width:' : 'Max Width:'} after='px'>\r\n      <Input\r\n        value={width}\r\n        fullWidth\r\n        type='number'\r\n        inputProps={{ min: 0 }}\r\n        onChange={handleInput}\r\n        disabled={auto}\r\n      />\r\n    </GridInput>\r\n  )\r\n}\r\n\r\nexport default observer(PackWidth)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Input from '@material-ui/core/Input'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\nimport { useLayout } from 'src/store/hooks'\r\n\r\nconst PackHeight: FunctionComponent<unknown> = () => {\r\n  const { height, auto, fixedSize, setHeight } = useLayout()\r\n\r\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setHeight(Number(event.target.value))\r\n  }\r\n\r\n  return (\r\n    <GridInput before={fixedSize ? 'Height:' : 'Max Height:'} after='px'>\r\n      <Input\r\n        value={height}\r\n        fullWidth\r\n        type='number'\r\n        inputProps={{ min: 0 }}\r\n        onChange={handleInput}\r\n        disabled={auto}\r\n      />\r\n    </GridInput>\r\n  )\r\n}\r\n\r\nexport default observer(PackHeight)\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport Padding from './Padding'\r\nimport Spacing from './Spacing'\r\nimport AutoPack from './AutoPack'\r\nimport FixedSize from './FixedSize'\r\nimport PackWidth from './PackWidth'\r\nimport PackHeight from './PackHeight'\r\n\r\nconst PackConfig: FunctionComponent<unknown> = () => {\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Typography>Layout</Typography>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Padding />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <Spacing />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <AutoPack />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <FixedSize />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <PackWidth />\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <PackHeight />\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PackConfig\r\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport GridInput from 'src/app/components/GridInput'\n\ninterface SetHandle {\n  (value: number): void\n}\n\ninterface FormAdjustMetricProps {\n  xAdvance: number\n  xOffset: number\n  yOffset: number\n  setXAdvance: SetHandle\n  setXOffset: SetHandle\n  setYOffset: SetHandle\n}\n\nconst FormAdjustMetric: FunctionComponent<FormAdjustMetricProps> = (\n  props: FormAdjustMetricProps,\n) => {\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = props\n\n  const getHandle = (handleSet: SetHandle) => (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => handleSet(Number(e.target.value))\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='xAdvance:' after='px'>\n          <Input\n            value={xAdvance}\n            fullWidth\n            type='number'\n            onChange={getHandle(setXAdvance)}\n          />\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='xOffset:' after='px'>\n          <Input\n            value={xOffset}\n            fullWidth\n            type='number'\n            onChange={getHandle(setXOffset)}\n          />\n        </GridInput>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='yOffset:' after='px'>\n          <Input\n            value={yOffset}\n            fullWidth\n            type='number'\n            onChange={getHandle(setYOffset)}\n          />\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default FormAdjustMetric\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProject } from 'src/store/hooks'\n\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const { globalAdjustMetric } = useProject()\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = globalAdjustMetric\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Global Metric Adjustment</Typography>\n      </Box>\n      <FormAdjustMetric\n        xAdvance={xAdvance}\n        xOffset={xOffset}\n        yOffset={yOffset}\n        setXAdvance={setXAdvance}\n        setXOffset={setXOffset}\n        setYOffset={setYOffset}\n      />\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { FunctionComponent } from 'react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport Box from '@material-ui/core/Box'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport Font from './modules/Font'\r\nimport Glyphs from './modules/Glyphs'\r\nimport PackConfig from './modules/PackConfig'\r\nimport GlobalMetric from './modules/GlobalMetric'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      width: '256px',\r\n    },\r\n  }),\r\n)\r\n\r\nconst LeftBar: FunctionComponent<unknown> = () => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Box\r\n      bgcolor='background.sidebar'\r\n      display='flex'\r\n      flexDirection='column'\r\n      overflow='hidden'\r\n      className={classes.root}\r\n    >\r\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\r\n        <Typography variant='subtitle2'>Font Config</Typography>\r\n      </Box>\r\n      <Box flex={1} height={0} overflow='hidden auto'>\r\n        <Glyphs />\r\n        <Divider />\r\n        <Font />\r\n        <Divider />\r\n        <PackConfig />\r\n        <Divider />\r\n        <GlobalMetric />\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default LeftBar\r\n","import React, { useEffect, FunctionComponent, useCallback } from 'react'\r\nimport hotkeys from 'hotkeys-js'\r\nimport { observer } from 'mobx-react'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport { useWorkspace } from 'src/store/hooks'\r\n\r\ninterface ButtonNewProps {\r\n  className?: string\r\n}\r\n\r\nconst ButtonNew: FunctionComponent<ButtonNewProps> = (\r\n  props: ButtonNewProps,\r\n) => {\r\n  const { className } = props\r\n\r\n  const worckSpace = useWorkspace()\r\n  const { addProject } = worckSpace\r\n\r\n  const handleNewProject = useCallback(\r\n    (e: { preventDefault(): void }) => {\r\n      e.preventDefault()\r\n      addProject()\r\n      return false\r\n    },\r\n    [addProject],\r\n  )\r\n\r\n  useEffect(() => {\r\n    hotkeys.unbind('alt+n,control+n')\r\n    hotkeys('alt+n,control+n', handleNewProject)\r\n    return () => {\r\n      hotkeys.unbind('alt+n,control+n')\r\n    }\r\n  }, [handleNewProject])\r\n\r\n  return (\r\n    <Button\r\n      className={className}\r\n      title='New Project (ALT + N)'\r\n      onClick={handleNewProject}\r\n    >\r\n      New\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default observer(ButtonNew)\r\n","function getVersionNumber(version: string | string[] | number[]): number {\r\n  if (typeof version === 'string') {\r\n    version = version.split('.')\r\n  }\r\n\r\n  if (!Array.isArray(version)) return 0\r\n\r\n  version = [...version] as number[]\r\n\r\n  return version\r\n    .reverse()\r\n    .reduce<number>(\r\n      (previousValue: number, currentValue: number, currentIndex: number) => {\r\n        return (\r\n          previousValue + Number(currentValue) * Math.pow(1000, currentIndex)\r\n        )\r\n      },\r\n      0,\r\n    )\r\n}\r\n\r\nexport default getVersionNumber\r\n","export const PREFIX_STR = 'SnowBambooBMF'\r\nconst prefix = (): Uint8Array =>\r\n  new Uint8Array([...PREFIX_STR.split('').map((s) => s.charCodeAt(0)), 1, 1, 0])\r\n\r\nexport default prefix\r\n","import getVersionNumber from 'src/utils/getVersionNumber'\r\nimport prefix from './prefix'\r\n\r\nexport default function decode(buffer: unknown): number {\r\n  if (!(buffer instanceof ArrayBuffer) || buffer.byteLength < 17) return 0\r\n  const perfixBuffer = prefix()\r\n  const perfixName = perfixBuffer.slice(0, perfixBuffer.byteLength - 3)\r\n  const u8 = new Uint8Array(buffer)\r\n  const filePrefix = u8.slice(0, perfixBuffer.byteLength)\r\n  const versionBuffer = filePrefix.slice(filePrefix.byteLength - 3)\r\n  let isSbf = true\r\n\r\n  perfixName.forEach((e, i) => {\r\n    if (filePrefix[i] !== e) isSbf = false\r\n  })\r\n\r\n  if (!isSbf) return 0\r\n\r\n  return getVersionNumber(Array.from(versionBuffer))\r\n}\r\n","import { CheckFunction } from '../type'\r\nimport getVersion from './getVersion'\r\n\r\nconst check: CheckFunction = (buffer) => getVersion(buffer) > 0\r\n\r\nexport default check\r\n","/* eslint-disable */\r\nimport * as $protobuf from 'protobufjs/minimal'\r\n\r\n// Common aliases\r\nconst $Reader = $protobuf.Reader,\r\n  $Writer = $protobuf.Writer,\r\n  $util = $protobuf.util\r\n\r\n// Exported root namespace\r\nconst $root = {}\r\n\r\nexport const Metric = ($root.Metric = (() => {\r\n  /**\r\n   * Properties of a Metric.\r\n   * @exports IMetric\r\n   * @interface IMetric\r\n   * @property {number|null} [xAdvance] Metric xAdvance\r\n   * @property {number|null} [xOffset] Metric xOffset\r\n   * @property {number|null} [yOffset] Metric yOffset\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Metric.\r\n   * @exports Metric\r\n   * @classdesc Represents a Metric.\r\n   * @implements IMetric\r\n   * @constructor\r\n   * @param {IMetric=} [properties] Properties to set\r\n   */\r\n  function Metric(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Metric xAdvance.\r\n   * @member {number} xAdvance\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xAdvance = 0\r\n\r\n  /**\r\n   * Metric xOffset.\r\n   * @member {number} xOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xOffset = 0\r\n\r\n  /**\r\n   * Metric yOffset.\r\n   * @member {number} yOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.yOffset = 0\r\n\r\n  /**\r\n   * Creates a new Metric instance using the specified properties.\r\n   * @function create\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric=} [properties] Properties to set\r\n   * @returns {Metric} Metric instance\r\n   */\r\n  Metric.create = function create(properties) {\r\n    return new Metric(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.xAdvance != null &&\r\n      Object.hasOwnProperty.call(message, 'xAdvance')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\r\n    if (\r\n      message.xOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'xOffset')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\r\n    if (\r\n      message.yOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'yOffset')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Metric()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.xAdvance = reader.sint32()\r\n          break\r\n        case 2:\r\n          message.xOffset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.yOffset = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Metric message.\r\n   * @function verify\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Metric.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      if (!$util.isInteger(message.xAdvance))\r\n        return 'xAdvance: integer expected'\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Metric} Metric\r\n   */\r\n  Metric.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Metric) return object\r\n    let message = new $root.Metric()\r\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\r\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\r\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Metric} message Metric\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Metric.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.xAdvance = 0\r\n      object.xOffset = 0\r\n      object.yOffset = 0\r\n    }\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      object.xAdvance = message.xAdvance\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      object.xOffset = message.xOffset\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      object.yOffset = message.yOffset\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Metric to JSON.\r\n   * @function toJSON\r\n   * @memberof Metric\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Metric.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Metric\r\n})())\r\n\r\nexport const GradientColor = ($root.GradientColor = (() => {\r\n  /**\r\n   * Properties of a GradientColor.\r\n   * @exports IGradientColor\r\n   * @interface IGradientColor\r\n   * @property {number|null} [id] GradientColor id\r\n   * @property {number|null} [offset] GradientColor offset\r\n   * @property {string|null} [color] GradientColor color\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GradientColor.\r\n   * @exports GradientColor\r\n   * @classdesc Represents a GradientColor.\r\n   * @implements IGradientColor\r\n   * @constructor\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   */\r\n  function GradientColor(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GradientColor id.\r\n   * @member {number} id\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.id = 0\r\n\r\n  /**\r\n   * GradientColor offset.\r\n   * @member {number} offset\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.offset = 0\r\n\r\n  /**\r\n   * GradientColor color.\r\n   * @member {string} color\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.color = ''\r\n\r\n  /**\r\n   * Creates a new GradientColor instance using the specified properties.\r\n   * @function create\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   * @returns {GradientColor} GradientColor instance\r\n   */\r\n  GradientColor.create = function create(properties) {\r\n    return new GradientColor(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\r\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GradientColor()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int32()\r\n          break\r\n        case 2:\r\n          message.offset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.color = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GradientColor message.\r\n   * @function verify\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GradientColor.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GradientColor} GradientColor\r\n   */\r\n  GradientColor.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GradientColor) return object\r\n    let message = new $root.GradientColor()\r\n    if (object.id != null) message.id = object.id | 0\r\n    if (object.offset != null) message.offset = object.offset | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {GradientColor} message GradientColor\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GradientColor.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.id = 0\r\n      object.offset = 0\r\n      object.color = ''\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      object.id = message.id\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      object.offset = message.offset\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GradientColor to JSON.\r\n   * @function toJSON\r\n   * @memberof GradientColor\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GradientColor.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GradientColor\r\n})())\r\n\r\nexport const Gradient = ($root.Gradient = (() => {\r\n  /**\r\n   * Properties of a Gradient.\r\n   * @exports IGradient\r\n   * @interface IGradient\r\n   * @property {number|null} [type] Gradient type\r\n   * @property {number|null} [angle] Gradient angle\r\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Gradient.\r\n   * @exports Gradient\r\n   * @classdesc Represents a Gradient.\r\n   * @implements IGradient\r\n   * @constructor\r\n   * @param {IGradient=} [properties] Properties to set\r\n   */\r\n  function Gradient(properties) {\r\n    this.palette = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Gradient type.\r\n   * @member {number} type\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.type = 0\r\n\r\n  /**\r\n   * Gradient angle.\r\n   * @member {number} angle\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.angle = 0\r\n\r\n  /**\r\n   * Gradient palette.\r\n   * @member {Array.<IGradientColor>} palette\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.palette = $util.emptyArray\r\n\r\n  /**\r\n   * Creates a new Gradient instance using the specified properties.\r\n   * @function create\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient=} [properties] Properties to set\r\n   * @returns {Gradient} Gradient instance\r\n   */\r\n  Gradient.create = function create(properties) {\r\n    return new Gradient(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\r\n    if (message.palette != null && message.palette.length)\r\n      for (let i = 0; i < message.palette.length; ++i)\r\n        $root.GradientColor.encode(\r\n          message.palette[i],\r\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n        ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Gradient()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.angle = reader.float()\r\n          break\r\n        case 3:\r\n          if (!(message.palette && message.palette.length)) message.palette = []\r\n          message.palette.push(\r\n            $root.GradientColor.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Gradient message.\r\n   * @function verify\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Gradient.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      if (typeof message.angle !== 'number') return 'angle: number expected'\r\n    if (message.palette != null && message.hasOwnProperty('palette')) {\r\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\r\n      for (let i = 0; i < message.palette.length; ++i) {\r\n        let error = $root.GradientColor.verify(message.palette[i])\r\n        if (error) return 'palette.' + error\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Gradient} Gradient\r\n   */\r\n  Gradient.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Gradient) return object\r\n    let message = new $root.Gradient()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.angle != null) message.angle = Number(object.angle)\r\n    if (object.palette) {\r\n      if (!Array.isArray(object.palette))\r\n        throw TypeError('.Gradient.palette: array expected')\r\n      message.palette = []\r\n      for (let i = 0; i < object.palette.length; ++i) {\r\n        if (typeof object.palette[i] !== 'object')\r\n          throw TypeError('.Gradient.palette: object expected')\r\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Gradient} message Gradient\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Gradient.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.palette = []\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.angle = 0\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      object.angle =\r\n        options.json && !isFinite(message.angle)\r\n          ? String(message.angle)\r\n          : message.angle\r\n    if (message.palette && message.palette.length) {\r\n      object.palette = []\r\n      for (let j = 0; j < message.palette.length; ++j)\r\n        object.palette[j] = $root.GradientColor.toObject(\r\n          message.palette[j],\r\n          options,\r\n        )\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Gradient to JSON.\r\n   * @function toJSON\r\n   * @memberof Gradient\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Gradient.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Gradient\r\n})())\r\n\r\nexport const PatternTexture = ($root.PatternTexture = (() => {\r\n  /**\r\n   * Properties of a PatternTexture.\r\n   * @exports IPatternTexture\r\n   * @interface IPatternTexture\r\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\r\n   * @property {number|null} [scale] PatternTexture scale\r\n   * @property {string|null} [repetition] PatternTexture repetition\r\n   */\r\n\r\n  /**\r\n   * Constructs a new PatternTexture.\r\n   * @exports PatternTexture\r\n   * @classdesc Represents a PatternTexture.\r\n   * @implements IPatternTexture\r\n   * @constructor\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   */\r\n  function PatternTexture(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * PatternTexture buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * PatternTexture scale.\r\n   * @member {number} scale\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.scale = 0\r\n\r\n  /**\r\n   * PatternTexture repetition.\r\n   * @member {string} repetition\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.repetition = ''\r\n\r\n  /**\r\n   * Creates a new PatternTexture instance using the specified properties.\r\n   * @function create\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   * @returns {PatternTexture} PatternTexture instance\r\n   */\r\n  PatternTexture.create = function create(properties) {\r\n    return new PatternTexture(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\r\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\r\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\r\n    if (\r\n      message.repetition != null &&\r\n      Object.hasOwnProperty.call(message, 'repetition')\r\n    )\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.PatternTexture()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.scale = reader.double()\r\n          break\r\n        case 3:\r\n          message.repetition = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a PatternTexture message.\r\n   * @function verify\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  PatternTexture.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      if (typeof message.scale !== 'number') return 'scale: number expected'\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      if (!$util.isString(message.repetition))\r\n        return 'repetition: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {PatternTexture} PatternTexture\r\n   */\r\n  PatternTexture.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.PatternTexture) return object\r\n    let message = new $root.PatternTexture()\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.scale != null) message.scale = Number(object.scale)\r\n    if (object.repetition != null)\r\n      message.repetition = String(object.repetition)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {PatternTexture} message PatternTexture\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  PatternTexture.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.scale = 0\r\n      object.repetition = ''\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      object.scale =\r\n        options.json && !isFinite(message.scale)\r\n          ? String(message.scale)\r\n          : message.scale\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      object.repetition = message.repetition\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this PatternTexture to JSON.\r\n   * @function toJSON\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  PatternTexture.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return PatternTexture\r\n})())\r\n\r\nexport const Fill = ($root.Fill = (() => {\r\n  /**\r\n   * Properties of a Fill.\r\n   * @exports IFill\r\n   * @interface IFill\r\n   * @property {number|null} [type] Fill type\r\n   * @property {string|null} [color] Fill color\r\n   * @property {IGradient|null} [gradient] Fill gradient\r\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\r\n   * @property {number|null} [width] Fill width\r\n   * @property {string|null} [lineCap] Fill lineCap\r\n   * @property {string|null} [lineJoin] Fill lineJoin\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Fill.\r\n   * @exports Fill\r\n   * @classdesc Represents a Fill.\r\n   * @implements IFill\r\n   * @constructor\r\n   * @param {IFill=} [properties] Properties to set\r\n   */\r\n  function Fill(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Fill type.\r\n   * @member {number} type\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.type = 0\r\n\r\n  /**\r\n   * Fill color.\r\n   * @member {string} color\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.color = ''\r\n\r\n  /**\r\n   * Fill gradient.\r\n   * @member {IGradient|null|undefined} gradient\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.gradient = null\r\n\r\n  /**\r\n   * Fill patternTexture.\r\n   * @member {IPatternTexture|null|undefined} patternTexture\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.patternTexture = null\r\n\r\n  /**\r\n   * Fill width.\r\n   * @member {number} width\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.width = 0\r\n\r\n  /**\r\n   * Fill lineCap.\r\n   * @member {string} lineCap\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineCap = ''\r\n\r\n  /**\r\n   * Fill lineJoin.\r\n   * @member {string} lineJoin\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineJoin = ''\r\n\r\n  /**\r\n   * Creates a new Fill instance using the specified properties.\r\n   * @function create\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill=} [properties] Properties to set\r\n   * @returns {Fill} Fill instance\r\n   */\r\n  Fill.create = function create(properties) {\r\n    return new Fill(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\r\n    if (\r\n      message.gradient != null &&\r\n      Object.hasOwnProperty.call(message, 'gradient')\r\n    )\r\n      $root.Gradient.encode(\r\n        message.gradient,\r\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.patternTexture != null &&\r\n      Object.hasOwnProperty.call(message, 'patternTexture')\r\n    )\r\n      $root.PatternTexture.encode(\r\n        message.patternTexture,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\r\n    if (\r\n      message.lineCap != null &&\r\n      Object.hasOwnProperty.call(message, 'lineCap')\r\n    )\r\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\r\n    if (\r\n      message.lineJoin != null &&\r\n      Object.hasOwnProperty.call(message, 'lineJoin')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Fill()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.color = reader.string()\r\n          break\r\n        case 3:\r\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\r\n          break\r\n        case 4:\r\n          message.patternTexture = $root.PatternTexture.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 5:\r\n          message.width = reader.int32()\r\n          break\r\n        case 6:\r\n          message.lineCap = reader.string()\r\n          break\r\n        case 7:\r\n          message.lineJoin = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Fill message.\r\n   * @function verify\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Fill.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\r\n      let error = $root.Gradient.verify(message.gradient)\r\n      if (error) return 'gradient.' + error\r\n    }\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    ) {\r\n      let error = $root.PatternTexture.verify(message.patternTexture)\r\n      if (error) return 'patternTexture.' + error\r\n    }\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Fill} Fill\r\n   */\r\n  Fill.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Fill) return object\r\n    let message = new $root.Fill()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.gradient != null) {\r\n      if (typeof object.gradient !== 'object')\r\n        throw TypeError('.Fill.gradient: object expected')\r\n      message.gradient = $root.Gradient.fromObject(object.gradient)\r\n    }\r\n    if (object.patternTexture != null) {\r\n      if (typeof object.patternTexture !== 'object')\r\n        throw TypeError('.Fill.patternTexture: object expected')\r\n      message.patternTexture = $root.PatternTexture.fromObject(\r\n        object.patternTexture,\r\n      )\r\n    }\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\r\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Fill} message Fill\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Fill.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.color = ''\r\n      object.gradient = null\r\n      object.patternTexture = null\r\n      object.width = 0\r\n      object.lineCap = ''\r\n      object.lineJoin = ''\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\r\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    )\r\n      object.patternTexture = $root.PatternTexture.toObject(\r\n        message.patternTexture,\r\n        options,\r\n      )\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      object.lineCap = message.lineCap\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      object.lineJoin = message.lineJoin\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Fill to JSON.\r\n   * @function toJSON\r\n   * @memberof Fill\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Fill.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Fill\r\n})())\r\n\r\nexport const Font = ($root.Font = (() => {\r\n  /**\r\n   * Properties of a Font.\r\n   * @exports IFont\r\n   * @interface IFont\r\n   * @property {Uint8Array|null} [font] Font font\r\n   * @property {string|null} [family] Font family\r\n   * @property {number|null} [size] Font size\r\n   * @property {number|null} [lineHeight] Font lineHeight\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Font.\r\n   * @exports Font\r\n   * @classdesc Represents a Font.\r\n   * @implements IFont\r\n   * @constructor\r\n   * @param {IFont=} [properties] Properties to set\r\n   */\r\n  function Font(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Font font.\r\n   * @member {Uint8Array} font\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.font = $util.newBuffer([])\r\n\r\n  /**\r\n   * Font family.\r\n   * @member {string} family\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.family = ''\r\n\r\n  /**\r\n   * Font size.\r\n   * @member {number} size\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.size = 0\r\n\r\n  /**\r\n   * Font lineHeight.\r\n   * @member {number} lineHeight\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.lineHeight = 0\r\n\r\n  /**\r\n   * Creates a new Font instance using the specified properties.\r\n   * @function create\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont=} [properties] Properties to set\r\n   * @returns {Font} Font instance\r\n   */\r\n  Font.create = function create(properties) {\r\n    return new Font(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\r\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\r\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\r\n    if (\r\n      message.lineHeight != null &&\r\n      Object.hasOwnProperty.call(message, 'lineHeight')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Font()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.family = reader.string()\r\n          break\r\n        case 3:\r\n          message.size = reader.int32()\r\n          break\r\n        case 4:\r\n          message.lineHeight = reader.int32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Font message.\r\n   * @function verify\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Font.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      if (\r\n        !(\r\n          (message.font && typeof message.font.length === 'number') ||\r\n          $util.isString(message.font)\r\n        )\r\n      )\r\n        return 'font: buffer expected'\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      if (!$util.isString(message.family)) return 'family: string expected'\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      if (!$util.isInteger(message.lineHeight))\r\n        return 'lineHeight: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Font} Font\r\n   */\r\n  Font.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Font) return object\r\n    let message = new $root.Font()\r\n    if (object.font != null)\r\n      if (typeof object.font === 'string')\r\n        $util.base64.decode(\r\n          object.font,\r\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\r\n          0,\r\n        )\r\n      else if (object.font.length) message.font = object.font\r\n    if (object.family != null) message.family = String(object.family)\r\n    if (object.size != null) message.size = object.size | 0\r\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Font} message Font\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Font.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.font = ''\r\n      else {\r\n        object.font = []\r\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\r\n      }\r\n      object.family = ''\r\n      object.size = 0\r\n      object.lineHeight = 0\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.font, 0, message.font.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.font)\r\n          : message.font\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      object.family = message.family\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      object.size = message.size\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      object.lineHeight = message.lineHeight\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Font to JSON.\r\n   * @function toJSON\r\n   * @memberof Font\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Font.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Font\r\n})())\r\n\r\nexport const GlyphFont = ($root.GlyphFont = (() => {\r\n  /**\r\n   * Properties of a GlyphFont.\r\n   * @exports IGlyphFont\r\n   * @interface IGlyphFont\r\n   * @property {string|null} [letter] GlyphFont letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\r\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphFont.\r\n   * @exports GlyphFont\r\n   * @classdesc Represents a GlyphFont.\r\n   * @implements IGlyphFont\r\n   * @constructor\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   */\r\n  function GlyphFont(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphFont letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphFont adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphFont kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphFont instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   * @returns {GlyphFont} GlyphFont instance\r\n   */\r\n  GlyphFont.create = function create(properties) {\r\n    return new GlyphFont(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 3, wireType 2 =*/ 26)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphFont(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphFont message.\r\n   * @function verify\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphFont.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphFont} GlyphFont\r\n   */\r\n  GlyphFont.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphFont) return object\r\n    let message = new $root.GlyphFont()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphFont.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {GlyphFont} message GlyphFont\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphFont.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphFont to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphFont.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphFont\r\n})())\r\n\r\nexport const GlyphImage = ($root.GlyphImage = (() => {\r\n  /**\r\n   * Properties of a GlyphImage.\r\n   * @exports IGlyphImage\r\n   * @interface IGlyphImage\r\n   * @property {string|null} [letter] GlyphImage letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\r\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\r\n   * @property {string|null} [fileName] GlyphImage fileName\r\n   * @property {string|null} [fileType] GlyphImage fileType\r\n   * @property {boolean|null} [selected] GlyphImage selected\r\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphImage.\r\n   * @exports GlyphImage\r\n   * @classdesc Represents a GlyphImage.\r\n   * @implements IGlyphImage\r\n   * @constructor\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   */\r\n  function GlyphImage(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphImage letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphImage adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphImage buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * GlyphImage fileName.\r\n   * @member {string} fileName\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileName = ''\r\n\r\n  /**\r\n   * GlyphImage fileType.\r\n   * @member {string} fileType\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileType = ''\r\n\r\n  /**\r\n   * GlyphImage selected.\r\n   * @member {boolean} selected\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.selected = false\r\n\r\n  /**\r\n   * GlyphImage kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphImage instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   * @returns {GlyphImage} GlyphImage instance\r\n   */\r\n  GlyphImage.create = function create(properties) {\r\n    return new GlyphImage(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\r\n    if (\r\n      message.fileName != null &&\r\n      Object.hasOwnProperty.call(message, 'fileName')\r\n    )\r\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\r\n    if (\r\n      message.fileType != null &&\r\n      Object.hasOwnProperty.call(message, 'fileType')\r\n    )\r\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\r\n    if (\r\n      message.selected != null &&\r\n      Object.hasOwnProperty.call(message, 'selected')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 7, wireType 2 =*/ 58)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphImage(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 4:\r\n          message.fileName = reader.string()\r\n          break\r\n        case 5:\r\n          message.fileType = reader.string()\r\n          break\r\n        case 6:\r\n          message.selected = reader.bool()\r\n          break\r\n        case 7:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphImage message.\r\n   * @function verify\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphImage.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      if (typeof message.selected !== 'boolean')\r\n        return 'selected: boolean expected'\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphImage} GlyphImage\r\n   */\r\n  GlyphImage.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphImage) return object\r\n    let message = new $root.GlyphImage()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.fileName != null) message.fileName = String(object.fileName)\r\n    if (object.fileType != null) message.fileType = String(object.fileType)\r\n    if (object.selected != null) message.selected = Boolean(object.selected)\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphImage.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {GlyphImage} message GlyphImage\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphImage.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.fileName = ''\r\n      object.fileType = ''\r\n      object.selected = false\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      object.fileName = message.fileName\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      object.fileType = message.fileType\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      object.selected = message.selected\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphImage to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphImage.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphImage\r\n})())\r\n\r\nexport const Layout = ($root.Layout = (() => {\r\n  /**\r\n   * Properties of a Layout.\r\n   * @exports ILayout\r\n   * @interface ILayout\r\n   * @property {number|null} [padding] Layout padding\r\n   * @property {number|null} [spacing] Layout spacing\r\n   * @property {boolean|null} [power] Layout power\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Layout.\r\n   * @exports Layout\r\n   * @classdesc Represents a Layout.\r\n   * @implements ILayout\r\n   * @constructor\r\n   * @param {ILayout=} [properties] Properties to set\r\n   */\r\n  function Layout(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Layout padding.\r\n   * @member {number} padding\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.padding = 0\r\n\r\n  /**\r\n   * Layout spacing.\r\n   * @member {number} spacing\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.spacing = 0\r\n\r\n  /**\r\n   * Layout power.\r\n   * @member {boolean} power\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.power = false\r\n\r\n  /**\r\n   * Creates a new Layout instance using the specified properties.\r\n   * @function create\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout=} [properties] Properties to set\r\n   * @returns {Layout} Layout instance\r\n   */\r\n  Layout.create = function create(properties) {\r\n    return new Layout(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.padding != null &&\r\n      Object.hasOwnProperty.call(message, 'padding')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\r\n    if (\r\n      message.spacing != null &&\r\n      Object.hasOwnProperty.call(message, 'spacing')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\r\n    if (message.power != null && Object.hasOwnProperty.call(message, 'power'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.power)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Layout()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.padding = reader.int32()\r\n          break\r\n        case 2:\r\n          message.spacing = reader.int32()\r\n          break\r\n        case 3:\r\n          message.power = reader.bool()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Layout message.\r\n   * @function verify\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Layout.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\r\n    if (message.power != null && message.hasOwnProperty('power'))\r\n      if (typeof message.power !== 'boolean') return 'power: boolean expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Layout} Layout\r\n   */\r\n  Layout.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Layout) return object\r\n    let message = new $root.Layout()\r\n    if (object.padding != null) message.padding = object.padding | 0\r\n    if (object.spacing != null) message.spacing = object.spacing | 0\r\n    if (object.power != null) message.power = Boolean(object.power)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Layout} message Layout\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Layout.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.padding = 0\r\n      object.spacing = 0\r\n      object.power = false\r\n    }\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      object.padding = message.padding\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      object.spacing = message.spacing\r\n    if (message.power != null && message.hasOwnProperty('power'))\r\n      object.power = message.power\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Layout to JSON.\r\n   * @function toJSON\r\n   * @memberof Layout\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Layout.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Layout\r\n})())\r\n\r\nexport const Shadow = ($root.Shadow = (() => {\r\n  /**\r\n   * Properties of a Shadow.\r\n   * @exports IShadow\r\n   * @interface IShadow\r\n   * @property {string|null} [color] Shadow color\r\n   * @property {number|null} [blur] Shadow blur\r\n   * @property {number|null} [offsetX] Shadow offsetX\r\n   * @property {number|null} [offsetY] Shadow offsetY\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Shadow.\r\n   * @exports Shadow\r\n   * @classdesc Represents a Shadow.\r\n   * @implements IShadow\r\n   * @constructor\r\n   * @param {IShadow=} [properties] Properties to set\r\n   */\r\n  function Shadow(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Shadow color.\r\n   * @member {string} color\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.color = ''\r\n\r\n  /**\r\n   * Shadow blur.\r\n   * @member {number} blur\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.blur = 0\r\n\r\n  /**\r\n   * Shadow offsetX.\r\n   * @member {number} offsetX\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetX = 0\r\n\r\n  /**\r\n   * Shadow offsetY.\r\n   * @member {number} offsetY\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetY = 0\r\n\r\n  /**\r\n   * Creates a new Shadow instance using the specified properties.\r\n   * @function create\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow=} [properties] Properties to set\r\n   * @returns {Shadow} Shadow instance\r\n   */\r\n  Shadow.create = function create(properties) {\r\n    return new Shadow(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\r\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\r\n    if (\r\n      message.offsetX != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetX')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\r\n    if (\r\n      message.offsetY != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetY')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Shadow()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.color = reader.string()\r\n          break\r\n        case 2:\r\n          message.blur = reader.int32()\r\n          break\r\n        case 3:\r\n          message.offsetX = reader.sint32()\r\n          break\r\n        case 4:\r\n          message.offsetY = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Shadow message.\r\n   * @function verify\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Shadow.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Shadow} Shadow\r\n   */\r\n  Shadow.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Shadow) return object\r\n    let message = new $root.Shadow()\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.blur != null) message.blur = object.blur | 0\r\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\r\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Shadow} message Shadow\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Shadow.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.color = ''\r\n      object.blur = 0\r\n      object.offsetX = 0\r\n      object.offsetY = 0\r\n    }\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      object.blur = message.blur\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      object.offsetX = message.offsetX\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      object.offsetY = message.offsetY\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Shadow to JSON.\r\n   * @function toJSON\r\n   * @memberof Shadow\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Shadow.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Shadow\r\n})())\r\n\r\nexport const Style = ($root.Style = (() => {\r\n  /**\r\n   * Properties of a Style.\r\n   * @exports IStyle\r\n   * @interface IStyle\r\n   * @property {IFont|null} [font] Style font\r\n   * @property {IFill|null} [fill] Style fill\r\n   * @property {boolean|null} [useStroke] Style useStroke\r\n   * @property {IFill|null} [stroke] Style stroke\r\n   * @property {boolean|null} [useShadow] Style useShadow\r\n   * @property {IShadow|null} [shadow] Style shadow\r\n   * @property {string|null} [bgColor] Style bgColor\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Style.\r\n   * @exports Style\r\n   * @classdesc Represents a Style.\r\n   * @implements IStyle\r\n   * @constructor\r\n   * @param {IStyle=} [properties] Properties to set\r\n   */\r\n  function Style(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Style font.\r\n   * @member {IFont|null|undefined} font\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.font = null\r\n\r\n  /**\r\n   * Style fill.\r\n   * @member {IFill|null|undefined} fill\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.fill = null\r\n\r\n  /**\r\n   * Style useStroke.\r\n   * @member {boolean} useStroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useStroke = false\r\n\r\n  /**\r\n   * Style stroke.\r\n   * @member {IFill|null|undefined} stroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.stroke = null\r\n\r\n  /**\r\n   * Style useShadow.\r\n   * @member {boolean} useShadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useShadow = false\r\n\r\n  /**\r\n   * Style shadow.\r\n   * @member {IShadow|null|undefined} shadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.shadow = null\r\n\r\n  /**\r\n   * Style bgColor.\r\n   * @member {string} bgColor\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.bgColor = ''\r\n\r\n  /**\r\n   * Creates a new Style instance using the specified properties.\r\n   * @function create\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle=} [properties] Properties to set\r\n   * @returns {Style} Style instance\r\n   */\r\n  Style.create = function create(properties) {\r\n    return new Style(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      $root.Font.encode(\r\n        message.font,\r\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\r\n      ).ldelim()\r\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\r\n      $root.Fill.encode(\r\n        message.fill,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useStroke != null &&\r\n      Object.hasOwnProperty.call(message, 'useStroke')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\r\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\r\n      $root.Fill.encode(\r\n        message.stroke,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useShadow != null &&\r\n      Object.hasOwnProperty.call(message, 'useShadow')\r\n    )\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\r\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\r\n      $root.Shadow.encode(\r\n        message.shadow,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.bgColor != null &&\r\n      Object.hasOwnProperty.call(message, 'bgColor')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Style()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = $root.Font.decode(reader, reader.uint32())\r\n          break\r\n        case 2:\r\n          message.fill = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.useStroke = reader.bool()\r\n          break\r\n        case 4:\r\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 5:\r\n          message.useShadow = reader.bool()\r\n          break\r\n        case 6:\r\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.bgColor = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Style message.\r\n   * @function verify\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Style.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font')) {\r\n      let error = $root.Font.verify(message.font)\r\n      if (error) return 'font.' + error\r\n    }\r\n    if (message.fill != null && message.hasOwnProperty('fill')) {\r\n      let error = $root.Fill.verify(message.fill)\r\n      if (error) return 'fill.' + error\r\n    }\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      if (typeof message.useStroke !== 'boolean')\r\n        return 'useStroke: boolean expected'\r\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\r\n      let error = $root.Fill.verify(message.stroke)\r\n      if (error) return 'stroke.' + error\r\n    }\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      if (typeof message.useShadow !== 'boolean')\r\n        return 'useShadow: boolean expected'\r\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\r\n      let error = $root.Shadow.verify(message.shadow)\r\n      if (error) return 'shadow.' + error\r\n    }\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Style} Style\r\n   */\r\n  Style.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Style) return object\r\n    let message = new $root.Style()\r\n    if (object.font != null) {\r\n      if (typeof object.font !== 'object')\r\n        throw TypeError('.Style.font: object expected')\r\n      message.font = $root.Font.fromObject(object.font)\r\n    }\r\n    if (object.fill != null) {\r\n      if (typeof object.fill !== 'object')\r\n        throw TypeError('.Style.fill: object expected')\r\n      message.fill = $root.Fill.fromObject(object.fill)\r\n    }\r\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\r\n    if (object.stroke != null) {\r\n      if (typeof object.stroke !== 'object')\r\n        throw TypeError('.Style.stroke: object expected')\r\n      message.stroke = $root.Fill.fromObject(object.stroke)\r\n    }\r\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\r\n    if (object.shadow != null) {\r\n      if (typeof object.shadow !== 'object')\r\n        throw TypeError('.Style.shadow: object expected')\r\n      message.shadow = $root.Shadow.fromObject(object.shadow)\r\n    }\r\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Style} message Style\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Style.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.font = null\r\n      object.fill = null\r\n      object.useStroke = false\r\n      object.stroke = null\r\n      object.useShadow = false\r\n      object.shadow = null\r\n      object.bgColor = ''\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font = $root.Font.toObject(message.font, options)\r\n    if (message.fill != null && message.hasOwnProperty('fill'))\r\n      object.fill = $root.Fill.toObject(message.fill, options)\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      object.useStroke = message.useStroke\r\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\r\n      object.stroke = $root.Fill.toObject(message.stroke, options)\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      object.useShadow = message.useShadow\r\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\r\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      object.bgColor = message.bgColor\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Style to JSON.\r\n   * @function toJSON\r\n   * @memberof Style\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Style.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Style\r\n})())\r\n\r\nexport const Ui = ($root.Ui = (() => {\r\n  /**\r\n   * Properties of an Ui.\r\n   * @exports IUi\r\n   * @interface IUi\r\n   * @property {string|null} [previewText] Ui previewText\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Ui.\r\n   * @exports Ui\r\n   * @classdesc Represents an Ui.\r\n   * @implements IUi\r\n   * @constructor\r\n   * @param {IUi=} [properties] Properties to set\r\n   */\r\n  function Ui(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Ui previewText.\r\n   * @member {string} previewText\r\n   * @memberof Ui\r\n   * @instance\r\n   */\r\n  Ui.prototype.previewText = ''\r\n\r\n  /**\r\n   * Creates a new Ui instance using the specified properties.\r\n   * @function create\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi=} [properties] Properties to set\r\n   * @returns {Ui} Ui instance\r\n   */\r\n  Ui.create = function create(properties) {\r\n    return new Ui(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.previewText != null &&\r\n      Object.hasOwnProperty.call(message, 'previewText')\r\n    )\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Ui()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.previewText = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies an Ui message.\r\n   * @function verify\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Ui.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      if (!$util.isString(message.previewText))\r\n        return 'previewText: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Ui} Ui\r\n   */\r\n  Ui.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Ui) return object\r\n    let message = new $root.Ui()\r\n    if (object.previewText != null)\r\n      message.previewText = String(object.previewText)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Ui} message Ui\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Ui.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) object.previewText = ''\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      object.previewText = message.previewText\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Ui to JSON.\r\n   * @function toJSON\r\n   * @memberof Ui\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Ui.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Ui\r\n})())\r\n\r\nexport const Project = ($root.Project = (() => {\r\n  /**\r\n   * Properties of a Project.\r\n   * @exports IProject\r\n   * @interface IProject\r\n   * @property {number|Long|null} [id] Project id\r\n   * @property {string|null} [name] Project name\r\n   * @property {string|null} [text] Project text\r\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\r\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\r\n   * @property {IStyle|null} [style] Project style\r\n   * @property {ILayout|null} [layout] Project layout\r\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\r\n   * @property {IUi|null} [ui] Project ui\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Project.\r\n   * @exports Project\r\n   * @classdesc Represents a Project.\r\n   * @implements IProject\r\n   * @constructor\r\n   * @param {IProject=} [properties] Properties to set\r\n   */\r\n  function Project(properties) {\r\n    this.glyphs = {}\r\n    this.glyphImages = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Project id.\r\n   * @member {number|Long} id\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\r\n\r\n  /**\r\n   * Project name.\r\n   * @member {string} name\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.name = ''\r\n\r\n  /**\r\n   * Project text.\r\n   * @member {string} text\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.text = ''\r\n\r\n  /**\r\n   * Project glyphs.\r\n   * @member {Object.<string,IGlyphFont>} glyphs\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphs = $util.emptyObject\r\n\r\n  /**\r\n   * Project glyphImages.\r\n   * @member {Array.<IGlyphImage>} glyphImages\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphImages = $util.emptyArray\r\n\r\n  /**\r\n   * Project style.\r\n   * @member {IStyle|null|undefined} style\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.style = null\r\n\r\n  /**\r\n   * Project layout.\r\n   * @member {ILayout|null|undefined} layout\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.layout = null\r\n\r\n  /**\r\n   * Project globalAdjustMetric.\r\n   * @member {IMetric|null|undefined} globalAdjustMetric\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.globalAdjustMetric = null\r\n\r\n  /**\r\n   * Project ui.\r\n   * @member {IUi|null|undefined} ui\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.ui = null\r\n\r\n  /**\r\n   * Creates a new Project instance using the specified properties.\r\n   * @function create\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject=} [properties] Properties to set\r\n   * @returns {Project} Project instance\r\n   */\r\n  Project.create = function create(properties) {\r\n    return new Project(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\r\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\r\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\r\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\r\n      for (\r\n        let keys = Object.keys(message.glyphs), i = 0;\r\n        i < keys.length;\r\n        ++i\r\n      ) {\r\n        writer\r\n          .uint32(/* id 4, wireType 2 =*/ 34)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n        $root.GlyphFont.encode(\r\n          message.glyphs[keys[i]],\r\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n        )\r\n          .ldelim()\r\n          .ldelim()\r\n      }\r\n    if (message.glyphImages != null && message.glyphImages.length)\r\n      for (let i = 0; i < message.glyphImages.length; ++i)\r\n        $root.GlyphImage.encode(\r\n          message.glyphImages[i],\r\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\r\n        ).ldelim()\r\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\r\n      $root.Style.encode(\r\n        message.style,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\r\n      $root.Layout.encode(\r\n        message.layout,\r\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.globalAdjustMetric,\r\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\r\n      ).ldelim()\r\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\r\n      $root.Ui.encode(\r\n        message.ui,\r\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\r\n      ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Project(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int64()\r\n          break\r\n        case 2:\r\n          message.name = reader.string()\r\n          break\r\n        case 3:\r\n          message.text = reader.string()\r\n          break\r\n        case 4:\r\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = null\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = $root.GlyphFont.decode(reader, reader.uint32())\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.glyphs[key] = value\r\n          break\r\n        case 5:\r\n          if (!(message.glyphImages && message.glyphImages.length))\r\n            message.glyphImages = []\r\n          message.glyphImages.push(\r\n            $root.GlyphImage.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        case 6:\r\n          message.style = $root.Style.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.layout = $root.Layout.decode(reader, reader.uint32())\r\n          break\r\n        case 8:\r\n          message.globalAdjustMetric = $root.Metric.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 9:\r\n          message.ui = $root.Ui.decode(reader, reader.uint32())\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Project message.\r\n   * @function verify\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Project.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (\r\n        !$util.isInteger(message.id) &&\r\n        !(\r\n          message.id &&\r\n          $util.isInteger(message.id.low) &&\r\n          $util.isInteger(message.id.high)\r\n        )\r\n      )\r\n        return 'id: integer|Long expected'\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      if (!$util.isString(message.name)) return 'name: string expected'\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      if (!$util.isString(message.text)) return 'text: string expected'\r\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\r\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\r\n      let key = Object.keys(message.glyphs)\r\n      for (let i = 0; i < key.length; ++i) {\r\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\r\n        if (error) return 'glyphs.' + error\r\n      }\r\n    }\r\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\r\n      if (!Array.isArray(message.glyphImages))\r\n        return 'glyphImages: array expected'\r\n      for (let i = 0; i < message.glyphImages.length; ++i) {\r\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\r\n        if (error) return 'glyphImages.' + error\r\n      }\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style')) {\r\n      let error = $root.Style.verify(message.style)\r\n      if (error) return 'style.' + error\r\n    }\r\n    if (message.layout != null && message.hasOwnProperty('layout')) {\r\n      let error = $root.Layout.verify(message.layout)\r\n      if (error) return 'layout.' + error\r\n    }\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.globalAdjustMetric)\r\n      if (error) return 'globalAdjustMetric.' + error\r\n    }\r\n    if (message.ui != null && message.hasOwnProperty('ui')) {\r\n      let error = $root.Ui.verify(message.ui)\r\n      if (error) return 'ui.' + error\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Project} Project\r\n   */\r\n  Project.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Project) return object\r\n    let message = new $root.Project()\r\n    if (object.id != null)\r\n      if ($util.Long)\r\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\r\n      else if (typeof object.id === 'string')\r\n        message.id = parseInt(object.id, 10)\r\n      else if (typeof object.id === 'number') message.id = object.id\r\n      else if (typeof object.id === 'object')\r\n        message.id = new $util.LongBits(\r\n          object.id.low >>> 0,\r\n          object.id.high >>> 0,\r\n        ).toNumber()\r\n    if (object.name != null) message.name = String(object.name)\r\n    if (object.text != null) message.text = String(object.text)\r\n    if (object.glyphs) {\r\n      if (typeof object.glyphs !== 'object')\r\n        throw TypeError('.Project.glyphs: object expected')\r\n      message.glyphs = {}\r\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\r\n        if (typeof object.glyphs[keys[i]] !== 'object')\r\n          throw TypeError('.Project.glyphs: object expected')\r\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\r\n          object.glyphs[keys[i]],\r\n        )\r\n      }\r\n    }\r\n    if (object.glyphImages) {\r\n      if (!Array.isArray(object.glyphImages))\r\n        throw TypeError('.Project.glyphImages: array expected')\r\n      message.glyphImages = []\r\n      for (let i = 0; i < object.glyphImages.length; ++i) {\r\n        if (typeof object.glyphImages[i] !== 'object')\r\n          throw TypeError('.Project.glyphImages: object expected')\r\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\r\n          object.glyphImages[i],\r\n        )\r\n      }\r\n    }\r\n    if (object.style != null) {\r\n      if (typeof object.style !== 'object')\r\n        throw TypeError('.Project.style: object expected')\r\n      message.style = $root.Style.fromObject(object.style)\r\n    }\r\n    if (object.layout != null) {\r\n      if (typeof object.layout !== 'object')\r\n        throw TypeError('.Project.layout: object expected')\r\n      message.layout = $root.Layout.fromObject(object.layout)\r\n    }\r\n    if (object.globalAdjustMetric != null) {\r\n      if (typeof object.globalAdjustMetric !== 'object')\r\n        throw TypeError('.Project.globalAdjustMetric: object expected')\r\n      message.globalAdjustMetric = $root.Metric.fromObject(\r\n        object.globalAdjustMetric,\r\n      )\r\n    }\r\n    if (object.ui != null) {\r\n      if (typeof object.ui !== 'object')\r\n        throw TypeError('.Project.ui: object expected')\r\n      message.ui = $root.Ui.fromObject(object.ui)\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Project} message Project\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Project.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.glyphImages = []\r\n    if (options.objects || options.defaults) object.glyphs = {}\r\n    if (options.defaults) {\r\n      if ($util.Long) {\r\n        let long = new $util.Long(0, 0, false)\r\n        object.id =\r\n          options.longs === String\r\n            ? long.toString()\r\n            : options.longs === Number\r\n            ? long.toNumber()\r\n            : long\r\n      } else object.id = options.longs === String ? '0' : 0\r\n      object.name = ''\r\n      object.text = ''\r\n      object.style = null\r\n      object.layout = null\r\n      object.globalAdjustMetric = null\r\n      object.ui = null\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (typeof message.id === 'number')\r\n        object.id = options.longs === String ? String(message.id) : message.id\r\n      else\r\n        object.id =\r\n          options.longs === String\r\n            ? $util.Long.prototype.toString.call(message.id)\r\n            : options.longs === Number\r\n            ? new $util.LongBits(\r\n                message.id.low >>> 0,\r\n                message.id.high >>> 0,\r\n              ).toNumber()\r\n            : message.id\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      object.name = message.name\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      object.text = message.text\r\n    let keys2\r\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\r\n      object.glyphs = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\r\n          message.glyphs[keys2[j]],\r\n          options,\r\n        )\r\n    }\r\n    if (message.glyphImages && message.glyphImages.length) {\r\n      object.glyphImages = []\r\n      for (let j = 0; j < message.glyphImages.length; ++j)\r\n        object.glyphImages[j] = $root.GlyphImage.toObject(\r\n          message.glyphImages[j],\r\n          options,\r\n        )\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style'))\r\n      object.style = $root.Style.toObject(message.style, options)\r\n    if (message.layout != null && message.hasOwnProperty('layout'))\r\n      object.layout = $root.Layout.toObject(message.layout, options)\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    )\r\n      object.globalAdjustMetric = $root.Metric.toObject(\r\n        message.globalAdjustMetric,\r\n        options,\r\n      )\r\n    if (message.ui != null && message.hasOwnProperty('ui'))\r\n      object.ui = $root.Ui.toObject(message.ui, options)\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Project to JSON.\r\n   * @function toJSON\r\n   * @memberof Project\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Project.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Project\r\n})())\r\n\r\nexport { $root as default }\r\n","import { IProject } from './project'\r\nimport { IProject as IProjectNext } from '../1.0.1'\r\n\r\nexport default function updateToNext(project: IProject): IProjectNext {\r\n  const next = project as IProjectNext\r\n  next.layout = { ...project.layout }\r\n  next.layout.width = 1024\r\n  next.layout.height = 1024\r\n  next.layout.auto = true\r\n  next.layout.fixedSize = false\r\n  return next\r\n}\r\n","/* eslint-disable */\r\nimport * as $protobuf from 'protobufjs/minimal'\r\n\r\n// Common aliases\r\nconst $Reader = $protobuf.Reader,\r\n  $Writer = $protobuf.Writer,\r\n  $util = $protobuf.util\r\n\r\n// Exported root namespace\r\nconst $root = {}\r\n\r\nexport const Metric = ($root.Metric = (() => {\r\n  /**\r\n   * Properties of a Metric.\r\n   * @exports IMetric\r\n   * @interface IMetric\r\n   * @property {number|null} [xAdvance] Metric xAdvance\r\n   * @property {number|null} [xOffset] Metric xOffset\r\n   * @property {number|null} [yOffset] Metric yOffset\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Metric.\r\n   * @exports Metric\r\n   * @classdesc Represents a Metric.\r\n   * @implements IMetric\r\n   * @constructor\r\n   * @param {IMetric=} [properties] Properties to set\r\n   */\r\n  function Metric(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Metric xAdvance.\r\n   * @member {number} xAdvance\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xAdvance = 0\r\n\r\n  /**\r\n   * Metric xOffset.\r\n   * @member {number} xOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xOffset = 0\r\n\r\n  /**\r\n   * Metric yOffset.\r\n   * @member {number} yOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.yOffset = 0\r\n\r\n  /**\r\n   * Creates a new Metric instance using the specified properties.\r\n   * @function create\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric=} [properties] Properties to set\r\n   * @returns {Metric} Metric instance\r\n   */\r\n  Metric.create = function create(properties) {\r\n    return new Metric(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.xAdvance != null &&\r\n      Object.hasOwnProperty.call(message, 'xAdvance')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\r\n    if (\r\n      message.xOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'xOffset')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\r\n    if (\r\n      message.yOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'yOffset')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Metric()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.xAdvance = reader.sint32()\r\n          break\r\n        case 2:\r\n          message.xOffset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.yOffset = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Metric message.\r\n   * @function verify\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Metric.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      if (!$util.isInteger(message.xAdvance))\r\n        return 'xAdvance: integer expected'\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Metric} Metric\r\n   */\r\n  Metric.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Metric) return object\r\n    let message = new $root.Metric()\r\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\r\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\r\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Metric} message Metric\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Metric.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.xAdvance = 0\r\n      object.xOffset = 0\r\n      object.yOffset = 0\r\n    }\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      object.xAdvance = message.xAdvance\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      object.xOffset = message.xOffset\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      object.yOffset = message.yOffset\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Metric to JSON.\r\n   * @function toJSON\r\n   * @memberof Metric\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Metric.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Metric\r\n})())\r\n\r\nexport const GradientColor = ($root.GradientColor = (() => {\r\n  /**\r\n   * Properties of a GradientColor.\r\n   * @exports IGradientColor\r\n   * @interface IGradientColor\r\n   * @property {number|null} [id] GradientColor id\r\n   * @property {number|null} [offset] GradientColor offset\r\n   * @property {string|null} [color] GradientColor color\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GradientColor.\r\n   * @exports GradientColor\r\n   * @classdesc Represents a GradientColor.\r\n   * @implements IGradientColor\r\n   * @constructor\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   */\r\n  function GradientColor(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GradientColor id.\r\n   * @member {number} id\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.id = 0\r\n\r\n  /**\r\n   * GradientColor offset.\r\n   * @member {number} offset\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.offset = 0\r\n\r\n  /**\r\n   * GradientColor color.\r\n   * @member {string} color\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.color = ''\r\n\r\n  /**\r\n   * Creates a new GradientColor instance using the specified properties.\r\n   * @function create\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   * @returns {GradientColor} GradientColor instance\r\n   */\r\n  GradientColor.create = function create(properties) {\r\n    return new GradientColor(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\r\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.offset)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GradientColor()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int32()\r\n          break\r\n        case 2:\r\n          message.offset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.color = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GradientColor message.\r\n   * @function verify\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GradientColor.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      if (!$util.isInteger(message.offset)) return 'offset: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GradientColor} GradientColor\r\n   */\r\n  GradientColor.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GradientColor) return object\r\n    let message = new $root.GradientColor()\r\n    if (object.id != null) message.id = object.id | 0\r\n    if (object.offset != null) message.offset = object.offset | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {GradientColor} message GradientColor\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GradientColor.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.id = 0\r\n      object.offset = 0\r\n      object.color = ''\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      object.id = message.id\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      object.offset = message.offset\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GradientColor to JSON.\r\n   * @function toJSON\r\n   * @memberof GradientColor\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GradientColor.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GradientColor\r\n})())\r\n\r\nexport const Gradient = ($root.Gradient = (() => {\r\n  /**\r\n   * Properties of a Gradient.\r\n   * @exports IGradient\r\n   * @interface IGradient\r\n   * @property {number|null} [type] Gradient type\r\n   * @property {number|null} [angle] Gradient angle\r\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Gradient.\r\n   * @exports Gradient\r\n   * @classdesc Represents a Gradient.\r\n   * @implements IGradient\r\n   * @constructor\r\n   * @param {IGradient=} [properties] Properties to set\r\n   */\r\n  function Gradient(properties) {\r\n    this.palette = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Gradient type.\r\n   * @member {number} type\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.type = 0\r\n\r\n  /**\r\n   * Gradient angle.\r\n   * @member {number} angle\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.angle = 0\r\n\r\n  /**\r\n   * Gradient palette.\r\n   * @member {Array.<IGradientColor>} palette\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.palette = $util.emptyArray\r\n\r\n  /**\r\n   * Creates a new Gradient instance using the specified properties.\r\n   * @function create\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient=} [properties] Properties to set\r\n   * @returns {Gradient} Gradient instance\r\n   */\r\n  Gradient.create = function create(properties) {\r\n    return new Gradient(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\r\n    if (message.palette != null && message.palette.length)\r\n      for (let i = 0; i < message.palette.length; ++i)\r\n        $root.GradientColor.encode(\r\n          message.palette[i],\r\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n        ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Gradient()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.angle = reader.float()\r\n          break\r\n        case 3:\r\n          if (!(message.palette && message.palette.length)) message.palette = []\r\n          message.palette.push(\r\n            $root.GradientColor.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Gradient message.\r\n   * @function verify\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Gradient.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      if (typeof message.angle !== 'number') return 'angle: number expected'\r\n    if (message.palette != null && message.hasOwnProperty('palette')) {\r\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\r\n      for (let i = 0; i < message.palette.length; ++i) {\r\n        let error = $root.GradientColor.verify(message.palette[i])\r\n        if (error) return 'palette.' + error\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Gradient} Gradient\r\n   */\r\n  Gradient.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Gradient) return object\r\n    let message = new $root.Gradient()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.angle != null) message.angle = Number(object.angle)\r\n    if (object.palette) {\r\n      if (!Array.isArray(object.palette))\r\n        throw TypeError('.Gradient.palette: array expected')\r\n      message.palette = []\r\n      for (let i = 0; i < object.palette.length; ++i) {\r\n        if (typeof object.palette[i] !== 'object')\r\n          throw TypeError('.Gradient.palette: object expected')\r\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Gradient} message Gradient\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Gradient.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.palette = []\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.angle = 0\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      object.angle =\r\n        options.json && !isFinite(message.angle)\r\n          ? String(message.angle)\r\n          : message.angle\r\n    if (message.palette && message.palette.length) {\r\n      object.palette = []\r\n      for (let j = 0; j < message.palette.length; ++j)\r\n        object.palette[j] = $root.GradientColor.toObject(\r\n          message.palette[j],\r\n          options,\r\n        )\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Gradient to JSON.\r\n   * @function toJSON\r\n   * @memberof Gradient\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Gradient.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Gradient\r\n})())\r\n\r\nexport const PatternTexture = ($root.PatternTexture = (() => {\r\n  /**\r\n   * Properties of a PatternTexture.\r\n   * @exports IPatternTexture\r\n   * @interface IPatternTexture\r\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\r\n   * @property {number|null} [scale] PatternTexture scale\r\n   * @property {string|null} [repetition] PatternTexture repetition\r\n   */\r\n\r\n  /**\r\n   * Constructs a new PatternTexture.\r\n   * @exports PatternTexture\r\n   * @classdesc Represents a PatternTexture.\r\n   * @implements IPatternTexture\r\n   * @constructor\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   */\r\n  function PatternTexture(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * PatternTexture buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * PatternTexture scale.\r\n   * @member {number} scale\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.scale = 0\r\n\r\n  /**\r\n   * PatternTexture repetition.\r\n   * @member {string} repetition\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.repetition = ''\r\n\r\n  /**\r\n   * Creates a new PatternTexture instance using the specified properties.\r\n   * @function create\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   * @returns {PatternTexture} PatternTexture instance\r\n   */\r\n  PatternTexture.create = function create(properties) {\r\n    return new PatternTexture(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\r\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\r\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\r\n    if (\r\n      message.repetition != null &&\r\n      Object.hasOwnProperty.call(message, 'repetition')\r\n    )\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.PatternTexture()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.scale = reader.double()\r\n          break\r\n        case 3:\r\n          message.repetition = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a PatternTexture message.\r\n   * @function verify\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  PatternTexture.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      if (typeof message.scale !== 'number') return 'scale: number expected'\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      if (!$util.isString(message.repetition))\r\n        return 'repetition: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {PatternTexture} PatternTexture\r\n   */\r\n  PatternTexture.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.PatternTexture) return object\r\n    let message = new $root.PatternTexture()\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.scale != null) message.scale = Number(object.scale)\r\n    if (object.repetition != null)\r\n      message.repetition = String(object.repetition)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {PatternTexture} message PatternTexture\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  PatternTexture.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.scale = 0\r\n      object.repetition = ''\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      object.scale =\r\n        options.json && !isFinite(message.scale)\r\n          ? String(message.scale)\r\n          : message.scale\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      object.repetition = message.repetition\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this PatternTexture to JSON.\r\n   * @function toJSON\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  PatternTexture.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return PatternTexture\r\n})())\r\n\r\nexport const Fill = ($root.Fill = (() => {\r\n  /**\r\n   * Properties of a Fill.\r\n   * @exports IFill\r\n   * @interface IFill\r\n   * @property {number|null} [type] Fill type\r\n   * @property {string|null} [color] Fill color\r\n   * @property {IGradient|null} [gradient] Fill gradient\r\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\r\n   * @property {number|null} [width] Fill width\r\n   * @property {string|null} [lineCap] Fill lineCap\r\n   * @property {string|null} [lineJoin] Fill lineJoin\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Fill.\r\n   * @exports Fill\r\n   * @classdesc Represents a Fill.\r\n   * @implements IFill\r\n   * @constructor\r\n   * @param {IFill=} [properties] Properties to set\r\n   */\r\n  function Fill(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Fill type.\r\n   * @member {number} type\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.type = 0\r\n\r\n  /**\r\n   * Fill color.\r\n   * @member {string} color\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.color = ''\r\n\r\n  /**\r\n   * Fill gradient.\r\n   * @member {IGradient|null|undefined} gradient\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.gradient = null\r\n\r\n  /**\r\n   * Fill patternTexture.\r\n   * @member {IPatternTexture|null|undefined} patternTexture\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.patternTexture = null\r\n\r\n  /**\r\n   * Fill width.\r\n   * @member {number} width\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.width = 0\r\n\r\n  /**\r\n   * Fill lineCap.\r\n   * @member {string} lineCap\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineCap = ''\r\n\r\n  /**\r\n   * Fill lineJoin.\r\n   * @member {string} lineJoin\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineJoin = ''\r\n\r\n  /**\r\n   * Creates a new Fill instance using the specified properties.\r\n   * @function create\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill=} [properties] Properties to set\r\n   * @returns {Fill} Fill instance\r\n   */\r\n  Fill.create = function create(properties) {\r\n    return new Fill(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\r\n    if (\r\n      message.gradient != null &&\r\n      Object.hasOwnProperty.call(message, 'gradient')\r\n    )\r\n      $root.Gradient.encode(\r\n        message.gradient,\r\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.patternTexture != null &&\r\n      Object.hasOwnProperty.call(message, 'patternTexture')\r\n    )\r\n      $root.PatternTexture.encode(\r\n        message.patternTexture,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\r\n    if (\r\n      message.lineCap != null &&\r\n      Object.hasOwnProperty.call(message, 'lineCap')\r\n    )\r\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\r\n    if (\r\n      message.lineJoin != null &&\r\n      Object.hasOwnProperty.call(message, 'lineJoin')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Fill()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.color = reader.string()\r\n          break\r\n        case 3:\r\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\r\n          break\r\n        case 4:\r\n          message.patternTexture = $root.PatternTexture.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 5:\r\n          message.width = reader.int32()\r\n          break\r\n        case 6:\r\n          message.lineCap = reader.string()\r\n          break\r\n        case 7:\r\n          message.lineJoin = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Fill message.\r\n   * @function verify\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Fill.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\r\n      let error = $root.Gradient.verify(message.gradient)\r\n      if (error) return 'gradient.' + error\r\n    }\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    ) {\r\n      let error = $root.PatternTexture.verify(message.patternTexture)\r\n      if (error) return 'patternTexture.' + error\r\n    }\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Fill} Fill\r\n   */\r\n  Fill.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Fill) return object\r\n    let message = new $root.Fill()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.gradient != null) {\r\n      if (typeof object.gradient !== 'object')\r\n        throw TypeError('.Fill.gradient: object expected')\r\n      message.gradient = $root.Gradient.fromObject(object.gradient)\r\n    }\r\n    if (object.patternTexture != null) {\r\n      if (typeof object.patternTexture !== 'object')\r\n        throw TypeError('.Fill.patternTexture: object expected')\r\n      message.patternTexture = $root.PatternTexture.fromObject(\r\n        object.patternTexture,\r\n      )\r\n    }\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\r\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Fill} message Fill\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Fill.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.color = ''\r\n      object.gradient = null\r\n      object.patternTexture = null\r\n      object.width = 0\r\n      object.lineCap = ''\r\n      object.lineJoin = ''\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\r\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    )\r\n      object.patternTexture = $root.PatternTexture.toObject(\r\n        message.patternTexture,\r\n        options,\r\n      )\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      object.lineCap = message.lineCap\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      object.lineJoin = message.lineJoin\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Fill to JSON.\r\n   * @function toJSON\r\n   * @memberof Fill\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Fill.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Fill\r\n})())\r\n\r\nexport const Font = ($root.Font = (() => {\r\n  /**\r\n   * Properties of a Font.\r\n   * @exports IFont\r\n   * @interface IFont\r\n   * @property {Uint8Array|null} [font] Font font\r\n   * @property {string|null} [family] Font family\r\n   * @property {number|null} [size] Font size\r\n   * @property {number|null} [lineHeight] Font lineHeight\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Font.\r\n   * @exports Font\r\n   * @classdesc Represents a Font.\r\n   * @implements IFont\r\n   * @constructor\r\n   * @param {IFont=} [properties] Properties to set\r\n   */\r\n  function Font(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Font font.\r\n   * @member {Uint8Array} font\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.font = $util.newBuffer([])\r\n\r\n  /**\r\n   * Font family.\r\n   * @member {string} family\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.family = ''\r\n\r\n  /**\r\n   * Font size.\r\n   * @member {number} size\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.size = 0\r\n\r\n  /**\r\n   * Font lineHeight.\r\n   * @member {number} lineHeight\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.lineHeight = 0\r\n\r\n  /**\r\n   * Creates a new Font instance using the specified properties.\r\n   * @function create\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont=} [properties] Properties to set\r\n   * @returns {Font} Font instance\r\n   */\r\n  Font.create = function create(properties) {\r\n    return new Font(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\r\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\r\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\r\n    if (\r\n      message.lineHeight != null &&\r\n      Object.hasOwnProperty.call(message, 'lineHeight')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Font()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.family = reader.string()\r\n          break\r\n        case 3:\r\n          message.size = reader.int32()\r\n          break\r\n        case 4:\r\n          message.lineHeight = reader.int32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Font message.\r\n   * @function verify\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Font.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      if (\r\n        !(\r\n          (message.font && typeof message.font.length === 'number') ||\r\n          $util.isString(message.font)\r\n        )\r\n      )\r\n        return 'font: buffer expected'\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      if (!$util.isString(message.family)) return 'family: string expected'\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      if (!$util.isInteger(message.lineHeight))\r\n        return 'lineHeight: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Font} Font\r\n   */\r\n  Font.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Font) return object\r\n    let message = new $root.Font()\r\n    if (object.font != null)\r\n      if (typeof object.font === 'string')\r\n        $util.base64.decode(\r\n          object.font,\r\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\r\n          0,\r\n        )\r\n      else if (object.font.length) message.font = object.font\r\n    if (object.family != null) message.family = String(object.family)\r\n    if (object.size != null) message.size = object.size | 0\r\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Font} message Font\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Font.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.font = ''\r\n      else {\r\n        object.font = []\r\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\r\n      }\r\n      object.family = ''\r\n      object.size = 0\r\n      object.lineHeight = 0\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.font, 0, message.font.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.font)\r\n          : message.font\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      object.family = message.family\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      object.size = message.size\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      object.lineHeight = message.lineHeight\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Font to JSON.\r\n   * @function toJSON\r\n   * @memberof Font\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Font.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Font\r\n})())\r\n\r\nexport const GlyphFont = ($root.GlyphFont = (() => {\r\n  /**\r\n   * Properties of a GlyphFont.\r\n   * @exports IGlyphFont\r\n   * @interface IGlyphFont\r\n   * @property {string|null} [letter] GlyphFont letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\r\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphFont.\r\n   * @exports GlyphFont\r\n   * @classdesc Represents a GlyphFont.\r\n   * @implements IGlyphFont\r\n   * @constructor\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   */\r\n  function GlyphFont(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphFont letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphFont adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphFont kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphFont instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   * @returns {GlyphFont} GlyphFont instance\r\n   */\r\n  GlyphFont.create = function create(properties) {\r\n    return new GlyphFont(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 3, wireType 2 =*/ 26)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphFont(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphFont message.\r\n   * @function verify\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphFont.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphFont} GlyphFont\r\n   */\r\n  GlyphFont.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphFont) return object\r\n    let message = new $root.GlyphFont()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphFont.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {GlyphFont} message GlyphFont\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphFont.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphFont to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphFont.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphFont\r\n})())\r\n\r\nexport const GlyphImage = ($root.GlyphImage = (() => {\r\n  /**\r\n   * Properties of a GlyphImage.\r\n   * @exports IGlyphImage\r\n   * @interface IGlyphImage\r\n   * @property {string|null} [letter] GlyphImage letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\r\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\r\n   * @property {string|null} [fileName] GlyphImage fileName\r\n   * @property {string|null} [fileType] GlyphImage fileType\r\n   * @property {boolean|null} [selected] GlyphImage selected\r\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphImage.\r\n   * @exports GlyphImage\r\n   * @classdesc Represents a GlyphImage.\r\n   * @implements IGlyphImage\r\n   * @constructor\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   */\r\n  function GlyphImage(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphImage letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphImage adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphImage buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * GlyphImage fileName.\r\n   * @member {string} fileName\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileName = ''\r\n\r\n  /**\r\n   * GlyphImage fileType.\r\n   * @member {string} fileType\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileType = ''\r\n\r\n  /**\r\n   * GlyphImage selected.\r\n   * @member {boolean} selected\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.selected = false\r\n\r\n  /**\r\n   * GlyphImage kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphImage instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   * @returns {GlyphImage} GlyphImage instance\r\n   */\r\n  GlyphImage.create = function create(properties) {\r\n    return new GlyphImage(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\r\n    if (\r\n      message.fileName != null &&\r\n      Object.hasOwnProperty.call(message, 'fileName')\r\n    )\r\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\r\n    if (\r\n      message.fileType != null &&\r\n      Object.hasOwnProperty.call(message, 'fileType')\r\n    )\r\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\r\n    if (\r\n      message.selected != null &&\r\n      Object.hasOwnProperty.call(message, 'selected')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 7, wireType 2 =*/ 58)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphImage(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 4:\r\n          message.fileName = reader.string()\r\n          break\r\n        case 5:\r\n          message.fileType = reader.string()\r\n          break\r\n        case 6:\r\n          message.selected = reader.bool()\r\n          break\r\n        case 7:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphImage message.\r\n   * @function verify\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphImage.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      if (typeof message.selected !== 'boolean')\r\n        return 'selected: boolean expected'\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphImage} GlyphImage\r\n   */\r\n  GlyphImage.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphImage) return object\r\n    let message = new $root.GlyphImage()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.fileName != null) message.fileName = String(object.fileName)\r\n    if (object.fileType != null) message.fileType = String(object.fileType)\r\n    if (object.selected != null) message.selected = Boolean(object.selected)\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphImage.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {GlyphImage} message GlyphImage\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphImage.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.fileName = ''\r\n      object.fileType = ''\r\n      object.selected = false\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      object.fileName = message.fileName\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      object.fileType = message.fileType\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      object.selected = message.selected\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphImage to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphImage.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphImage\r\n})())\r\n\r\nexport const Layout = ($root.Layout = (() => {\r\n  /**\r\n   * Properties of a Layout.\r\n   * @exports ILayout\r\n   * @interface ILayout\r\n   * @property {number|null} [padding] Layout padding\r\n   * @property {number|null} [spacing] Layout spacing\r\n   * @property {number|null} [width] Layout width\r\n   * @property {number|null} [height] Layout height\r\n   * @property {boolean|null} [auto] Layout auto\r\n   * @property {boolean|null} [fixedSize] Layout fixedSize\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Layout.\r\n   * @exports Layout\r\n   * @classdesc Represents a Layout.\r\n   * @implements ILayout\r\n   * @constructor\r\n   * @param {ILayout=} [properties] Properties to set\r\n   */\r\n  function Layout(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Layout padding.\r\n   * @member {number} padding\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.padding = 0\r\n\r\n  /**\r\n   * Layout spacing.\r\n   * @member {number} spacing\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.spacing = 0\r\n\r\n  /**\r\n   * Layout width.\r\n   * @member {number} width\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.width = 0\r\n\r\n  /**\r\n   * Layout height.\r\n   * @member {number} height\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.height = 0\r\n\r\n  /**\r\n   * Layout auto.\r\n   * @member {boolean} auto\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.auto = false\r\n\r\n  /**\r\n   * Layout fixedSize.\r\n   * @member {boolean} fixedSize\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.fixedSize = false\r\n\r\n  /**\r\n   * Creates a new Layout instance using the specified properties.\r\n   * @function create\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout=} [properties] Properties to set\r\n   * @returns {Layout} Layout instance\r\n   */\r\n  Layout.create = function create(properties) {\r\n    return new Layout(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.padding != null &&\r\n      Object.hasOwnProperty.call(message, 'padding')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\r\n    if (\r\n      message.spacing != null &&\r\n      Object.hasOwnProperty.call(message, 'spacing')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\r\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\r\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\r\n    if (\r\n      message.fixedSize != null &&\r\n      Object.hasOwnProperty.call(message, 'fixedSize')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Layout()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.padding = reader.int32()\r\n          break\r\n        case 2:\r\n          message.spacing = reader.int32()\r\n          break\r\n        case 3:\r\n          message.width = reader.int32()\r\n          break\r\n        case 4:\r\n          message.height = reader.int32()\r\n          break\r\n        case 5:\r\n          message.auto = reader.bool()\r\n          break\r\n        case 6:\r\n          message.fixedSize = reader.bool()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Layout message.\r\n   * @function verify\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Layout.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      if (typeof message.fixedSize !== 'boolean')\r\n        return 'fixedSize: boolean expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Layout} Layout\r\n   */\r\n  Layout.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Layout) return object\r\n    let message = new $root.Layout()\r\n    if (object.padding != null) message.padding = object.padding | 0\r\n    if (object.spacing != null) message.spacing = object.spacing | 0\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.height != null) message.height = object.height | 0\r\n    if (object.auto != null) message.auto = Boolean(object.auto)\r\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Layout} message Layout\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Layout.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.padding = 0\r\n      object.spacing = 0\r\n      object.width = 0\r\n      object.height = 0\r\n      object.auto = false\r\n      object.fixedSize = false\r\n    }\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      object.padding = message.padding\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      object.spacing = message.spacing\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      object.height = message.height\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      object.auto = message.auto\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      object.fixedSize = message.fixedSize\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Layout to JSON.\r\n   * @function toJSON\r\n   * @memberof Layout\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Layout.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Layout\r\n})())\r\n\r\nexport const Shadow = ($root.Shadow = (() => {\r\n  /**\r\n   * Properties of a Shadow.\r\n   * @exports IShadow\r\n   * @interface IShadow\r\n   * @property {string|null} [color] Shadow color\r\n   * @property {number|null} [blur] Shadow blur\r\n   * @property {number|null} [offsetX] Shadow offsetX\r\n   * @property {number|null} [offsetY] Shadow offsetY\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Shadow.\r\n   * @exports Shadow\r\n   * @classdesc Represents a Shadow.\r\n   * @implements IShadow\r\n   * @constructor\r\n   * @param {IShadow=} [properties] Properties to set\r\n   */\r\n  function Shadow(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Shadow color.\r\n   * @member {string} color\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.color = ''\r\n\r\n  /**\r\n   * Shadow blur.\r\n   * @member {number} blur\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.blur = 0\r\n\r\n  /**\r\n   * Shadow offsetX.\r\n   * @member {number} offsetX\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetX = 0\r\n\r\n  /**\r\n   * Shadow offsetY.\r\n   * @member {number} offsetY\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetY = 0\r\n\r\n  /**\r\n   * Creates a new Shadow instance using the specified properties.\r\n   * @function create\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow=} [properties] Properties to set\r\n   * @returns {Shadow} Shadow instance\r\n   */\r\n  Shadow.create = function create(properties) {\r\n    return new Shadow(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\r\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\r\n    if (\r\n      message.offsetX != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetX')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\r\n    if (\r\n      message.offsetY != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetY')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Shadow()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.color = reader.string()\r\n          break\r\n        case 2:\r\n          message.blur = reader.int32()\r\n          break\r\n        case 3:\r\n          message.offsetX = reader.sint32()\r\n          break\r\n        case 4:\r\n          message.offsetY = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Shadow message.\r\n   * @function verify\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Shadow.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Shadow} Shadow\r\n   */\r\n  Shadow.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Shadow) return object\r\n    let message = new $root.Shadow()\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.blur != null) message.blur = object.blur | 0\r\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\r\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Shadow} message Shadow\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Shadow.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.color = ''\r\n      object.blur = 0\r\n      object.offsetX = 0\r\n      object.offsetY = 0\r\n    }\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      object.blur = message.blur\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      object.offsetX = message.offsetX\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      object.offsetY = message.offsetY\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Shadow to JSON.\r\n   * @function toJSON\r\n   * @memberof Shadow\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Shadow.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Shadow\r\n})())\r\n\r\nexport const Style = ($root.Style = (() => {\r\n  /**\r\n   * Properties of a Style.\r\n   * @exports IStyle\r\n   * @interface IStyle\r\n   * @property {IFont|null} [font] Style font\r\n   * @property {IFill|null} [fill] Style fill\r\n   * @property {boolean|null} [useStroke] Style useStroke\r\n   * @property {IFill|null} [stroke] Style stroke\r\n   * @property {boolean|null} [useShadow] Style useShadow\r\n   * @property {IShadow|null} [shadow] Style shadow\r\n   * @property {string|null} [bgColor] Style bgColor\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Style.\r\n   * @exports Style\r\n   * @classdesc Represents a Style.\r\n   * @implements IStyle\r\n   * @constructor\r\n   * @param {IStyle=} [properties] Properties to set\r\n   */\r\n  function Style(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Style font.\r\n   * @member {IFont|null|undefined} font\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.font = null\r\n\r\n  /**\r\n   * Style fill.\r\n   * @member {IFill|null|undefined} fill\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.fill = null\r\n\r\n  /**\r\n   * Style useStroke.\r\n   * @member {boolean} useStroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useStroke = false\r\n\r\n  /**\r\n   * Style stroke.\r\n   * @member {IFill|null|undefined} stroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.stroke = null\r\n\r\n  /**\r\n   * Style useShadow.\r\n   * @member {boolean} useShadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useShadow = false\r\n\r\n  /**\r\n   * Style shadow.\r\n   * @member {IShadow|null|undefined} shadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.shadow = null\r\n\r\n  /**\r\n   * Style bgColor.\r\n   * @member {string} bgColor\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.bgColor = ''\r\n\r\n  /**\r\n   * Creates a new Style instance using the specified properties.\r\n   * @function create\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle=} [properties] Properties to set\r\n   * @returns {Style} Style instance\r\n   */\r\n  Style.create = function create(properties) {\r\n    return new Style(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      $root.Font.encode(\r\n        message.font,\r\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\r\n      ).ldelim()\r\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\r\n      $root.Fill.encode(\r\n        message.fill,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useStroke != null &&\r\n      Object.hasOwnProperty.call(message, 'useStroke')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\r\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\r\n      $root.Fill.encode(\r\n        message.stroke,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useShadow != null &&\r\n      Object.hasOwnProperty.call(message, 'useShadow')\r\n    )\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\r\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\r\n      $root.Shadow.encode(\r\n        message.shadow,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.bgColor != null &&\r\n      Object.hasOwnProperty.call(message, 'bgColor')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Style()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = $root.Font.decode(reader, reader.uint32())\r\n          break\r\n        case 2:\r\n          message.fill = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.useStroke = reader.bool()\r\n          break\r\n        case 4:\r\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 5:\r\n          message.useShadow = reader.bool()\r\n          break\r\n        case 6:\r\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.bgColor = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Style message.\r\n   * @function verify\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Style.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font')) {\r\n      let error = $root.Font.verify(message.font)\r\n      if (error) return 'font.' + error\r\n    }\r\n    if (message.fill != null && message.hasOwnProperty('fill')) {\r\n      let error = $root.Fill.verify(message.fill)\r\n      if (error) return 'fill.' + error\r\n    }\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      if (typeof message.useStroke !== 'boolean')\r\n        return 'useStroke: boolean expected'\r\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\r\n      let error = $root.Fill.verify(message.stroke)\r\n      if (error) return 'stroke.' + error\r\n    }\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      if (typeof message.useShadow !== 'boolean')\r\n        return 'useShadow: boolean expected'\r\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\r\n      let error = $root.Shadow.verify(message.shadow)\r\n      if (error) return 'shadow.' + error\r\n    }\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Style} Style\r\n   */\r\n  Style.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Style) return object\r\n    let message = new $root.Style()\r\n    if (object.font != null) {\r\n      if (typeof object.font !== 'object')\r\n        throw TypeError('.Style.font: object expected')\r\n      message.font = $root.Font.fromObject(object.font)\r\n    }\r\n    if (object.fill != null) {\r\n      if (typeof object.fill !== 'object')\r\n        throw TypeError('.Style.fill: object expected')\r\n      message.fill = $root.Fill.fromObject(object.fill)\r\n    }\r\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\r\n    if (object.stroke != null) {\r\n      if (typeof object.stroke !== 'object')\r\n        throw TypeError('.Style.stroke: object expected')\r\n      message.stroke = $root.Fill.fromObject(object.stroke)\r\n    }\r\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\r\n    if (object.shadow != null) {\r\n      if (typeof object.shadow !== 'object')\r\n        throw TypeError('.Style.shadow: object expected')\r\n      message.shadow = $root.Shadow.fromObject(object.shadow)\r\n    }\r\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Style} message Style\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Style.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.font = null\r\n      object.fill = null\r\n      object.useStroke = false\r\n      object.stroke = null\r\n      object.useShadow = false\r\n      object.shadow = null\r\n      object.bgColor = ''\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font = $root.Font.toObject(message.font, options)\r\n    if (message.fill != null && message.hasOwnProperty('fill'))\r\n      object.fill = $root.Fill.toObject(message.fill, options)\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      object.useStroke = message.useStroke\r\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\r\n      object.stroke = $root.Fill.toObject(message.stroke, options)\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      object.useShadow = message.useShadow\r\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\r\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      object.bgColor = message.bgColor\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Style to JSON.\r\n   * @function toJSON\r\n   * @memberof Style\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Style.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Style\r\n})())\r\n\r\nexport const Ui = ($root.Ui = (() => {\r\n  /**\r\n   * Properties of an Ui.\r\n   * @exports IUi\r\n   * @interface IUi\r\n   * @property {string|null} [previewText] Ui previewText\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Ui.\r\n   * @exports Ui\r\n   * @classdesc Represents an Ui.\r\n   * @implements IUi\r\n   * @constructor\r\n   * @param {IUi=} [properties] Properties to set\r\n   */\r\n  function Ui(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Ui previewText.\r\n   * @member {string} previewText\r\n   * @memberof Ui\r\n   * @instance\r\n   */\r\n  Ui.prototype.previewText = ''\r\n\r\n  /**\r\n   * Creates a new Ui instance using the specified properties.\r\n   * @function create\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi=} [properties] Properties to set\r\n   * @returns {Ui} Ui instance\r\n   */\r\n  Ui.create = function create(properties) {\r\n    return new Ui(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.previewText != null &&\r\n      Object.hasOwnProperty.call(message, 'previewText')\r\n    )\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Ui()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.previewText = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies an Ui message.\r\n   * @function verify\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Ui.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      if (!$util.isString(message.previewText))\r\n        return 'previewText: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Ui} Ui\r\n   */\r\n  Ui.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Ui) return object\r\n    let message = new $root.Ui()\r\n    if (object.previewText != null)\r\n      message.previewText = String(object.previewText)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Ui} message Ui\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Ui.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) object.previewText = ''\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      object.previewText = message.previewText\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Ui to JSON.\r\n   * @function toJSON\r\n   * @memberof Ui\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Ui.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Ui\r\n})())\r\n\r\nexport const Project = ($root.Project = (() => {\r\n  /**\r\n   * Properties of a Project.\r\n   * @exports IProject\r\n   * @interface IProject\r\n   * @property {number|Long|null} [id] Project id\r\n   * @property {string|null} [name] Project name\r\n   * @property {string|null} [text] Project text\r\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\r\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\r\n   * @property {IStyle|null} [style] Project style\r\n   * @property {ILayout|null} [layout] Project layout\r\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\r\n   * @property {IUi|null} [ui] Project ui\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Project.\r\n   * @exports Project\r\n   * @classdesc Represents a Project.\r\n   * @implements IProject\r\n   * @constructor\r\n   * @param {IProject=} [properties] Properties to set\r\n   */\r\n  function Project(properties) {\r\n    this.glyphs = {}\r\n    this.glyphImages = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Project id.\r\n   * @member {number|Long} id\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\r\n\r\n  /**\r\n   * Project name.\r\n   * @member {string} name\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.name = ''\r\n\r\n  /**\r\n   * Project text.\r\n   * @member {string} text\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.text = ''\r\n\r\n  /**\r\n   * Project glyphs.\r\n   * @member {Object.<string,IGlyphFont>} glyphs\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphs = $util.emptyObject\r\n\r\n  /**\r\n   * Project glyphImages.\r\n   * @member {Array.<IGlyphImage>} glyphImages\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphImages = $util.emptyArray\r\n\r\n  /**\r\n   * Project style.\r\n   * @member {IStyle|null|undefined} style\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.style = null\r\n\r\n  /**\r\n   * Project layout.\r\n   * @member {ILayout|null|undefined} layout\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.layout = null\r\n\r\n  /**\r\n   * Project globalAdjustMetric.\r\n   * @member {IMetric|null|undefined} globalAdjustMetric\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.globalAdjustMetric = null\r\n\r\n  /**\r\n   * Project ui.\r\n   * @member {IUi|null|undefined} ui\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.ui = null\r\n\r\n  /**\r\n   * Creates a new Project instance using the specified properties.\r\n   * @function create\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject=} [properties] Properties to set\r\n   * @returns {Project} Project instance\r\n   */\r\n  Project.create = function create(properties) {\r\n    return new Project(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\r\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\r\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\r\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\r\n      for (\r\n        let keys = Object.keys(message.glyphs), i = 0;\r\n        i < keys.length;\r\n        ++i\r\n      ) {\r\n        writer\r\n          .uint32(/* id 4, wireType 2 =*/ 34)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n        $root.GlyphFont.encode(\r\n          message.glyphs[keys[i]],\r\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n        )\r\n          .ldelim()\r\n          .ldelim()\r\n      }\r\n    if (message.glyphImages != null && message.glyphImages.length)\r\n      for (let i = 0; i < message.glyphImages.length; ++i)\r\n        $root.GlyphImage.encode(\r\n          message.glyphImages[i],\r\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\r\n        ).ldelim()\r\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\r\n      $root.Style.encode(\r\n        message.style,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\r\n      $root.Layout.encode(\r\n        message.layout,\r\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.globalAdjustMetric,\r\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\r\n      ).ldelim()\r\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\r\n      $root.Ui.encode(\r\n        message.ui,\r\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\r\n      ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Project(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int64()\r\n          break\r\n        case 2:\r\n          message.name = reader.string()\r\n          break\r\n        case 3:\r\n          message.text = reader.string()\r\n          break\r\n        case 4:\r\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = null\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = $root.GlyphFont.decode(reader, reader.uint32())\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.glyphs[key] = value\r\n          break\r\n        case 5:\r\n          if (!(message.glyphImages && message.glyphImages.length))\r\n            message.glyphImages = []\r\n          message.glyphImages.push(\r\n            $root.GlyphImage.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        case 6:\r\n          message.style = $root.Style.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.layout = $root.Layout.decode(reader, reader.uint32())\r\n          break\r\n        case 8:\r\n          message.globalAdjustMetric = $root.Metric.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 9:\r\n          message.ui = $root.Ui.decode(reader, reader.uint32())\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Project message.\r\n   * @function verify\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Project.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (\r\n        !$util.isInteger(message.id) &&\r\n        !(\r\n          message.id &&\r\n          $util.isInteger(message.id.low) &&\r\n          $util.isInteger(message.id.high)\r\n        )\r\n      )\r\n        return 'id: integer|Long expected'\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      if (!$util.isString(message.name)) return 'name: string expected'\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      if (!$util.isString(message.text)) return 'text: string expected'\r\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\r\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\r\n      let key = Object.keys(message.glyphs)\r\n      for (let i = 0; i < key.length; ++i) {\r\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\r\n        if (error) return 'glyphs.' + error\r\n      }\r\n    }\r\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\r\n      if (!Array.isArray(message.glyphImages))\r\n        return 'glyphImages: array expected'\r\n      for (let i = 0; i < message.glyphImages.length; ++i) {\r\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\r\n        if (error) return 'glyphImages.' + error\r\n      }\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style')) {\r\n      let error = $root.Style.verify(message.style)\r\n      if (error) return 'style.' + error\r\n    }\r\n    if (message.layout != null && message.hasOwnProperty('layout')) {\r\n      let error = $root.Layout.verify(message.layout)\r\n      if (error) return 'layout.' + error\r\n    }\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.globalAdjustMetric)\r\n      if (error) return 'globalAdjustMetric.' + error\r\n    }\r\n    if (message.ui != null && message.hasOwnProperty('ui')) {\r\n      let error = $root.Ui.verify(message.ui)\r\n      if (error) return 'ui.' + error\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Project} Project\r\n   */\r\n  Project.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Project) return object\r\n    let message = new $root.Project()\r\n    if (object.id != null)\r\n      if ($util.Long)\r\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\r\n      else if (typeof object.id === 'string')\r\n        message.id = parseInt(object.id, 10)\r\n      else if (typeof object.id === 'number') message.id = object.id\r\n      else if (typeof object.id === 'object')\r\n        message.id = new $util.LongBits(\r\n          object.id.low >>> 0,\r\n          object.id.high >>> 0,\r\n        ).toNumber()\r\n    if (object.name != null) message.name = String(object.name)\r\n    if (object.text != null) message.text = String(object.text)\r\n    if (object.glyphs) {\r\n      if (typeof object.glyphs !== 'object')\r\n        throw TypeError('.Project.glyphs: object expected')\r\n      message.glyphs = {}\r\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\r\n        if (typeof object.glyphs[keys[i]] !== 'object')\r\n          throw TypeError('.Project.glyphs: object expected')\r\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\r\n          object.glyphs[keys[i]],\r\n        )\r\n      }\r\n    }\r\n    if (object.glyphImages) {\r\n      if (!Array.isArray(object.glyphImages))\r\n        throw TypeError('.Project.glyphImages: array expected')\r\n      message.glyphImages = []\r\n      for (let i = 0; i < object.glyphImages.length; ++i) {\r\n        if (typeof object.glyphImages[i] !== 'object')\r\n          throw TypeError('.Project.glyphImages: object expected')\r\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\r\n          object.glyphImages[i],\r\n        )\r\n      }\r\n    }\r\n    if (object.style != null) {\r\n      if (typeof object.style !== 'object')\r\n        throw TypeError('.Project.style: object expected')\r\n      message.style = $root.Style.fromObject(object.style)\r\n    }\r\n    if (object.layout != null) {\r\n      if (typeof object.layout !== 'object')\r\n        throw TypeError('.Project.layout: object expected')\r\n      message.layout = $root.Layout.fromObject(object.layout)\r\n    }\r\n    if (object.globalAdjustMetric != null) {\r\n      if (typeof object.globalAdjustMetric !== 'object')\r\n        throw TypeError('.Project.globalAdjustMetric: object expected')\r\n      message.globalAdjustMetric = $root.Metric.fromObject(\r\n        object.globalAdjustMetric,\r\n      )\r\n    }\r\n    if (object.ui != null) {\r\n      if (typeof object.ui !== 'object')\r\n        throw TypeError('.Project.ui: object expected')\r\n      message.ui = $root.Ui.fromObject(object.ui)\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Project} message Project\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Project.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.glyphImages = []\r\n    if (options.objects || options.defaults) object.glyphs = {}\r\n    if (options.defaults) {\r\n      if ($util.Long) {\r\n        let long = new $util.Long(0, 0, false)\r\n        object.id =\r\n          options.longs === String\r\n            ? long.toString()\r\n            : options.longs === Number\r\n            ? long.toNumber()\r\n            : long\r\n      } else object.id = options.longs === String ? '0' : 0\r\n      object.name = ''\r\n      object.text = ''\r\n      object.style = null\r\n      object.layout = null\r\n      object.globalAdjustMetric = null\r\n      object.ui = null\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (typeof message.id === 'number')\r\n        object.id = options.longs === String ? String(message.id) : message.id\r\n      else\r\n        object.id =\r\n          options.longs === String\r\n            ? $util.Long.prototype.toString.call(message.id)\r\n            : options.longs === Number\r\n            ? new $util.LongBits(\r\n                message.id.low >>> 0,\r\n                message.id.high >>> 0,\r\n              ).toNumber()\r\n            : message.id\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      object.name = message.name\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      object.text = message.text\r\n    let keys2\r\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\r\n      object.glyphs = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\r\n          message.glyphs[keys2[j]],\r\n          options,\r\n        )\r\n    }\r\n    if (message.glyphImages && message.glyphImages.length) {\r\n      object.glyphImages = []\r\n      for (let j = 0; j < message.glyphImages.length; ++j)\r\n        object.glyphImages[j] = $root.GlyphImage.toObject(\r\n          message.glyphImages[j],\r\n          options,\r\n        )\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style'))\r\n      object.style = $root.Style.toObject(message.style, options)\r\n    if (message.layout != null && message.hasOwnProperty('layout'))\r\n      object.layout = $root.Layout.toObject(message.layout, options)\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    )\r\n      object.globalAdjustMetric = $root.Metric.toObject(\r\n        message.globalAdjustMetric,\r\n        options,\r\n      )\r\n    if (message.ui != null && message.hasOwnProperty('ui'))\r\n      object.ui = $root.Ui.toObject(message.ui, options)\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Project to JSON.\r\n   * @function toJSON\r\n   * @memberof Project\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Project.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Project\r\n})())\r\n\r\nexport { $root as default }\r\n","import { IProject } from './project'\r\nimport { IProject as IProjectNext, IGradientColor } from '../1.0.2'\r\n\r\nexport default function updateToNext(project: IProject): IProjectNext {\r\n  function fixOffset(list: IGradientColor[]) {\r\n    const len = list.length - 1\r\n    list.forEach((item, idx) => {\r\n      item.offset = (1 / len) * idx\r\n    })\r\n  }\r\n  if (\r\n    project?.style?.fill?.gradient?.palette &&\r\n    project.style.fill.gradient.palette.length > 0\r\n  ) {\r\n    fixOffset(project.style.fill.gradient.palette)\r\n  }\r\n\r\n  if (\r\n    project?.style?.stroke?.gradient?.palette &&\r\n    project.style.stroke.gradient.palette.length > 0\r\n  ) {\r\n    fixOffset(project.style.stroke.gradient.palette)\r\n  }\r\n\r\n  return project\r\n}\r\n","/* eslint-disable */\r\nimport * as $protobuf from 'protobufjs/minimal'\r\n\r\n// Common aliases\r\nconst $Reader = $protobuf.Reader,\r\n  $Writer = $protobuf.Writer,\r\n  $util = $protobuf.util\r\n\r\n// Exported root namespace\r\nconst $root = {}\r\n\r\nexport const Metric = ($root.Metric = (() => {\r\n  /**\r\n   * Properties of a Metric.\r\n   * @exports IMetric\r\n   * @interface IMetric\r\n   * @property {number|null} [xAdvance] Metric xAdvance\r\n   * @property {number|null} [xOffset] Metric xOffset\r\n   * @property {number|null} [yOffset] Metric yOffset\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Metric.\r\n   * @exports Metric\r\n   * @classdesc Represents a Metric.\r\n   * @implements IMetric\r\n   * @constructor\r\n   * @param {IMetric=} [properties] Properties to set\r\n   */\r\n  function Metric(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Metric xAdvance.\r\n   * @member {number} xAdvance\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xAdvance = 0\r\n\r\n  /**\r\n   * Metric xOffset.\r\n   * @member {number} xOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xOffset = 0\r\n\r\n  /**\r\n   * Metric yOffset.\r\n   * @member {number} yOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.yOffset = 0\r\n\r\n  /**\r\n   * Creates a new Metric instance using the specified properties.\r\n   * @function create\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric=} [properties] Properties to set\r\n   * @returns {Metric} Metric instance\r\n   */\r\n  Metric.create = function create(properties) {\r\n    return new Metric(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.xAdvance != null &&\r\n      Object.hasOwnProperty.call(message, 'xAdvance')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\r\n    if (\r\n      message.xOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'xOffset')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\r\n    if (\r\n      message.yOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'yOffset')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Metric()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.xAdvance = reader.sint32()\r\n          break\r\n        case 2:\r\n          message.xOffset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.yOffset = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Metric message.\r\n   * @function verify\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Metric.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      if (!$util.isInteger(message.xAdvance))\r\n        return 'xAdvance: integer expected'\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Metric} Metric\r\n   */\r\n  Metric.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Metric) return object\r\n    let message = new $root.Metric()\r\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\r\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\r\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Metric} message Metric\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Metric.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.xAdvance = 0\r\n      object.xOffset = 0\r\n      object.yOffset = 0\r\n    }\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      object.xAdvance = message.xAdvance\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      object.xOffset = message.xOffset\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      object.yOffset = message.yOffset\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Metric to JSON.\r\n   * @function toJSON\r\n   * @memberof Metric\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Metric.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Metric\r\n})())\r\n\r\nexport const GradientColor = ($root.GradientColor = (() => {\r\n  /**\r\n   * Properties of a GradientColor.\r\n   * @exports IGradientColor\r\n   * @interface IGradientColor\r\n   * @property {number|null} [id] GradientColor id\r\n   * @property {number|null} [offset] GradientColor offset\r\n   * @property {string|null} [color] GradientColor color\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GradientColor.\r\n   * @exports GradientColor\r\n   * @classdesc Represents a GradientColor.\r\n   * @implements IGradientColor\r\n   * @constructor\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   */\r\n  function GradientColor(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GradientColor id.\r\n   * @member {number} id\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.id = 0\r\n\r\n  /**\r\n   * GradientColor offset.\r\n   * @member {number} offset\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.offset = 0\r\n\r\n  /**\r\n   * GradientColor color.\r\n   * @member {string} color\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.color = ''\r\n\r\n  /**\r\n   * Creates a new GradientColor instance using the specified properties.\r\n   * @function create\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   * @returns {GradientColor} GradientColor instance\r\n   */\r\n  GradientColor.create = function create(properties) {\r\n    return new GradientColor(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\r\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.offset)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GradientColor()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int32()\r\n          break\r\n        case 2:\r\n          message.offset = reader.float()\r\n          break\r\n        case 3:\r\n          message.color = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GradientColor message.\r\n   * @function verify\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GradientColor.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      if (typeof message.offset !== 'number') return 'offset: number expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GradientColor} GradientColor\r\n   */\r\n  GradientColor.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GradientColor) return object\r\n    let message = new $root.GradientColor()\r\n    if (object.id != null) message.id = object.id | 0\r\n    if (object.offset != null) message.offset = Number(object.offset)\r\n    if (object.color != null) message.color = String(object.color)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {GradientColor} message GradientColor\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GradientColor.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.id = 0\r\n      object.offset = 0\r\n      object.color = ''\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      object.id = message.id\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      object.offset =\r\n        options.json && !isFinite(message.offset)\r\n          ? String(message.offset)\r\n          : message.offset\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GradientColor to JSON.\r\n   * @function toJSON\r\n   * @memberof GradientColor\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GradientColor.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GradientColor\r\n})())\r\n\r\nexport const Gradient = ($root.Gradient = (() => {\r\n  /**\r\n   * Properties of a Gradient.\r\n   * @exports IGradient\r\n   * @interface IGradient\r\n   * @property {number|null} [type] Gradient type\r\n   * @property {number|null} [angle] Gradient angle\r\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Gradient.\r\n   * @exports Gradient\r\n   * @classdesc Represents a Gradient.\r\n   * @implements IGradient\r\n   * @constructor\r\n   * @param {IGradient=} [properties] Properties to set\r\n   */\r\n  function Gradient(properties) {\r\n    this.palette = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Gradient type.\r\n   * @member {number} type\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.type = 0\r\n\r\n  /**\r\n   * Gradient angle.\r\n   * @member {number} angle\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.angle = 0\r\n\r\n  /**\r\n   * Gradient palette.\r\n   * @member {Array.<IGradientColor>} palette\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.palette = $util.emptyArray\r\n\r\n  /**\r\n   * Creates a new Gradient instance using the specified properties.\r\n   * @function create\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient=} [properties] Properties to set\r\n   * @returns {Gradient} Gradient instance\r\n   */\r\n  Gradient.create = function create(properties) {\r\n    return new Gradient(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\r\n    if (message.palette != null && message.palette.length)\r\n      for (let i = 0; i < message.palette.length; ++i)\r\n        $root.GradientColor.encode(\r\n          message.palette[i],\r\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n        ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Gradient()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.angle = reader.float()\r\n          break\r\n        case 3:\r\n          if (!(message.palette && message.palette.length)) message.palette = []\r\n          message.palette.push(\r\n            $root.GradientColor.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Gradient message.\r\n   * @function verify\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Gradient.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      if (typeof message.angle !== 'number') return 'angle: number expected'\r\n    if (message.palette != null && message.hasOwnProperty('palette')) {\r\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\r\n      for (let i = 0; i < message.palette.length; ++i) {\r\n        let error = $root.GradientColor.verify(message.palette[i])\r\n        if (error) return 'palette.' + error\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Gradient} Gradient\r\n   */\r\n  Gradient.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Gradient) return object\r\n    let message = new $root.Gradient()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.angle != null) message.angle = Number(object.angle)\r\n    if (object.palette) {\r\n      if (!Array.isArray(object.palette))\r\n        throw TypeError('.Gradient.palette: array expected')\r\n      message.palette = []\r\n      for (let i = 0; i < object.palette.length; ++i) {\r\n        if (typeof object.palette[i] !== 'object')\r\n          throw TypeError('.Gradient.palette: object expected')\r\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Gradient} message Gradient\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Gradient.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.palette = []\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.angle = 0\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      object.angle =\r\n        options.json && !isFinite(message.angle)\r\n          ? String(message.angle)\r\n          : message.angle\r\n    if (message.palette && message.palette.length) {\r\n      object.palette = []\r\n      for (let j = 0; j < message.palette.length; ++j)\r\n        object.palette[j] = $root.GradientColor.toObject(\r\n          message.palette[j],\r\n          options,\r\n        )\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Gradient to JSON.\r\n   * @function toJSON\r\n   * @memberof Gradient\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Gradient.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Gradient\r\n})())\r\n\r\nexport const PatternTexture = ($root.PatternTexture = (() => {\r\n  /**\r\n   * Properties of a PatternTexture.\r\n   * @exports IPatternTexture\r\n   * @interface IPatternTexture\r\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\r\n   * @property {number|null} [scale] PatternTexture scale\r\n   * @property {string|null} [repetition] PatternTexture repetition\r\n   */\r\n\r\n  /**\r\n   * Constructs a new PatternTexture.\r\n   * @exports PatternTexture\r\n   * @classdesc Represents a PatternTexture.\r\n   * @implements IPatternTexture\r\n   * @constructor\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   */\r\n  function PatternTexture(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * PatternTexture buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * PatternTexture scale.\r\n   * @member {number} scale\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.scale = 0\r\n\r\n  /**\r\n   * PatternTexture repetition.\r\n   * @member {string} repetition\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.repetition = ''\r\n\r\n  /**\r\n   * Creates a new PatternTexture instance using the specified properties.\r\n   * @function create\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   * @returns {PatternTexture} PatternTexture instance\r\n   */\r\n  PatternTexture.create = function create(properties) {\r\n    return new PatternTexture(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\r\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\r\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\r\n    if (\r\n      message.repetition != null &&\r\n      Object.hasOwnProperty.call(message, 'repetition')\r\n    )\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.PatternTexture()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.scale = reader.double()\r\n          break\r\n        case 3:\r\n          message.repetition = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a PatternTexture message.\r\n   * @function verify\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  PatternTexture.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      if (typeof message.scale !== 'number') return 'scale: number expected'\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      if (!$util.isString(message.repetition))\r\n        return 'repetition: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {PatternTexture} PatternTexture\r\n   */\r\n  PatternTexture.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.PatternTexture) return object\r\n    let message = new $root.PatternTexture()\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.scale != null) message.scale = Number(object.scale)\r\n    if (object.repetition != null)\r\n      message.repetition = String(object.repetition)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {PatternTexture} message PatternTexture\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  PatternTexture.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.scale = 0\r\n      object.repetition = ''\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      object.scale =\r\n        options.json && !isFinite(message.scale)\r\n          ? String(message.scale)\r\n          : message.scale\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      object.repetition = message.repetition\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this PatternTexture to JSON.\r\n   * @function toJSON\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  PatternTexture.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return PatternTexture\r\n})())\r\n\r\nexport const Fill = ($root.Fill = (() => {\r\n  /**\r\n   * Properties of a Fill.\r\n   * @exports IFill\r\n   * @interface IFill\r\n   * @property {number|null} [type] Fill type\r\n   * @property {string|null} [color] Fill color\r\n   * @property {IGradient|null} [gradient] Fill gradient\r\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\r\n   * @property {number|null} [width] Fill width\r\n   * @property {string|null} [lineCap] Fill lineCap\r\n   * @property {string|null} [lineJoin] Fill lineJoin\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Fill.\r\n   * @exports Fill\r\n   * @classdesc Represents a Fill.\r\n   * @implements IFill\r\n   * @constructor\r\n   * @param {IFill=} [properties] Properties to set\r\n   */\r\n  function Fill(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Fill type.\r\n   * @member {number} type\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.type = 0\r\n\r\n  /**\r\n   * Fill color.\r\n   * @member {string} color\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.color = ''\r\n\r\n  /**\r\n   * Fill gradient.\r\n   * @member {IGradient|null|undefined} gradient\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.gradient = null\r\n\r\n  /**\r\n   * Fill patternTexture.\r\n   * @member {IPatternTexture|null|undefined} patternTexture\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.patternTexture = null\r\n\r\n  /**\r\n   * Fill width.\r\n   * @member {number} width\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.width = 0\r\n\r\n  /**\r\n   * Fill lineCap.\r\n   * @member {string} lineCap\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineCap = ''\r\n\r\n  /**\r\n   * Fill lineJoin.\r\n   * @member {string} lineJoin\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineJoin = ''\r\n\r\n  /**\r\n   * Creates a new Fill instance using the specified properties.\r\n   * @function create\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill=} [properties] Properties to set\r\n   * @returns {Fill} Fill instance\r\n   */\r\n  Fill.create = function create(properties) {\r\n    return new Fill(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\r\n    if (\r\n      message.gradient != null &&\r\n      Object.hasOwnProperty.call(message, 'gradient')\r\n    )\r\n      $root.Gradient.encode(\r\n        message.gradient,\r\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.patternTexture != null &&\r\n      Object.hasOwnProperty.call(message, 'patternTexture')\r\n    )\r\n      $root.PatternTexture.encode(\r\n        message.patternTexture,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\r\n    if (\r\n      message.lineCap != null &&\r\n      Object.hasOwnProperty.call(message, 'lineCap')\r\n    )\r\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\r\n    if (\r\n      message.lineJoin != null &&\r\n      Object.hasOwnProperty.call(message, 'lineJoin')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Fill()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.color = reader.string()\r\n          break\r\n        case 3:\r\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\r\n          break\r\n        case 4:\r\n          message.patternTexture = $root.PatternTexture.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 5:\r\n          message.width = reader.int32()\r\n          break\r\n        case 6:\r\n          message.lineCap = reader.string()\r\n          break\r\n        case 7:\r\n          message.lineJoin = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Fill message.\r\n   * @function verify\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Fill.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\r\n      let error = $root.Gradient.verify(message.gradient)\r\n      if (error) return 'gradient.' + error\r\n    }\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    ) {\r\n      let error = $root.PatternTexture.verify(message.patternTexture)\r\n      if (error) return 'patternTexture.' + error\r\n    }\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Fill} Fill\r\n   */\r\n  Fill.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Fill) return object\r\n    let message = new $root.Fill()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.gradient != null) {\r\n      if (typeof object.gradient !== 'object')\r\n        throw TypeError('.Fill.gradient: object expected')\r\n      message.gradient = $root.Gradient.fromObject(object.gradient)\r\n    }\r\n    if (object.patternTexture != null) {\r\n      if (typeof object.patternTexture !== 'object')\r\n        throw TypeError('.Fill.patternTexture: object expected')\r\n      message.patternTexture = $root.PatternTexture.fromObject(\r\n        object.patternTexture,\r\n      )\r\n    }\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\r\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Fill} message Fill\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Fill.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.color = ''\r\n      object.gradient = null\r\n      object.patternTexture = null\r\n      object.width = 0\r\n      object.lineCap = ''\r\n      object.lineJoin = ''\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\r\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    )\r\n      object.patternTexture = $root.PatternTexture.toObject(\r\n        message.patternTexture,\r\n        options,\r\n      )\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      object.lineCap = message.lineCap\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      object.lineJoin = message.lineJoin\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Fill to JSON.\r\n   * @function toJSON\r\n   * @memberof Fill\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Fill.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Fill\r\n})())\r\n\r\nexport const Font = ($root.Font = (() => {\r\n  /**\r\n   * Properties of a Font.\r\n   * @exports IFont\r\n   * @interface IFont\r\n   * @property {Uint8Array|null} [font] Font font\r\n   * @property {string|null} [family] Font family\r\n   * @property {number|null} [size] Font size\r\n   * @property {number|null} [lineHeight] Font lineHeight\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Font.\r\n   * @exports Font\r\n   * @classdesc Represents a Font.\r\n   * @implements IFont\r\n   * @constructor\r\n   * @param {IFont=} [properties] Properties to set\r\n   */\r\n  function Font(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Font font.\r\n   * @member {Uint8Array} font\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.font = $util.newBuffer([])\r\n\r\n  /**\r\n   * Font family.\r\n   * @member {string} family\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.family = ''\r\n\r\n  /**\r\n   * Font size.\r\n   * @member {number} size\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.size = 0\r\n\r\n  /**\r\n   * Font lineHeight.\r\n   * @member {number} lineHeight\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.lineHeight = 0\r\n\r\n  /**\r\n   * Creates a new Font instance using the specified properties.\r\n   * @function create\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont=} [properties] Properties to set\r\n   * @returns {Font} Font instance\r\n   */\r\n  Font.create = function create(properties) {\r\n    return new Font(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\r\n    if (message.family != null && Object.hasOwnProperty.call(message, 'family'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.family)\r\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.size)\r\n    if (\r\n      message.lineHeight != null &&\r\n      Object.hasOwnProperty.call(message, 'lineHeight')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.lineHeight)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Font()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.family = reader.string()\r\n          break\r\n        case 3:\r\n          message.size = reader.int32()\r\n          break\r\n        case 4:\r\n          message.lineHeight = reader.int32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Font message.\r\n   * @function verify\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Font.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      if (\r\n        !(\r\n          (message.font && typeof message.font.length === 'number') ||\r\n          $util.isString(message.font)\r\n        )\r\n      )\r\n        return 'font: buffer expected'\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      if (!$util.isString(message.family)) return 'family: string expected'\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      if (!$util.isInteger(message.lineHeight))\r\n        return 'lineHeight: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Font} Font\r\n   */\r\n  Font.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Font) return object\r\n    let message = new $root.Font()\r\n    if (object.font != null)\r\n      if (typeof object.font === 'string')\r\n        $util.base64.decode(\r\n          object.font,\r\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\r\n          0,\r\n        )\r\n      else if (object.font.length) message.font = object.font\r\n    if (object.family != null) message.family = String(object.family)\r\n    if (object.size != null) message.size = object.size | 0\r\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Font} message Font\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Font.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.font = ''\r\n      else {\r\n        object.font = []\r\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\r\n      }\r\n      object.family = ''\r\n      object.size = 0\r\n      object.lineHeight = 0\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.font, 0, message.font.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.font)\r\n          : message.font\r\n    if (message.family != null && message.hasOwnProperty('family'))\r\n      object.family = message.family\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      object.size = message.size\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      object.lineHeight = message.lineHeight\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Font to JSON.\r\n   * @function toJSON\r\n   * @memberof Font\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Font.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Font\r\n})())\r\n\r\nexport const GlyphFont = ($root.GlyphFont = (() => {\r\n  /**\r\n   * Properties of a GlyphFont.\r\n   * @exports IGlyphFont\r\n   * @interface IGlyphFont\r\n   * @property {string|null} [letter] GlyphFont letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\r\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphFont.\r\n   * @exports GlyphFont\r\n   * @classdesc Represents a GlyphFont.\r\n   * @implements IGlyphFont\r\n   * @constructor\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   */\r\n  function GlyphFont(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphFont letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphFont adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphFont kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphFont instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   * @returns {GlyphFont} GlyphFont instance\r\n   */\r\n  GlyphFont.create = function create(properties) {\r\n    return new GlyphFont(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 3, wireType 2 =*/ 26)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphFont(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphFont message.\r\n   * @function verify\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphFont.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphFont} GlyphFont\r\n   */\r\n  GlyphFont.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphFont) return object\r\n    let message = new $root.GlyphFont()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphFont.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {GlyphFont} message GlyphFont\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphFont.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphFont to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphFont.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphFont\r\n})())\r\n\r\nexport const GlyphImage = ($root.GlyphImage = (() => {\r\n  /**\r\n   * Properties of a GlyphImage.\r\n   * @exports IGlyphImage\r\n   * @interface IGlyphImage\r\n   * @property {string|null} [letter] GlyphImage letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\r\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\r\n   * @property {string|null} [fileName] GlyphImage fileName\r\n   * @property {string|null} [fileType] GlyphImage fileType\r\n   * @property {boolean|null} [selected] GlyphImage selected\r\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphImage.\r\n   * @exports GlyphImage\r\n   * @classdesc Represents a GlyphImage.\r\n   * @implements IGlyphImage\r\n   * @constructor\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   */\r\n  function GlyphImage(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphImage letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphImage adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphImage buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * GlyphImage fileName.\r\n   * @member {string} fileName\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileName = ''\r\n\r\n  /**\r\n   * GlyphImage fileType.\r\n   * @member {string} fileType\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileType = ''\r\n\r\n  /**\r\n   * GlyphImage selected.\r\n   * @member {boolean} selected\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.selected = false\r\n\r\n  /**\r\n   * GlyphImage kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphImage instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   * @returns {GlyphImage} GlyphImage instance\r\n   */\r\n  GlyphImage.create = function create(properties) {\r\n    return new GlyphImage(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\r\n    if (\r\n      message.fileName != null &&\r\n      Object.hasOwnProperty.call(message, 'fileName')\r\n    )\r\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\r\n    if (\r\n      message.fileType != null &&\r\n      Object.hasOwnProperty.call(message, 'fileType')\r\n    )\r\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\r\n    if (\r\n      message.selected != null &&\r\n      Object.hasOwnProperty.call(message, 'selected')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 7, wireType 2 =*/ 58)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphImage(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 4:\r\n          message.fileName = reader.string()\r\n          break\r\n        case 5:\r\n          message.fileType = reader.string()\r\n          break\r\n        case 6:\r\n          message.selected = reader.bool()\r\n          break\r\n        case 7:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphImage message.\r\n   * @function verify\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphImage.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      if (typeof message.selected !== 'boolean')\r\n        return 'selected: boolean expected'\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphImage} GlyphImage\r\n   */\r\n  GlyphImage.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphImage) return object\r\n    let message = new $root.GlyphImage()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.fileName != null) message.fileName = String(object.fileName)\r\n    if (object.fileType != null) message.fileType = String(object.fileType)\r\n    if (object.selected != null) message.selected = Boolean(object.selected)\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphImage.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {GlyphImage} message GlyphImage\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphImage.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.fileName = ''\r\n      object.fileType = ''\r\n      object.selected = false\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      object.fileName = message.fileName\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      object.fileType = message.fileType\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      object.selected = message.selected\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphImage to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphImage.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphImage\r\n})())\r\n\r\nexport const Layout = ($root.Layout = (() => {\r\n  /**\r\n   * Properties of a Layout.\r\n   * @exports ILayout\r\n   * @interface ILayout\r\n   * @property {number|null} [padding] Layout padding\r\n   * @property {number|null} [spacing] Layout spacing\r\n   * @property {number|null} [width] Layout width\r\n   * @property {number|null} [height] Layout height\r\n   * @property {boolean|null} [auto] Layout auto\r\n   * @property {boolean|null} [fixedSize] Layout fixedSize\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Layout.\r\n   * @exports Layout\r\n   * @classdesc Represents a Layout.\r\n   * @implements ILayout\r\n   * @constructor\r\n   * @param {ILayout=} [properties] Properties to set\r\n   */\r\n  function Layout(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Layout padding.\r\n   * @member {number} padding\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.padding = 0\r\n\r\n  /**\r\n   * Layout spacing.\r\n   * @member {number} spacing\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.spacing = 0\r\n\r\n  /**\r\n   * Layout width.\r\n   * @member {number} width\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.width = 0\r\n\r\n  /**\r\n   * Layout height.\r\n   * @member {number} height\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.height = 0\r\n\r\n  /**\r\n   * Layout auto.\r\n   * @member {boolean} auto\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.auto = false\r\n\r\n  /**\r\n   * Layout fixedSize.\r\n   * @member {boolean} fixedSize\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.fixedSize = false\r\n\r\n  /**\r\n   * Creates a new Layout instance using the specified properties.\r\n   * @function create\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout=} [properties] Properties to set\r\n   * @returns {Layout} Layout instance\r\n   */\r\n  Layout.create = function create(properties) {\r\n    return new Layout(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.padding != null &&\r\n      Object.hasOwnProperty.call(message, 'padding')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\r\n    if (\r\n      message.spacing != null &&\r\n      Object.hasOwnProperty.call(message, 'spacing')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\r\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\r\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\r\n    if (\r\n      message.fixedSize != null &&\r\n      Object.hasOwnProperty.call(message, 'fixedSize')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Layout()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.padding = reader.int32()\r\n          break\r\n        case 2:\r\n          message.spacing = reader.int32()\r\n          break\r\n        case 3:\r\n          message.width = reader.int32()\r\n          break\r\n        case 4:\r\n          message.height = reader.int32()\r\n          break\r\n        case 5:\r\n          message.auto = reader.bool()\r\n          break\r\n        case 6:\r\n          message.fixedSize = reader.bool()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Layout message.\r\n   * @function verify\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Layout.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      if (typeof message.fixedSize !== 'boolean')\r\n        return 'fixedSize: boolean expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Layout} Layout\r\n   */\r\n  Layout.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Layout) return object\r\n    let message = new $root.Layout()\r\n    if (object.padding != null) message.padding = object.padding | 0\r\n    if (object.spacing != null) message.spacing = object.spacing | 0\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.height != null) message.height = object.height | 0\r\n    if (object.auto != null) message.auto = Boolean(object.auto)\r\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Layout} message Layout\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Layout.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.padding = 0\r\n      object.spacing = 0\r\n      object.width = 0\r\n      object.height = 0\r\n      object.auto = false\r\n      object.fixedSize = false\r\n    }\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      object.padding = message.padding\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      object.spacing = message.spacing\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      object.height = message.height\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      object.auto = message.auto\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      object.fixedSize = message.fixedSize\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Layout to JSON.\r\n   * @function toJSON\r\n   * @memberof Layout\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Layout.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Layout\r\n})())\r\n\r\nexport const Shadow = ($root.Shadow = (() => {\r\n  /**\r\n   * Properties of a Shadow.\r\n   * @exports IShadow\r\n   * @interface IShadow\r\n   * @property {string|null} [color] Shadow color\r\n   * @property {number|null} [blur] Shadow blur\r\n   * @property {number|null} [offsetX] Shadow offsetX\r\n   * @property {number|null} [offsetY] Shadow offsetY\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Shadow.\r\n   * @exports Shadow\r\n   * @classdesc Represents a Shadow.\r\n   * @implements IShadow\r\n   * @constructor\r\n   * @param {IShadow=} [properties] Properties to set\r\n   */\r\n  function Shadow(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Shadow color.\r\n   * @member {string} color\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.color = ''\r\n\r\n  /**\r\n   * Shadow blur.\r\n   * @member {number} blur\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.blur = 0\r\n\r\n  /**\r\n   * Shadow offsetX.\r\n   * @member {number} offsetX\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetX = 0\r\n\r\n  /**\r\n   * Shadow offsetY.\r\n   * @member {number} offsetY\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetY = 0\r\n\r\n  /**\r\n   * Creates a new Shadow instance using the specified properties.\r\n   * @function create\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow=} [properties] Properties to set\r\n   * @returns {Shadow} Shadow instance\r\n   */\r\n  Shadow.create = function create(properties) {\r\n    return new Shadow(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\r\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\r\n    if (\r\n      message.offsetX != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetX')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\r\n    if (\r\n      message.offsetY != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetY')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Shadow()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.color = reader.string()\r\n          break\r\n        case 2:\r\n          message.blur = reader.int32()\r\n          break\r\n        case 3:\r\n          message.offsetX = reader.sint32()\r\n          break\r\n        case 4:\r\n          message.offsetY = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Shadow message.\r\n   * @function verify\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Shadow.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Shadow} Shadow\r\n   */\r\n  Shadow.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Shadow) return object\r\n    let message = new $root.Shadow()\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.blur != null) message.blur = object.blur | 0\r\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\r\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Shadow} message Shadow\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Shadow.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.color = ''\r\n      object.blur = 0\r\n      object.offsetX = 0\r\n      object.offsetY = 0\r\n    }\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      object.blur = message.blur\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      object.offsetX = message.offsetX\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      object.offsetY = message.offsetY\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Shadow to JSON.\r\n   * @function toJSON\r\n   * @memberof Shadow\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Shadow.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Shadow\r\n})())\r\n\r\nexport const Style = ($root.Style = (() => {\r\n  /**\r\n   * Properties of a Style.\r\n   * @exports IStyle\r\n   * @interface IStyle\r\n   * @property {IFont|null} [font] Style font\r\n   * @property {IFill|null} [fill] Style fill\r\n   * @property {boolean|null} [useStroke] Style useStroke\r\n   * @property {IFill|null} [stroke] Style stroke\r\n   * @property {boolean|null} [useShadow] Style useShadow\r\n   * @property {IShadow|null} [shadow] Style shadow\r\n   * @property {string|null} [bgColor] Style bgColor\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Style.\r\n   * @exports Style\r\n   * @classdesc Represents a Style.\r\n   * @implements IStyle\r\n   * @constructor\r\n   * @param {IStyle=} [properties] Properties to set\r\n   */\r\n  function Style(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Style font.\r\n   * @member {IFont|null|undefined} font\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.font = null\r\n\r\n  /**\r\n   * Style fill.\r\n   * @member {IFill|null|undefined} fill\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.fill = null\r\n\r\n  /**\r\n   * Style useStroke.\r\n   * @member {boolean} useStroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useStroke = false\r\n\r\n  /**\r\n   * Style stroke.\r\n   * @member {IFill|null|undefined} stroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.stroke = null\r\n\r\n  /**\r\n   * Style useShadow.\r\n   * @member {boolean} useShadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useShadow = false\r\n\r\n  /**\r\n   * Style shadow.\r\n   * @member {IShadow|null|undefined} shadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.shadow = null\r\n\r\n  /**\r\n   * Style bgColor.\r\n   * @member {string} bgColor\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.bgColor = ''\r\n\r\n  /**\r\n   * Creates a new Style instance using the specified properties.\r\n   * @function create\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle=} [properties] Properties to set\r\n   * @returns {Style} Style instance\r\n   */\r\n  Style.create = function create(properties) {\r\n    return new Style(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      $root.Font.encode(\r\n        message.font,\r\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\r\n      ).ldelim()\r\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\r\n      $root.Fill.encode(\r\n        message.fill,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useStroke != null &&\r\n      Object.hasOwnProperty.call(message, 'useStroke')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\r\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\r\n      $root.Fill.encode(\r\n        message.stroke,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useShadow != null &&\r\n      Object.hasOwnProperty.call(message, 'useShadow')\r\n    )\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\r\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\r\n      $root.Shadow.encode(\r\n        message.shadow,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.bgColor != null &&\r\n      Object.hasOwnProperty.call(message, 'bgColor')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Style()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = $root.Font.decode(reader, reader.uint32())\r\n          break\r\n        case 2:\r\n          message.fill = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.useStroke = reader.bool()\r\n          break\r\n        case 4:\r\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 5:\r\n          message.useShadow = reader.bool()\r\n          break\r\n        case 6:\r\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.bgColor = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Style message.\r\n   * @function verify\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Style.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font')) {\r\n      let error = $root.Font.verify(message.font)\r\n      if (error) return 'font.' + error\r\n    }\r\n    if (message.fill != null && message.hasOwnProperty('fill')) {\r\n      let error = $root.Fill.verify(message.fill)\r\n      if (error) return 'fill.' + error\r\n    }\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      if (typeof message.useStroke !== 'boolean')\r\n        return 'useStroke: boolean expected'\r\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\r\n      let error = $root.Fill.verify(message.stroke)\r\n      if (error) return 'stroke.' + error\r\n    }\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      if (typeof message.useShadow !== 'boolean')\r\n        return 'useShadow: boolean expected'\r\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\r\n      let error = $root.Shadow.verify(message.shadow)\r\n      if (error) return 'shadow.' + error\r\n    }\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Style} Style\r\n   */\r\n  Style.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Style) return object\r\n    let message = new $root.Style()\r\n    if (object.font != null) {\r\n      if (typeof object.font !== 'object')\r\n        throw TypeError('.Style.font: object expected')\r\n      message.font = $root.Font.fromObject(object.font)\r\n    }\r\n    if (object.fill != null) {\r\n      if (typeof object.fill !== 'object')\r\n        throw TypeError('.Style.fill: object expected')\r\n      message.fill = $root.Fill.fromObject(object.fill)\r\n    }\r\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\r\n    if (object.stroke != null) {\r\n      if (typeof object.stroke !== 'object')\r\n        throw TypeError('.Style.stroke: object expected')\r\n      message.stroke = $root.Fill.fromObject(object.stroke)\r\n    }\r\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\r\n    if (object.shadow != null) {\r\n      if (typeof object.shadow !== 'object')\r\n        throw TypeError('.Style.shadow: object expected')\r\n      message.shadow = $root.Shadow.fromObject(object.shadow)\r\n    }\r\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Style} message Style\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Style.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.font = null\r\n      object.fill = null\r\n      object.useStroke = false\r\n      object.stroke = null\r\n      object.useShadow = false\r\n      object.shadow = null\r\n      object.bgColor = ''\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font = $root.Font.toObject(message.font, options)\r\n    if (message.fill != null && message.hasOwnProperty('fill'))\r\n      object.fill = $root.Fill.toObject(message.fill, options)\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      object.useStroke = message.useStroke\r\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\r\n      object.stroke = $root.Fill.toObject(message.stroke, options)\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      object.useShadow = message.useShadow\r\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\r\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      object.bgColor = message.bgColor\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Style to JSON.\r\n   * @function toJSON\r\n   * @memberof Style\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Style.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Style\r\n})())\r\n\r\nexport const Ui = ($root.Ui = (() => {\r\n  /**\r\n   * Properties of an Ui.\r\n   * @exports IUi\r\n   * @interface IUi\r\n   * @property {string|null} [previewText] Ui previewText\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Ui.\r\n   * @exports Ui\r\n   * @classdesc Represents an Ui.\r\n   * @implements IUi\r\n   * @constructor\r\n   * @param {IUi=} [properties] Properties to set\r\n   */\r\n  function Ui(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Ui previewText.\r\n   * @member {string} previewText\r\n   * @memberof Ui\r\n   * @instance\r\n   */\r\n  Ui.prototype.previewText = ''\r\n\r\n  /**\r\n   * Creates a new Ui instance using the specified properties.\r\n   * @function create\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi=} [properties] Properties to set\r\n   * @returns {Ui} Ui instance\r\n   */\r\n  Ui.create = function create(properties) {\r\n    return new Ui(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.previewText != null &&\r\n      Object.hasOwnProperty.call(message, 'previewText')\r\n    )\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Ui()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.previewText = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies an Ui message.\r\n   * @function verify\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Ui.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      if (!$util.isString(message.previewText))\r\n        return 'previewText: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Ui} Ui\r\n   */\r\n  Ui.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Ui) return object\r\n    let message = new $root.Ui()\r\n    if (object.previewText != null)\r\n      message.previewText = String(object.previewText)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Ui} message Ui\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Ui.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) object.previewText = ''\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      object.previewText = message.previewText\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Ui to JSON.\r\n   * @function toJSON\r\n   * @memberof Ui\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Ui.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Ui\r\n})())\r\n\r\nexport const Project = ($root.Project = (() => {\r\n  /**\r\n   * Properties of a Project.\r\n   * @exports IProject\r\n   * @interface IProject\r\n   * @property {number|Long|null} [id] Project id\r\n   * @property {string|null} [name] Project name\r\n   * @property {string|null} [text] Project text\r\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\r\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\r\n   * @property {IStyle|null} [style] Project style\r\n   * @property {ILayout|null} [layout] Project layout\r\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\r\n   * @property {IUi|null} [ui] Project ui\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Project.\r\n   * @exports Project\r\n   * @classdesc Represents a Project.\r\n   * @implements IProject\r\n   * @constructor\r\n   * @param {IProject=} [properties] Properties to set\r\n   */\r\n  function Project(properties) {\r\n    this.glyphs = {}\r\n    this.glyphImages = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Project id.\r\n   * @member {number|Long} id\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\r\n\r\n  /**\r\n   * Project name.\r\n   * @member {string} name\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.name = ''\r\n\r\n  /**\r\n   * Project text.\r\n   * @member {string} text\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.text = ''\r\n\r\n  /**\r\n   * Project glyphs.\r\n   * @member {Object.<string,IGlyphFont>} glyphs\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphs = $util.emptyObject\r\n\r\n  /**\r\n   * Project glyphImages.\r\n   * @member {Array.<IGlyphImage>} glyphImages\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphImages = $util.emptyArray\r\n\r\n  /**\r\n   * Project style.\r\n   * @member {IStyle|null|undefined} style\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.style = null\r\n\r\n  /**\r\n   * Project layout.\r\n   * @member {ILayout|null|undefined} layout\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.layout = null\r\n\r\n  /**\r\n   * Project globalAdjustMetric.\r\n   * @member {IMetric|null|undefined} globalAdjustMetric\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.globalAdjustMetric = null\r\n\r\n  /**\r\n   * Project ui.\r\n   * @member {IUi|null|undefined} ui\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.ui = null\r\n\r\n  /**\r\n   * Creates a new Project instance using the specified properties.\r\n   * @function create\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject=} [properties] Properties to set\r\n   * @returns {Project} Project instance\r\n   */\r\n  Project.create = function create(properties) {\r\n    return new Project(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\r\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\r\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\r\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\r\n      for (\r\n        let keys = Object.keys(message.glyphs), i = 0;\r\n        i < keys.length;\r\n        ++i\r\n      ) {\r\n        writer\r\n          .uint32(/* id 4, wireType 2 =*/ 34)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n        $root.GlyphFont.encode(\r\n          message.glyphs[keys[i]],\r\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n        )\r\n          .ldelim()\r\n          .ldelim()\r\n      }\r\n    if (message.glyphImages != null && message.glyphImages.length)\r\n      for (let i = 0; i < message.glyphImages.length; ++i)\r\n        $root.GlyphImage.encode(\r\n          message.glyphImages[i],\r\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\r\n        ).ldelim()\r\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\r\n      $root.Style.encode(\r\n        message.style,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\r\n      $root.Layout.encode(\r\n        message.layout,\r\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.globalAdjustMetric,\r\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\r\n      ).ldelim()\r\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\r\n      $root.Ui.encode(\r\n        message.ui,\r\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\r\n      ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Project(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int64()\r\n          break\r\n        case 2:\r\n          message.name = reader.string()\r\n          break\r\n        case 3:\r\n          message.text = reader.string()\r\n          break\r\n        case 4:\r\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = null\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = $root.GlyphFont.decode(reader, reader.uint32())\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.glyphs[key] = value\r\n          break\r\n        case 5:\r\n          if (!(message.glyphImages && message.glyphImages.length))\r\n            message.glyphImages = []\r\n          message.glyphImages.push(\r\n            $root.GlyphImage.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        case 6:\r\n          message.style = $root.Style.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.layout = $root.Layout.decode(reader, reader.uint32())\r\n          break\r\n        case 8:\r\n          message.globalAdjustMetric = $root.Metric.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 9:\r\n          message.ui = $root.Ui.decode(reader, reader.uint32())\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Project message.\r\n   * @function verify\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Project.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (\r\n        !$util.isInteger(message.id) &&\r\n        !(\r\n          message.id &&\r\n          $util.isInteger(message.id.low) &&\r\n          $util.isInteger(message.id.high)\r\n        )\r\n      )\r\n        return 'id: integer|Long expected'\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      if (!$util.isString(message.name)) return 'name: string expected'\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      if (!$util.isString(message.text)) return 'text: string expected'\r\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\r\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\r\n      let key = Object.keys(message.glyphs)\r\n      for (let i = 0; i < key.length; ++i) {\r\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\r\n        if (error) return 'glyphs.' + error\r\n      }\r\n    }\r\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\r\n      if (!Array.isArray(message.glyphImages))\r\n        return 'glyphImages: array expected'\r\n      for (let i = 0; i < message.glyphImages.length; ++i) {\r\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\r\n        if (error) return 'glyphImages.' + error\r\n      }\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style')) {\r\n      let error = $root.Style.verify(message.style)\r\n      if (error) return 'style.' + error\r\n    }\r\n    if (message.layout != null && message.hasOwnProperty('layout')) {\r\n      let error = $root.Layout.verify(message.layout)\r\n      if (error) return 'layout.' + error\r\n    }\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.globalAdjustMetric)\r\n      if (error) return 'globalAdjustMetric.' + error\r\n    }\r\n    if (message.ui != null && message.hasOwnProperty('ui')) {\r\n      let error = $root.Ui.verify(message.ui)\r\n      if (error) return 'ui.' + error\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Project} Project\r\n   */\r\n  Project.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Project) return object\r\n    let message = new $root.Project()\r\n    if (object.id != null)\r\n      if ($util.Long)\r\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\r\n      else if (typeof object.id === 'string')\r\n        message.id = parseInt(object.id, 10)\r\n      else if (typeof object.id === 'number') message.id = object.id\r\n      else if (typeof object.id === 'object')\r\n        message.id = new $util.LongBits(\r\n          object.id.low >>> 0,\r\n          object.id.high >>> 0,\r\n        ).toNumber()\r\n    if (object.name != null) message.name = String(object.name)\r\n    if (object.text != null) message.text = String(object.text)\r\n    if (object.glyphs) {\r\n      if (typeof object.glyphs !== 'object')\r\n        throw TypeError('.Project.glyphs: object expected')\r\n      message.glyphs = {}\r\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\r\n        if (typeof object.glyphs[keys[i]] !== 'object')\r\n          throw TypeError('.Project.glyphs: object expected')\r\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\r\n          object.glyphs[keys[i]],\r\n        )\r\n      }\r\n    }\r\n    if (object.glyphImages) {\r\n      if (!Array.isArray(object.glyphImages))\r\n        throw TypeError('.Project.glyphImages: array expected')\r\n      message.glyphImages = []\r\n      for (let i = 0; i < object.glyphImages.length; ++i) {\r\n        if (typeof object.glyphImages[i] !== 'object')\r\n          throw TypeError('.Project.glyphImages: object expected')\r\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\r\n          object.glyphImages[i],\r\n        )\r\n      }\r\n    }\r\n    if (object.style != null) {\r\n      if (typeof object.style !== 'object')\r\n        throw TypeError('.Project.style: object expected')\r\n      message.style = $root.Style.fromObject(object.style)\r\n    }\r\n    if (object.layout != null) {\r\n      if (typeof object.layout !== 'object')\r\n        throw TypeError('.Project.layout: object expected')\r\n      message.layout = $root.Layout.fromObject(object.layout)\r\n    }\r\n    if (object.globalAdjustMetric != null) {\r\n      if (typeof object.globalAdjustMetric !== 'object')\r\n        throw TypeError('.Project.globalAdjustMetric: object expected')\r\n      message.globalAdjustMetric = $root.Metric.fromObject(\r\n        object.globalAdjustMetric,\r\n      )\r\n    }\r\n    if (object.ui != null) {\r\n      if (typeof object.ui !== 'object')\r\n        throw TypeError('.Project.ui: object expected')\r\n      message.ui = $root.Ui.fromObject(object.ui)\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Project} message Project\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Project.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.glyphImages = []\r\n    if (options.objects || options.defaults) object.glyphs = {}\r\n    if (options.defaults) {\r\n      if ($util.Long) {\r\n        let long = new $util.Long(0, 0, false)\r\n        object.id =\r\n          options.longs === String\r\n            ? long.toString()\r\n            : options.longs === Number\r\n            ? long.toNumber()\r\n            : long\r\n      } else object.id = options.longs === String ? '0' : 0\r\n      object.name = ''\r\n      object.text = ''\r\n      object.style = null\r\n      object.layout = null\r\n      object.globalAdjustMetric = null\r\n      object.ui = null\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (typeof message.id === 'number')\r\n        object.id = options.longs === String ? String(message.id) : message.id\r\n      else\r\n        object.id =\r\n          options.longs === String\r\n            ? $util.Long.prototype.toString.call(message.id)\r\n            : options.longs === Number\r\n            ? new $util.LongBits(\r\n                message.id.low >>> 0,\r\n                message.id.high >>> 0,\r\n              ).toNumber()\r\n            : message.id\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      object.name = message.name\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      object.text = message.text\r\n    let keys2\r\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\r\n      object.glyphs = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\r\n          message.glyphs[keys2[j]],\r\n          options,\r\n        )\r\n    }\r\n    if (message.glyphImages && message.glyphImages.length) {\r\n      object.glyphImages = []\r\n      for (let j = 0; j < message.glyphImages.length; ++j)\r\n        object.glyphImages[j] = $root.GlyphImage.toObject(\r\n          message.glyphImages[j],\r\n          options,\r\n        )\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style'))\r\n      object.style = $root.Style.toObject(message.style, options)\r\n    if (message.layout != null && message.hasOwnProperty('layout'))\r\n      object.layout = $root.Layout.toObject(message.layout, options)\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    )\r\n      object.globalAdjustMetric = $root.Metric.toObject(\r\n        message.globalAdjustMetric,\r\n        options,\r\n      )\r\n    if (message.ui != null && message.hasOwnProperty('ui'))\r\n      object.ui = $root.Ui.toObject(message.ui, options)\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Project to JSON.\r\n   * @function toJSON\r\n   * @memberof Project\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Project.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Project\r\n})())\r\n\r\nexport { $root as default }\r\n","import { IProject } from './project'\r\nimport { IProject as IProjectNext, IFont } from '../project'\r\n\r\nexport default function updateToNext(project: IProject): IProjectNext {\r\n  if (project.style?.font?.font) {\r\n    ;(project.style.font as IFont).fonts = [{ font: project.style.font.font }]\r\n  }\r\n  return project\r\n}\r\n","/* eslint-disable */\r\nimport * as $protobuf from 'protobufjs/minimal'\r\n\r\n// Common aliases\r\nconst $Reader = $protobuf.Reader,\r\n  $Writer = $protobuf.Writer,\r\n  $util = $protobuf.util\r\n\r\n// Exported root namespace\r\nconst $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {})\r\n\r\nexport const Metric = ($root.Metric = (() => {\r\n  /**\r\n   * Properties of a Metric.\r\n   * @exports IMetric\r\n   * @interface IMetric\r\n   * @property {number|null} [xAdvance] Metric xAdvance\r\n   * @property {number|null} [xOffset] Metric xOffset\r\n   * @property {number|null} [yOffset] Metric yOffset\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Metric.\r\n   * @exports Metric\r\n   * @classdesc Represents a Metric.\r\n   * @implements IMetric\r\n   * @constructor\r\n   * @param {IMetric=} [properties] Properties to set\r\n   */\r\n  function Metric(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Metric xAdvance.\r\n   * @member {number} xAdvance\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xAdvance = 0\r\n\r\n  /**\r\n   * Metric xOffset.\r\n   * @member {number} xOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.xOffset = 0\r\n\r\n  /**\r\n   * Metric yOffset.\r\n   * @member {number} yOffset\r\n   * @memberof Metric\r\n   * @instance\r\n   */\r\n  Metric.prototype.yOffset = 0\r\n\r\n  /**\r\n   * Creates a new Metric instance using the specified properties.\r\n   * @function create\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric=} [properties] Properties to set\r\n   * @returns {Metric} Metric instance\r\n   */\r\n  Metric.create = function create(properties) {\r\n    return new Metric(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.xAdvance != null &&\r\n      Object.hasOwnProperty.call(message, 'xAdvance')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).sint32(message.xAdvance)\r\n    if (\r\n      message.xOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'xOffset')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).sint32(message.xOffset)\r\n    if (\r\n      message.yOffset != null &&\r\n      Object.hasOwnProperty.call(message, 'yOffset')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.yOffset)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Metric message, length delimited. Does not implicitly {@link Metric.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {IMetric} message Metric message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Metric.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Metric()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.xAdvance = reader.sint32()\r\n          break\r\n        case 2:\r\n          message.xOffset = reader.sint32()\r\n          break\r\n        case 3:\r\n          message.yOffset = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Metric message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Metric} Metric\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Metric.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Metric message.\r\n   * @function verify\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Metric.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      if (!$util.isInteger(message.xAdvance))\r\n        return 'xAdvance: integer expected'\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      if (!$util.isInteger(message.xOffset)) return 'xOffset: integer expected'\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      if (!$util.isInteger(message.yOffset)) return 'yOffset: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Metric message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Metric} Metric\r\n   */\r\n  Metric.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Metric) return object\r\n    let message = new $root.Metric()\r\n    if (object.xAdvance != null) message.xAdvance = object.xAdvance | 0\r\n    if (object.xOffset != null) message.xOffset = object.xOffset | 0\r\n    if (object.yOffset != null) message.yOffset = object.yOffset | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Metric message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Metric\r\n   * @static\r\n   * @param {Metric} message Metric\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Metric.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.xAdvance = 0\r\n      object.xOffset = 0\r\n      object.yOffset = 0\r\n    }\r\n    if (message.xAdvance != null && message.hasOwnProperty('xAdvance'))\r\n      object.xAdvance = message.xAdvance\r\n    if (message.xOffset != null && message.hasOwnProperty('xOffset'))\r\n      object.xOffset = message.xOffset\r\n    if (message.yOffset != null && message.hasOwnProperty('yOffset'))\r\n      object.yOffset = message.yOffset\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Metric to JSON.\r\n   * @function toJSON\r\n   * @memberof Metric\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Metric.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Metric\r\n})())\r\n\r\nexport const GradientColor = ($root.GradientColor = (() => {\r\n  /**\r\n   * Properties of a GradientColor.\r\n   * @exports IGradientColor\r\n   * @interface IGradientColor\r\n   * @property {number|null} [id] GradientColor id\r\n   * @property {number|null} [offset] GradientColor offset\r\n   * @property {string|null} [color] GradientColor color\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GradientColor.\r\n   * @exports GradientColor\r\n   * @classdesc Represents a GradientColor.\r\n   * @implements IGradientColor\r\n   * @constructor\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   */\r\n  function GradientColor(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GradientColor id.\r\n   * @member {number} id\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.id = 0\r\n\r\n  /**\r\n   * GradientColor offset.\r\n   * @member {number} offset\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.offset = 0\r\n\r\n  /**\r\n   * GradientColor color.\r\n   * @member {string} color\r\n   * @memberof GradientColor\r\n   * @instance\r\n   */\r\n  GradientColor.prototype.color = ''\r\n\r\n  /**\r\n   * Creates a new GradientColor instance using the specified properties.\r\n   * @function create\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor=} [properties] Properties to set\r\n   * @returns {GradientColor} GradientColor instance\r\n   */\r\n  GradientColor.create = function create(properties) {\r\n    return new GradientColor(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.id)\r\n    if (message.offset != null && Object.hasOwnProperty.call(message, 'offset'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.offset)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.color)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GradientColor message, length delimited. Does not implicitly {@link GradientColor.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {IGradientColor} message GradientColor message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GradientColor.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GradientColor()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int32()\r\n          break\r\n        case 2:\r\n          message.offset = reader.float()\r\n          break\r\n        case 3:\r\n          message.color = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GradientColor message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GradientColor} GradientColor\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GradientColor.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GradientColor message.\r\n   * @function verify\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GradientColor.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (!$util.isInteger(message.id)) return 'id: integer expected'\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      if (typeof message.offset !== 'number') return 'offset: number expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GradientColor message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GradientColor} GradientColor\r\n   */\r\n  GradientColor.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GradientColor) return object\r\n    let message = new $root.GradientColor()\r\n    if (object.id != null) message.id = object.id | 0\r\n    if (object.offset != null) message.offset = Number(object.offset)\r\n    if (object.color != null) message.color = String(object.color)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GradientColor message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GradientColor\r\n   * @static\r\n   * @param {GradientColor} message GradientColor\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GradientColor.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.id = 0\r\n      object.offset = 0\r\n      object.color = ''\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      object.id = message.id\r\n    if (message.offset != null && message.hasOwnProperty('offset'))\r\n      object.offset =\r\n        options.json && !isFinite(message.offset)\r\n          ? String(message.offset)\r\n          : message.offset\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GradientColor to JSON.\r\n   * @function toJSON\r\n   * @memberof GradientColor\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GradientColor.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GradientColor\r\n})())\r\n\r\nexport const Gradient = ($root.Gradient = (() => {\r\n  /**\r\n   * Properties of a Gradient.\r\n   * @exports IGradient\r\n   * @interface IGradient\r\n   * @property {number|null} [type] Gradient type\r\n   * @property {number|null} [angle] Gradient angle\r\n   * @property {Array.<IGradientColor>|null} [palette] Gradient palette\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Gradient.\r\n   * @exports Gradient\r\n   * @classdesc Represents a Gradient.\r\n   * @implements IGradient\r\n   * @constructor\r\n   * @param {IGradient=} [properties] Properties to set\r\n   */\r\n  function Gradient(properties) {\r\n    this.palette = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Gradient type.\r\n   * @member {number} type\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.type = 0\r\n\r\n  /**\r\n   * Gradient angle.\r\n   * @member {number} angle\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.angle = 0\r\n\r\n  /**\r\n   * Gradient palette.\r\n   * @member {Array.<IGradientColor>} palette\r\n   * @memberof Gradient\r\n   * @instance\r\n   */\r\n  Gradient.prototype.palette = $util.emptyArray\r\n\r\n  /**\r\n   * Creates a new Gradient instance using the specified properties.\r\n   * @function create\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient=} [properties] Properties to set\r\n   * @returns {Gradient} Gradient instance\r\n   */\r\n  Gradient.create = function create(properties) {\r\n    return new Gradient(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.angle != null && Object.hasOwnProperty.call(message, 'angle'))\r\n      writer.uint32(/* id 2, wireType 5 =*/ 21).float(message.angle)\r\n    if (message.palette != null && message.palette.length)\r\n      for (let i = 0; i < message.palette.length; ++i)\r\n        $root.GradientColor.encode(\r\n          message.palette[i],\r\n          writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n        ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Gradient message, length delimited. Does not implicitly {@link Gradient.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {IGradient} message Gradient message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Gradient.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Gradient()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.angle = reader.float()\r\n          break\r\n        case 3:\r\n          if (!(message.palette && message.palette.length)) message.palette = []\r\n          message.palette.push(\r\n            $root.GradientColor.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Gradient message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Gradient} Gradient\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Gradient.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Gradient message.\r\n   * @function verify\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Gradient.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      if (typeof message.angle !== 'number') return 'angle: number expected'\r\n    if (message.palette != null && message.hasOwnProperty('palette')) {\r\n      if (!Array.isArray(message.palette)) return 'palette: array expected'\r\n      for (let i = 0; i < message.palette.length; ++i) {\r\n        let error = $root.GradientColor.verify(message.palette[i])\r\n        if (error) return 'palette.' + error\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Gradient message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Gradient} Gradient\r\n   */\r\n  Gradient.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Gradient) return object\r\n    let message = new $root.Gradient()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.angle != null) message.angle = Number(object.angle)\r\n    if (object.palette) {\r\n      if (!Array.isArray(object.palette))\r\n        throw TypeError('.Gradient.palette: array expected')\r\n      message.palette = []\r\n      for (let i = 0; i < object.palette.length; ++i) {\r\n        if (typeof object.palette[i] !== 'object')\r\n          throw TypeError('.Gradient.palette: object expected')\r\n        message.palette[i] = $root.GradientColor.fromObject(object.palette[i])\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Gradient message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Gradient\r\n   * @static\r\n   * @param {Gradient} message Gradient\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Gradient.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.palette = []\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.angle = 0\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.angle != null && message.hasOwnProperty('angle'))\r\n      object.angle =\r\n        options.json && !isFinite(message.angle)\r\n          ? String(message.angle)\r\n          : message.angle\r\n    if (message.palette && message.palette.length) {\r\n      object.palette = []\r\n      for (let j = 0; j < message.palette.length; ++j)\r\n        object.palette[j] = $root.GradientColor.toObject(\r\n          message.palette[j],\r\n          options,\r\n        )\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Gradient to JSON.\r\n   * @function toJSON\r\n   * @memberof Gradient\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Gradient.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Gradient\r\n})())\r\n\r\nexport const PatternTexture = ($root.PatternTexture = (() => {\r\n  /**\r\n   * Properties of a PatternTexture.\r\n   * @exports IPatternTexture\r\n   * @interface IPatternTexture\r\n   * @property {Uint8Array|null} [buffer] PatternTexture buffer\r\n   * @property {number|null} [scale] PatternTexture scale\r\n   * @property {string|null} [repetition] PatternTexture repetition\r\n   */\r\n\r\n  /**\r\n   * Constructs a new PatternTexture.\r\n   * @exports PatternTexture\r\n   * @classdesc Represents a PatternTexture.\r\n   * @implements IPatternTexture\r\n   * @constructor\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   */\r\n  function PatternTexture(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * PatternTexture buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * PatternTexture scale.\r\n   * @member {number} scale\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.scale = 0\r\n\r\n  /**\r\n   * PatternTexture repetition.\r\n   * @member {string} repetition\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   */\r\n  PatternTexture.prototype.repetition = ''\r\n\r\n  /**\r\n   * Creates a new PatternTexture instance using the specified properties.\r\n   * @function create\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture=} [properties] Properties to set\r\n   * @returns {PatternTexture} PatternTexture instance\r\n   */\r\n  PatternTexture.create = function create(properties) {\r\n    return new PatternTexture(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.buffer)\r\n    if (message.scale != null && Object.hasOwnProperty.call(message, 'scale'))\r\n      writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.scale)\r\n    if (\r\n      message.repetition != null &&\r\n      Object.hasOwnProperty.call(message, 'repetition')\r\n    )\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.repetition)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified PatternTexture message, length delimited. Does not implicitly {@link PatternTexture.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {IPatternTexture} message PatternTexture message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  PatternTexture.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.PatternTexture()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 2:\r\n          message.scale = reader.double()\r\n          break\r\n        case 3:\r\n          message.repetition = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a PatternTexture message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {PatternTexture} PatternTexture\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  PatternTexture.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a PatternTexture message.\r\n   * @function verify\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  PatternTexture.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      if (typeof message.scale !== 'number') return 'scale: number expected'\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      if (!$util.isString(message.repetition))\r\n        return 'repetition: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a PatternTexture message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {PatternTexture} PatternTexture\r\n   */\r\n  PatternTexture.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.PatternTexture) return object\r\n    let message = new $root.PatternTexture()\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.scale != null) message.scale = Number(object.scale)\r\n    if (object.repetition != null)\r\n      message.repetition = String(object.repetition)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a PatternTexture message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof PatternTexture\r\n   * @static\r\n   * @param {PatternTexture} message PatternTexture\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  PatternTexture.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.scale = 0\r\n      object.repetition = ''\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.scale != null && message.hasOwnProperty('scale'))\r\n      object.scale =\r\n        options.json && !isFinite(message.scale)\r\n          ? String(message.scale)\r\n          : message.scale\r\n    if (message.repetition != null && message.hasOwnProperty('repetition'))\r\n      object.repetition = message.repetition\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this PatternTexture to JSON.\r\n   * @function toJSON\r\n   * @memberof PatternTexture\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  PatternTexture.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return PatternTexture\r\n})())\r\n\r\nexport const Fill = ($root.Fill = (() => {\r\n  /**\r\n   * Properties of a Fill.\r\n   * @exports IFill\r\n   * @interface IFill\r\n   * @property {number|null} [type] Fill type\r\n   * @property {string|null} [color] Fill color\r\n   * @property {IGradient|null} [gradient] Fill gradient\r\n   * @property {IPatternTexture|null} [patternTexture] Fill patternTexture\r\n   * @property {number|null} [width] Fill width\r\n   * @property {string|null} [lineCap] Fill lineCap\r\n   * @property {string|null} [lineJoin] Fill lineJoin\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Fill.\r\n   * @exports Fill\r\n   * @classdesc Represents a Fill.\r\n   * @implements IFill\r\n   * @constructor\r\n   * @param {IFill=} [properties] Properties to set\r\n   */\r\n  function Fill(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Fill type.\r\n   * @member {number} type\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.type = 0\r\n\r\n  /**\r\n   * Fill color.\r\n   * @member {string} color\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.color = ''\r\n\r\n  /**\r\n   * Fill gradient.\r\n   * @member {IGradient|null|undefined} gradient\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.gradient = null\r\n\r\n  /**\r\n   * Fill patternTexture.\r\n   * @member {IPatternTexture|null|undefined} patternTexture\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.patternTexture = null\r\n\r\n  /**\r\n   * Fill width.\r\n   * @member {number} width\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.width = 0\r\n\r\n  /**\r\n   * Fill lineCap.\r\n   * @member {string} lineCap\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineCap = ''\r\n\r\n  /**\r\n   * Fill lineJoin.\r\n   * @member {string} lineJoin\r\n   * @memberof Fill\r\n   * @instance\r\n   */\r\n  Fill.prototype.lineJoin = ''\r\n\r\n  /**\r\n   * Creates a new Fill instance using the specified properties.\r\n   * @function create\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill=} [properties] Properties to set\r\n   * @returns {Fill} Fill instance\r\n   */\r\n  Fill.create = function create(properties) {\r\n    return new Fill(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.type != null && Object.hasOwnProperty.call(message, 'type'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.type)\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.color)\r\n    if (\r\n      message.gradient != null &&\r\n      Object.hasOwnProperty.call(message, 'gradient')\r\n    )\r\n      $root.Gradient.encode(\r\n        message.gradient,\r\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.patternTexture != null &&\r\n      Object.hasOwnProperty.call(message, 'patternTexture')\r\n    )\r\n      $root.PatternTexture.encode(\r\n        message.patternTexture,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).int32(message.width)\r\n    if (\r\n      message.lineCap != null &&\r\n      Object.hasOwnProperty.call(message, 'lineCap')\r\n    )\r\n      writer.uint32(/* id 6, wireType 2 =*/ 50).string(message.lineCap)\r\n    if (\r\n      message.lineJoin != null &&\r\n      Object.hasOwnProperty.call(message, 'lineJoin')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.lineJoin)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Fill message, length delimited. Does not implicitly {@link Fill.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {IFill} message Fill message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Fill.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Fill()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.type = reader.int32()\r\n          break\r\n        case 2:\r\n          message.color = reader.string()\r\n          break\r\n        case 3:\r\n          message.gradient = $root.Gradient.decode(reader, reader.uint32())\r\n          break\r\n        case 4:\r\n          message.patternTexture = $root.PatternTexture.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 5:\r\n          message.width = reader.int32()\r\n          break\r\n        case 6:\r\n          message.lineCap = reader.string()\r\n          break\r\n        case 7:\r\n          message.lineJoin = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Fill message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Fill} Fill\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Fill.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Fill message.\r\n   * @function verify\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Fill.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      if (!$util.isInteger(message.type)) return 'type: integer expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.gradient != null && message.hasOwnProperty('gradient')) {\r\n      let error = $root.Gradient.verify(message.gradient)\r\n      if (error) return 'gradient.' + error\r\n    }\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    ) {\r\n      let error = $root.PatternTexture.verify(message.patternTexture)\r\n      if (error) return 'patternTexture.' + error\r\n    }\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      if (!$util.isString(message.lineCap)) return 'lineCap: string expected'\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      if (!$util.isString(message.lineJoin)) return 'lineJoin: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Fill message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Fill} Fill\r\n   */\r\n  Fill.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Fill) return object\r\n    let message = new $root.Fill()\r\n    if (object.type != null) message.type = object.type | 0\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.gradient != null) {\r\n      if (typeof object.gradient !== 'object')\r\n        throw TypeError('.Fill.gradient: object expected')\r\n      message.gradient = $root.Gradient.fromObject(object.gradient)\r\n    }\r\n    if (object.patternTexture != null) {\r\n      if (typeof object.patternTexture !== 'object')\r\n        throw TypeError('.Fill.patternTexture: object expected')\r\n      message.patternTexture = $root.PatternTexture.fromObject(\r\n        object.patternTexture,\r\n      )\r\n    }\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.lineCap != null) message.lineCap = String(object.lineCap)\r\n    if (object.lineJoin != null) message.lineJoin = String(object.lineJoin)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Fill message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Fill\r\n   * @static\r\n   * @param {Fill} message Fill\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Fill.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.type = 0\r\n      object.color = ''\r\n      object.gradient = null\r\n      object.patternTexture = null\r\n      object.width = 0\r\n      object.lineCap = ''\r\n      object.lineJoin = ''\r\n    }\r\n    if (message.type != null && message.hasOwnProperty('type'))\r\n      object.type = message.type\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.gradient != null && message.hasOwnProperty('gradient'))\r\n      object.gradient = $root.Gradient.toObject(message.gradient, options)\r\n    if (\r\n      message.patternTexture != null &&\r\n      message.hasOwnProperty('patternTexture')\r\n    )\r\n      object.patternTexture = $root.PatternTexture.toObject(\r\n        message.patternTexture,\r\n        options,\r\n      )\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.lineCap != null && message.hasOwnProperty('lineCap'))\r\n      object.lineCap = message.lineCap\r\n    if (message.lineJoin != null && message.hasOwnProperty('lineJoin'))\r\n      object.lineJoin = message.lineJoin\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Fill to JSON.\r\n   * @function toJSON\r\n   * @memberof Fill\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Fill.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Fill\r\n})())\r\n\r\nexport const FontResource = ($root.FontResource = (() => {\r\n  /**\r\n   * Properties of a FontResource.\r\n   * @exports IFontResource\r\n   * @interface IFontResource\r\n   * @property {Uint8Array|null} [font] FontResource font\r\n   */\r\n\r\n  /**\r\n   * Constructs a new FontResource.\r\n   * @exports FontResource\r\n   * @classdesc Represents a FontResource.\r\n   * @implements IFontResource\r\n   * @constructor\r\n   * @param {IFontResource=} [properties] Properties to set\r\n   */\r\n  function FontResource(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * FontResource font.\r\n   * @member {Uint8Array} font\r\n   * @memberof FontResource\r\n   * @instance\r\n   */\r\n  FontResource.prototype.font = $util.newBuffer([])\r\n\r\n  /**\r\n   * Creates a new FontResource instance using the specified properties.\r\n   * @function create\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {IFontResource=} [properties] Properties to set\r\n   * @returns {FontResource} FontResource instance\r\n   */\r\n  FontResource.create = function create(properties) {\r\n    return new FontResource(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified FontResource message. Does not implicitly {@link FontResource.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {IFontResource} message FontResource message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  FontResource.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.font)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified FontResource message, length delimited. Does not implicitly {@link FontResource.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {IFontResource} message FontResource message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  FontResource.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a FontResource message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {FontResource} FontResource\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  FontResource.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.FontResource()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = reader.bytes()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a FontResource message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {FontResource} FontResource\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  FontResource.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a FontResource message.\r\n   * @function verify\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  FontResource.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      if (\r\n        !(\r\n          (message.font && typeof message.font.length === 'number') ||\r\n          $util.isString(message.font)\r\n        )\r\n      )\r\n        return 'font: buffer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a FontResource message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {FontResource} FontResource\r\n   */\r\n  FontResource.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.FontResource) return object\r\n    let message = new $root.FontResource()\r\n    if (object.font != null)\r\n      if (typeof object.font === 'string')\r\n        $util.base64.decode(\r\n          object.font,\r\n          (message.font = $util.newBuffer($util.base64.length(object.font))),\r\n          0,\r\n        )\r\n      else if (object.font.length) message.font = object.font\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a FontResource message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof FontResource\r\n   * @static\r\n   * @param {FontResource} message FontResource\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  FontResource.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults)\r\n      if (options.bytes === String) object.font = ''\r\n      else {\r\n        object.font = []\r\n        if (options.bytes !== Array) object.font = $util.newBuffer(object.font)\r\n      }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.font, 0, message.font.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.font)\r\n          : message.font\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this FontResource to JSON.\r\n   * @function toJSON\r\n   * @memberof FontResource\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  FontResource.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return FontResource\r\n})())\r\n\r\nexport const Font = ($root.Font = (() => {\r\n  /**\r\n   * Properties of a Font.\r\n   * @exports IFont\r\n   * @interface IFont\r\n   * @property {Array.<IFontResource>|null} [fonts] Font fonts\r\n   * @property {number|null} [size] Font size\r\n   * @property {number|null} [lineHeight] Font lineHeight\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Font.\r\n   * @exports Font\r\n   * @classdesc Represents a Font.\r\n   * @implements IFont\r\n   * @constructor\r\n   * @param {IFont=} [properties] Properties to set\r\n   */\r\n  function Font(properties) {\r\n    this.fonts = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Font fonts.\r\n   * @member {Array.<IFontResource>} fonts\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.fonts = $util.emptyArray\r\n\r\n  /**\r\n   * Font size.\r\n   * @member {number} size\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.size = 0\r\n\r\n  /**\r\n   * Font lineHeight.\r\n   * @member {number} lineHeight\r\n   * @memberof Font\r\n   * @instance\r\n   */\r\n  Font.prototype.lineHeight = 0\r\n\r\n  /**\r\n   * Creates a new Font instance using the specified properties.\r\n   * @function create\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont=} [properties] Properties to set\r\n   * @returns {Font} Font instance\r\n   */\r\n  Font.create = function create(properties) {\r\n    return new Font(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.fonts != null && message.fonts.length)\r\n      for (let i = 0; i < message.fonts.length; ++i)\r\n        $root.FontResource.encode(\r\n          message.fonts[i],\r\n          writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\r\n        ).ldelim()\r\n    if (message.size != null && Object.hasOwnProperty.call(message, 'size'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.size)\r\n    if (\r\n      message.lineHeight != null &&\r\n      Object.hasOwnProperty.call(message, 'lineHeight')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.lineHeight)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Font message, length delimited. Does not implicitly {@link Font.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {IFont} message Font message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Font.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Font()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          if (!(message.fonts && message.fonts.length)) message.fonts = []\r\n          message.fonts.push($root.FontResource.decode(reader, reader.uint32()))\r\n          break\r\n        case 2:\r\n          message.size = reader.int32()\r\n          break\r\n        case 3:\r\n          message.lineHeight = reader.int32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Font message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Font\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Font} Font\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Font.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Font message.\r\n   * @function verify\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Font.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.fonts != null && message.hasOwnProperty('fonts')) {\r\n      if (!Array.isArray(message.fonts)) return 'fonts: array expected'\r\n      for (let i = 0; i < message.fonts.length; ++i) {\r\n        let error = $root.FontResource.verify(message.fonts[i])\r\n        if (error) return 'fonts.' + error\r\n      }\r\n    }\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      if (!$util.isInteger(message.size)) return 'size: integer expected'\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      if (!$util.isInteger(message.lineHeight))\r\n        return 'lineHeight: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Font message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Font} Font\r\n   */\r\n  Font.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Font) return object\r\n    let message = new $root.Font()\r\n    if (object.fonts) {\r\n      if (!Array.isArray(object.fonts))\r\n        throw TypeError('.Font.fonts: array expected')\r\n      message.fonts = []\r\n      for (let i = 0; i < object.fonts.length; ++i) {\r\n        if (typeof object.fonts[i] !== 'object')\r\n          throw TypeError('.Font.fonts: object expected')\r\n        message.fonts[i] = $root.FontResource.fromObject(object.fonts[i])\r\n      }\r\n    }\r\n    if (object.size != null) message.size = object.size | 0\r\n    if (object.lineHeight != null) message.lineHeight = object.lineHeight | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Font message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Font\r\n   * @static\r\n   * @param {Font} message Font\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Font.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.fonts = []\r\n    if (options.defaults) {\r\n      object.size = 0\r\n      object.lineHeight = 0\r\n    }\r\n    if (message.fonts && message.fonts.length) {\r\n      object.fonts = []\r\n      for (let j = 0; j < message.fonts.length; ++j)\r\n        object.fonts[j] = $root.FontResource.toObject(message.fonts[j], options)\r\n    }\r\n    if (message.size != null && message.hasOwnProperty('size'))\r\n      object.size = message.size\r\n    if (message.lineHeight != null && message.hasOwnProperty('lineHeight'))\r\n      object.lineHeight = message.lineHeight\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Font to JSON.\r\n   * @function toJSON\r\n   * @memberof Font\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Font.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Font\r\n})())\r\n\r\nexport const GlyphFont = ($root.GlyphFont = (() => {\r\n  /**\r\n   * Properties of a GlyphFont.\r\n   * @exports IGlyphFont\r\n   * @interface IGlyphFont\r\n   * @property {string|null} [letter] GlyphFont letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphFont adjustMetric\r\n   * @property {Object.<string,number>|null} [kerning] GlyphFont kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphFont.\r\n   * @exports GlyphFont\r\n   * @classdesc Represents a GlyphFont.\r\n   * @implements IGlyphFont\r\n   * @constructor\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   */\r\n  function GlyphFont(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphFont letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphFont adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphFont kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   */\r\n  GlyphFont.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphFont instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont=} [properties] Properties to set\r\n   * @returns {GlyphFont} GlyphFont instance\r\n   */\r\n  GlyphFont.create = function create(properties) {\r\n    return new GlyphFont(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 3, wireType 2 =*/ 26)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphFont message, length delimited. Does not implicitly {@link GlyphFont.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {IGlyphFont} message GlyphFont message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphFont.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphFont(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphFont message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphFont} GlyphFont\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphFont.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphFont message.\r\n   * @function verify\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphFont.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphFont message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphFont} GlyphFont\r\n   */\r\n  GlyphFont.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphFont) return object\r\n    let message = new $root.GlyphFont()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphFont.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphFont.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphFont message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphFont\r\n   * @static\r\n   * @param {GlyphFont} message GlyphFont\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphFont.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphFont to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphFont\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphFont.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphFont\r\n})())\r\n\r\nexport const GlyphImage = ($root.GlyphImage = (() => {\r\n  /**\r\n   * Properties of a GlyphImage.\r\n   * @exports IGlyphImage\r\n   * @interface IGlyphImage\r\n   * @property {string|null} [letter] GlyphImage letter\r\n   * @property {IMetric|null} [adjustMetric] GlyphImage adjustMetric\r\n   * @property {Uint8Array|null} [buffer] GlyphImage buffer\r\n   * @property {string|null} [fileName] GlyphImage fileName\r\n   * @property {string|null} [fileType] GlyphImage fileType\r\n   * @property {boolean|null} [selected] GlyphImage selected\r\n   * @property {Object.<string,number>|null} [kerning] GlyphImage kerning\r\n   */\r\n\r\n  /**\r\n   * Constructs a new GlyphImage.\r\n   * @exports GlyphImage\r\n   * @classdesc Represents a GlyphImage.\r\n   * @implements IGlyphImage\r\n   * @constructor\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   */\r\n  function GlyphImage(properties) {\r\n    this.kerning = {}\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * GlyphImage letter.\r\n   * @member {string} letter\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.letter = ''\r\n\r\n  /**\r\n   * GlyphImage adjustMetric.\r\n   * @member {IMetric|null|undefined} adjustMetric\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.adjustMetric = null\r\n\r\n  /**\r\n   * GlyphImage buffer.\r\n   * @member {Uint8Array} buffer\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.buffer = $util.newBuffer([])\r\n\r\n  /**\r\n   * GlyphImage fileName.\r\n   * @member {string} fileName\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileName = ''\r\n\r\n  /**\r\n   * GlyphImage fileType.\r\n   * @member {string} fileType\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.fileType = ''\r\n\r\n  /**\r\n   * GlyphImage selected.\r\n   * @member {boolean} selected\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.selected = false\r\n\r\n  /**\r\n   * GlyphImage kerning.\r\n   * @member {Object.<string,number>} kerning\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   */\r\n  GlyphImage.prototype.kerning = $util.emptyObject\r\n\r\n  /**\r\n   * Creates a new GlyphImage instance using the specified properties.\r\n   * @function create\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage=} [properties] Properties to set\r\n   * @returns {GlyphImage} GlyphImage instance\r\n   */\r\n  GlyphImage.create = function create(properties) {\r\n    return new GlyphImage(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.letter != null && Object.hasOwnProperty.call(message, 'letter'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.letter)\r\n    if (\r\n      message.adjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'adjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.adjustMetric,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (message.buffer != null && Object.hasOwnProperty.call(message, 'buffer'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.buffer)\r\n    if (\r\n      message.fileName != null &&\r\n      Object.hasOwnProperty.call(message, 'fileName')\r\n    )\r\n      writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.fileName)\r\n    if (\r\n      message.fileType != null &&\r\n      Object.hasOwnProperty.call(message, 'fileType')\r\n    )\r\n      writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.fileType)\r\n    if (\r\n      message.selected != null &&\r\n      Object.hasOwnProperty.call(message, 'selected')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.selected)\r\n    if (\r\n      message.kerning != null &&\r\n      Object.hasOwnProperty.call(message, 'kerning')\r\n    )\r\n      for (let keys = Object.keys(message.kerning), i = 0; i < keys.length; ++i)\r\n        writer\r\n          .uint32(/* id 7, wireType 2 =*/ 58)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n          .uint32(/* id 2, wireType 0 =*/ 16)\r\n          .int32(message.kerning[keys[i]])\r\n          .ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified GlyphImage message, length delimited. Does not implicitly {@link GlyphImage.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {IGlyphImage} message GlyphImage message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  GlyphImage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.GlyphImage(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.letter = reader.string()\r\n          break\r\n        case 2:\r\n          message.adjustMetric = $root.Metric.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.buffer = reader.bytes()\r\n          break\r\n        case 4:\r\n          message.fileName = reader.string()\r\n          break\r\n        case 5:\r\n          message.fileType = reader.string()\r\n          break\r\n        case 6:\r\n          message.selected = reader.bool()\r\n          break\r\n        case 7:\r\n          if (message.kerning === $util.emptyObject) message.kerning = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = 0\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = reader.int32()\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.kerning[key] = value\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a GlyphImage message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {GlyphImage} GlyphImage\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  GlyphImage.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a GlyphImage message.\r\n   * @function verify\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  GlyphImage.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      if (!$util.isString(message.letter)) return 'letter: string expected'\r\n    if (\r\n      message.adjustMetric != null &&\r\n      message.hasOwnProperty('adjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.adjustMetric)\r\n      if (error) return 'adjustMetric.' + error\r\n    }\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      if (\r\n        !(\r\n          (message.buffer && typeof message.buffer.length === 'number') ||\r\n          $util.isString(message.buffer)\r\n        )\r\n      )\r\n        return 'buffer: buffer expected'\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      if (!$util.isString(message.fileName)) return 'fileName: string expected'\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      if (!$util.isString(message.fileType)) return 'fileType: string expected'\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      if (typeof message.selected !== 'boolean')\r\n        return 'selected: boolean expected'\r\n    if (message.kerning != null && message.hasOwnProperty('kerning')) {\r\n      if (!$util.isObject(message.kerning)) return 'kerning: object expected'\r\n      let key = Object.keys(message.kerning)\r\n      for (let i = 0; i < key.length; ++i)\r\n        if (!$util.isInteger(message.kerning[key[i]]))\r\n          return 'kerning: integer{k:string} expected'\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a GlyphImage message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {GlyphImage} GlyphImage\r\n   */\r\n  GlyphImage.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.GlyphImage) return object\r\n    let message = new $root.GlyphImage()\r\n    if (object.letter != null) message.letter = String(object.letter)\r\n    if (object.adjustMetric != null) {\r\n      if (typeof object.adjustMetric !== 'object')\r\n        throw TypeError('.GlyphImage.adjustMetric: object expected')\r\n      message.adjustMetric = $root.Metric.fromObject(object.adjustMetric)\r\n    }\r\n    if (object.buffer != null)\r\n      if (typeof object.buffer === 'string')\r\n        $util.base64.decode(\r\n          object.buffer,\r\n          (message.buffer = $util.newBuffer(\r\n            $util.base64.length(object.buffer),\r\n          )),\r\n          0,\r\n        )\r\n      else if (object.buffer.length) message.buffer = object.buffer\r\n    if (object.fileName != null) message.fileName = String(object.fileName)\r\n    if (object.fileType != null) message.fileType = String(object.fileType)\r\n    if (object.selected != null) message.selected = Boolean(object.selected)\r\n    if (object.kerning) {\r\n      if (typeof object.kerning !== 'object')\r\n        throw TypeError('.GlyphImage.kerning: object expected')\r\n      message.kerning = {}\r\n      for (let keys = Object.keys(object.kerning), i = 0; i < keys.length; ++i)\r\n        message.kerning[keys[i]] = object.kerning[keys[i]] | 0\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a GlyphImage message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof GlyphImage\r\n   * @static\r\n   * @param {GlyphImage} message GlyphImage\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  GlyphImage.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.objects || options.defaults) object.kerning = {}\r\n    if (options.defaults) {\r\n      object.letter = ''\r\n      object.adjustMetric = null\r\n      if (options.bytes === String) object.buffer = ''\r\n      else {\r\n        object.buffer = []\r\n        if (options.bytes !== Array)\r\n          object.buffer = $util.newBuffer(object.buffer)\r\n      }\r\n      object.fileName = ''\r\n      object.fileType = ''\r\n      object.selected = false\r\n    }\r\n    if (message.letter != null && message.hasOwnProperty('letter'))\r\n      object.letter = message.letter\r\n    if (message.adjustMetric != null && message.hasOwnProperty('adjustMetric'))\r\n      object.adjustMetric = $root.Metric.toObject(message.adjustMetric, options)\r\n    if (message.buffer != null && message.hasOwnProperty('buffer'))\r\n      object.buffer =\r\n        options.bytes === String\r\n          ? $util.base64.encode(message.buffer, 0, message.buffer.length)\r\n          : options.bytes === Array\r\n          ? Array.prototype.slice.call(message.buffer)\r\n          : message.buffer\r\n    if (message.fileName != null && message.hasOwnProperty('fileName'))\r\n      object.fileName = message.fileName\r\n    if (message.fileType != null && message.hasOwnProperty('fileType'))\r\n      object.fileType = message.fileType\r\n    if (message.selected != null && message.hasOwnProperty('selected'))\r\n      object.selected = message.selected\r\n    let keys2\r\n    if (message.kerning && (keys2 = Object.keys(message.kerning)).length) {\r\n      object.kerning = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.kerning[keys2[j]] = message.kerning[keys2[j]]\r\n    }\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this GlyphImage to JSON.\r\n   * @function toJSON\r\n   * @memberof GlyphImage\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  GlyphImage.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return GlyphImage\r\n})())\r\n\r\nexport const Layout = ($root.Layout = (() => {\r\n  /**\r\n   * Properties of a Layout.\r\n   * @exports ILayout\r\n   * @interface ILayout\r\n   * @property {number|null} [padding] Layout padding\r\n   * @property {number|null} [spacing] Layout spacing\r\n   * @property {number|null} [width] Layout width\r\n   * @property {number|null} [height] Layout height\r\n   * @property {boolean|null} [auto] Layout auto\r\n   * @property {boolean|null} [fixedSize] Layout fixedSize\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Layout.\r\n   * @exports Layout\r\n   * @classdesc Represents a Layout.\r\n   * @implements ILayout\r\n   * @constructor\r\n   * @param {ILayout=} [properties] Properties to set\r\n   */\r\n  function Layout(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Layout padding.\r\n   * @member {number} padding\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.padding = 0\r\n\r\n  /**\r\n   * Layout spacing.\r\n   * @member {number} spacing\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.spacing = 0\r\n\r\n  /**\r\n   * Layout width.\r\n   * @member {number} width\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.width = 0\r\n\r\n  /**\r\n   * Layout height.\r\n   * @member {number} height\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.height = 0\r\n\r\n  /**\r\n   * Layout auto.\r\n   * @member {boolean} auto\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.auto = false\r\n\r\n  /**\r\n   * Layout fixedSize.\r\n   * @member {boolean} fixedSize\r\n   * @memberof Layout\r\n   * @instance\r\n   */\r\n  Layout.prototype.fixedSize = false\r\n\r\n  /**\r\n   * Creates a new Layout instance using the specified properties.\r\n   * @function create\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout=} [properties] Properties to set\r\n   * @returns {Layout} Layout instance\r\n   */\r\n  Layout.create = function create(properties) {\r\n    return new Layout(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.padding != null &&\r\n      Object.hasOwnProperty.call(message, 'padding')\r\n    )\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.padding)\r\n    if (\r\n      message.spacing != null &&\r\n      Object.hasOwnProperty.call(message, 'spacing')\r\n    )\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.spacing)\r\n    if (message.width != null && Object.hasOwnProperty.call(message, 'width'))\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.width)\r\n    if (message.height != null && Object.hasOwnProperty.call(message, 'height'))\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).int32(message.height)\r\n    if (message.auto != null && Object.hasOwnProperty.call(message, 'auto'))\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.auto)\r\n    if (\r\n      message.fixedSize != null &&\r\n      Object.hasOwnProperty.call(message, 'fixedSize')\r\n    )\r\n      writer.uint32(/* id 6, wireType 0 =*/ 48).bool(message.fixedSize)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Layout message, length delimited. Does not implicitly {@link Layout.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {ILayout} message Layout message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Layout.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Layout()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.padding = reader.int32()\r\n          break\r\n        case 2:\r\n          message.spacing = reader.int32()\r\n          break\r\n        case 3:\r\n          message.width = reader.int32()\r\n          break\r\n        case 4:\r\n          message.height = reader.int32()\r\n          break\r\n        case 5:\r\n          message.auto = reader.bool()\r\n          break\r\n        case 6:\r\n          message.fixedSize = reader.bool()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Layout message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Layout} Layout\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Layout.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Layout message.\r\n   * @function verify\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Layout.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      if (!$util.isInteger(message.padding)) return 'padding: integer expected'\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      if (!$util.isInteger(message.spacing)) return 'spacing: integer expected'\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      if (!$util.isInteger(message.width)) return 'width: integer expected'\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      if (!$util.isInteger(message.height)) return 'height: integer expected'\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      if (typeof message.auto !== 'boolean') return 'auto: boolean expected'\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      if (typeof message.fixedSize !== 'boolean')\r\n        return 'fixedSize: boolean expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Layout message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Layout} Layout\r\n   */\r\n  Layout.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Layout) return object\r\n    let message = new $root.Layout()\r\n    if (object.padding != null) message.padding = object.padding | 0\r\n    if (object.spacing != null) message.spacing = object.spacing | 0\r\n    if (object.width != null) message.width = object.width | 0\r\n    if (object.height != null) message.height = object.height | 0\r\n    if (object.auto != null) message.auto = Boolean(object.auto)\r\n    if (object.fixedSize != null) message.fixedSize = Boolean(object.fixedSize)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Layout message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Layout\r\n   * @static\r\n   * @param {Layout} message Layout\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Layout.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.padding = 0\r\n      object.spacing = 0\r\n      object.width = 0\r\n      object.height = 0\r\n      object.auto = false\r\n      object.fixedSize = false\r\n    }\r\n    if (message.padding != null && message.hasOwnProperty('padding'))\r\n      object.padding = message.padding\r\n    if (message.spacing != null && message.hasOwnProperty('spacing'))\r\n      object.spacing = message.spacing\r\n    if (message.width != null && message.hasOwnProperty('width'))\r\n      object.width = message.width\r\n    if (message.height != null && message.hasOwnProperty('height'))\r\n      object.height = message.height\r\n    if (message.auto != null && message.hasOwnProperty('auto'))\r\n      object.auto = message.auto\r\n    if (message.fixedSize != null && message.hasOwnProperty('fixedSize'))\r\n      object.fixedSize = message.fixedSize\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Layout to JSON.\r\n   * @function toJSON\r\n   * @memberof Layout\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Layout.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Layout\r\n})())\r\n\r\nexport const Shadow = ($root.Shadow = (() => {\r\n  /**\r\n   * Properties of a Shadow.\r\n   * @exports IShadow\r\n   * @interface IShadow\r\n   * @property {string|null} [color] Shadow color\r\n   * @property {number|null} [blur] Shadow blur\r\n   * @property {number|null} [offsetX] Shadow offsetX\r\n   * @property {number|null} [offsetY] Shadow offsetY\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Shadow.\r\n   * @exports Shadow\r\n   * @classdesc Represents a Shadow.\r\n   * @implements IShadow\r\n   * @constructor\r\n   * @param {IShadow=} [properties] Properties to set\r\n   */\r\n  function Shadow(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Shadow color.\r\n   * @member {string} color\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.color = ''\r\n\r\n  /**\r\n   * Shadow blur.\r\n   * @member {number} blur\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.blur = 0\r\n\r\n  /**\r\n   * Shadow offsetX.\r\n   * @member {number} offsetX\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetX = 0\r\n\r\n  /**\r\n   * Shadow offsetY.\r\n   * @member {number} offsetY\r\n   * @memberof Shadow\r\n   * @instance\r\n   */\r\n  Shadow.prototype.offsetY = 0\r\n\r\n  /**\r\n   * Creates a new Shadow instance using the specified properties.\r\n   * @function create\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow=} [properties] Properties to set\r\n   * @returns {Shadow} Shadow instance\r\n   */\r\n  Shadow.create = function create(properties) {\r\n    return new Shadow(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.color != null && Object.hasOwnProperty.call(message, 'color'))\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.color)\r\n    if (message.blur != null && Object.hasOwnProperty.call(message, 'blur'))\r\n      writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.blur)\r\n    if (\r\n      message.offsetX != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetX')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).sint32(message.offsetX)\r\n    if (\r\n      message.offsetY != null &&\r\n      Object.hasOwnProperty.call(message, 'offsetY')\r\n    )\r\n      writer.uint32(/* id 4, wireType 0 =*/ 32).sint32(message.offsetY)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Shadow message, length delimited. Does not implicitly {@link Shadow.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {IShadow} message Shadow message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Shadow.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Shadow()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.color = reader.string()\r\n          break\r\n        case 2:\r\n          message.blur = reader.int32()\r\n          break\r\n        case 3:\r\n          message.offsetX = reader.sint32()\r\n          break\r\n        case 4:\r\n          message.offsetY = reader.sint32()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Shadow message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Shadow} Shadow\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Shadow.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Shadow message.\r\n   * @function verify\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Shadow.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      if (!$util.isString(message.color)) return 'color: string expected'\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      if (!$util.isInteger(message.blur)) return 'blur: integer expected'\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      if (!$util.isInteger(message.offsetX)) return 'offsetX: integer expected'\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      if (!$util.isInteger(message.offsetY)) return 'offsetY: integer expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Shadow message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Shadow} Shadow\r\n   */\r\n  Shadow.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Shadow) return object\r\n    let message = new $root.Shadow()\r\n    if (object.color != null) message.color = String(object.color)\r\n    if (object.blur != null) message.blur = object.blur | 0\r\n    if (object.offsetX != null) message.offsetX = object.offsetX | 0\r\n    if (object.offsetY != null) message.offsetY = object.offsetY | 0\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Shadow message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Shadow\r\n   * @static\r\n   * @param {Shadow} message Shadow\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Shadow.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.color = ''\r\n      object.blur = 0\r\n      object.offsetX = 0\r\n      object.offsetY = 0\r\n    }\r\n    if (message.color != null && message.hasOwnProperty('color'))\r\n      object.color = message.color\r\n    if (message.blur != null && message.hasOwnProperty('blur'))\r\n      object.blur = message.blur\r\n    if (message.offsetX != null && message.hasOwnProperty('offsetX'))\r\n      object.offsetX = message.offsetX\r\n    if (message.offsetY != null && message.hasOwnProperty('offsetY'))\r\n      object.offsetY = message.offsetY\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Shadow to JSON.\r\n   * @function toJSON\r\n   * @memberof Shadow\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Shadow.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Shadow\r\n})())\r\n\r\nexport const Style = ($root.Style = (() => {\r\n  /**\r\n   * Properties of a Style.\r\n   * @exports IStyle\r\n   * @interface IStyle\r\n   * @property {IFont|null} [font] Style font\r\n   * @property {IFill|null} [fill] Style fill\r\n   * @property {boolean|null} [useStroke] Style useStroke\r\n   * @property {IFill|null} [stroke] Style stroke\r\n   * @property {boolean|null} [useShadow] Style useShadow\r\n   * @property {IShadow|null} [shadow] Style shadow\r\n   * @property {string|null} [bgColor] Style bgColor\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Style.\r\n   * @exports Style\r\n   * @classdesc Represents a Style.\r\n   * @implements IStyle\r\n   * @constructor\r\n   * @param {IStyle=} [properties] Properties to set\r\n   */\r\n  function Style(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Style font.\r\n   * @member {IFont|null|undefined} font\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.font = null\r\n\r\n  /**\r\n   * Style fill.\r\n   * @member {IFill|null|undefined} fill\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.fill = null\r\n\r\n  /**\r\n   * Style useStroke.\r\n   * @member {boolean} useStroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useStroke = false\r\n\r\n  /**\r\n   * Style stroke.\r\n   * @member {IFill|null|undefined} stroke\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.stroke = null\r\n\r\n  /**\r\n   * Style useShadow.\r\n   * @member {boolean} useShadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.useShadow = false\r\n\r\n  /**\r\n   * Style shadow.\r\n   * @member {IShadow|null|undefined} shadow\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.shadow = null\r\n\r\n  /**\r\n   * Style bgColor.\r\n   * @member {string} bgColor\r\n   * @memberof Style\r\n   * @instance\r\n   */\r\n  Style.prototype.bgColor = ''\r\n\r\n  /**\r\n   * Creates a new Style instance using the specified properties.\r\n   * @function create\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle=} [properties] Properties to set\r\n   * @returns {Style} Style instance\r\n   */\r\n  Style.create = function create(properties) {\r\n    return new Style(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.font != null && Object.hasOwnProperty.call(message, 'font'))\r\n      $root.Font.encode(\r\n        message.font,\r\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork(),\r\n      ).ldelim()\r\n    if (message.fill != null && Object.hasOwnProperty.call(message, 'fill'))\r\n      $root.Fill.encode(\r\n        message.fill,\r\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useStroke != null &&\r\n      Object.hasOwnProperty.call(message, 'useStroke')\r\n    )\r\n      writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.useStroke)\r\n    if (message.stroke != null && Object.hasOwnProperty.call(message, 'stroke'))\r\n      $root.Fill.encode(\r\n        message.stroke,\r\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.useShadow != null &&\r\n      Object.hasOwnProperty.call(message, 'useShadow')\r\n    )\r\n      writer.uint32(/* id 5, wireType 0 =*/ 40).bool(message.useShadow)\r\n    if (message.shadow != null && Object.hasOwnProperty.call(message, 'shadow'))\r\n      $root.Shadow.encode(\r\n        message.shadow,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.bgColor != null &&\r\n      Object.hasOwnProperty.call(message, 'bgColor')\r\n    )\r\n      writer.uint32(/* id 7, wireType 2 =*/ 58).string(message.bgColor)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Style message, length delimited. Does not implicitly {@link Style.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {IStyle} message Style message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Style.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Style()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.font = $root.Font.decode(reader, reader.uint32())\r\n          break\r\n        case 2:\r\n          message.fill = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 3:\r\n          message.useStroke = reader.bool()\r\n          break\r\n        case 4:\r\n          message.stroke = $root.Fill.decode(reader, reader.uint32())\r\n          break\r\n        case 5:\r\n          message.useShadow = reader.bool()\r\n          break\r\n        case 6:\r\n          message.shadow = $root.Shadow.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.bgColor = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Style message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Style\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Style} Style\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Style.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Style message.\r\n   * @function verify\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Style.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.font != null && message.hasOwnProperty('font')) {\r\n      let error = $root.Font.verify(message.font)\r\n      if (error) return 'font.' + error\r\n    }\r\n    if (message.fill != null && message.hasOwnProperty('fill')) {\r\n      let error = $root.Fill.verify(message.fill)\r\n      if (error) return 'fill.' + error\r\n    }\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      if (typeof message.useStroke !== 'boolean')\r\n        return 'useStroke: boolean expected'\r\n    if (message.stroke != null && message.hasOwnProperty('stroke')) {\r\n      let error = $root.Fill.verify(message.stroke)\r\n      if (error) return 'stroke.' + error\r\n    }\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      if (typeof message.useShadow !== 'boolean')\r\n        return 'useShadow: boolean expected'\r\n    if (message.shadow != null && message.hasOwnProperty('shadow')) {\r\n      let error = $root.Shadow.verify(message.shadow)\r\n      if (error) return 'shadow.' + error\r\n    }\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      if (!$util.isString(message.bgColor)) return 'bgColor: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Style message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Style} Style\r\n   */\r\n  Style.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Style) return object\r\n    let message = new $root.Style()\r\n    if (object.font != null) {\r\n      if (typeof object.font !== 'object')\r\n        throw TypeError('.Style.font: object expected')\r\n      message.font = $root.Font.fromObject(object.font)\r\n    }\r\n    if (object.fill != null) {\r\n      if (typeof object.fill !== 'object')\r\n        throw TypeError('.Style.fill: object expected')\r\n      message.fill = $root.Fill.fromObject(object.fill)\r\n    }\r\n    if (object.useStroke != null) message.useStroke = Boolean(object.useStroke)\r\n    if (object.stroke != null) {\r\n      if (typeof object.stroke !== 'object')\r\n        throw TypeError('.Style.stroke: object expected')\r\n      message.stroke = $root.Fill.fromObject(object.stroke)\r\n    }\r\n    if (object.useShadow != null) message.useShadow = Boolean(object.useShadow)\r\n    if (object.shadow != null) {\r\n      if (typeof object.shadow !== 'object')\r\n        throw TypeError('.Style.shadow: object expected')\r\n      message.shadow = $root.Shadow.fromObject(object.shadow)\r\n    }\r\n    if (object.bgColor != null) message.bgColor = String(object.bgColor)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Style message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Style\r\n   * @static\r\n   * @param {Style} message Style\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Style.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) {\r\n      object.font = null\r\n      object.fill = null\r\n      object.useStroke = false\r\n      object.stroke = null\r\n      object.useShadow = false\r\n      object.shadow = null\r\n      object.bgColor = ''\r\n    }\r\n    if (message.font != null && message.hasOwnProperty('font'))\r\n      object.font = $root.Font.toObject(message.font, options)\r\n    if (message.fill != null && message.hasOwnProperty('fill'))\r\n      object.fill = $root.Fill.toObject(message.fill, options)\r\n    if (message.useStroke != null && message.hasOwnProperty('useStroke'))\r\n      object.useStroke = message.useStroke\r\n    if (message.stroke != null && message.hasOwnProperty('stroke'))\r\n      object.stroke = $root.Fill.toObject(message.stroke, options)\r\n    if (message.useShadow != null && message.hasOwnProperty('useShadow'))\r\n      object.useShadow = message.useShadow\r\n    if (message.shadow != null && message.hasOwnProperty('shadow'))\r\n      object.shadow = $root.Shadow.toObject(message.shadow, options)\r\n    if (message.bgColor != null && message.hasOwnProperty('bgColor'))\r\n      object.bgColor = message.bgColor\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Style to JSON.\r\n   * @function toJSON\r\n   * @memberof Style\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Style.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Style\r\n})())\r\n\r\nexport const Ui = ($root.Ui = (() => {\r\n  /**\r\n   * Properties of an Ui.\r\n   * @exports IUi\r\n   * @interface IUi\r\n   * @property {string|null} [previewText] Ui previewText\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Ui.\r\n   * @exports Ui\r\n   * @classdesc Represents an Ui.\r\n   * @implements IUi\r\n   * @constructor\r\n   * @param {IUi=} [properties] Properties to set\r\n   */\r\n  function Ui(properties) {\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Ui previewText.\r\n   * @member {string} previewText\r\n   * @memberof Ui\r\n   * @instance\r\n   */\r\n  Ui.prototype.previewText = ''\r\n\r\n  /**\r\n   * Creates a new Ui instance using the specified properties.\r\n   * @function create\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi=} [properties] Properties to set\r\n   * @returns {Ui} Ui instance\r\n   */\r\n  Ui.create = function create(properties) {\r\n    return new Ui(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (\r\n      message.previewText != null &&\r\n      Object.hasOwnProperty.call(message, 'previewText')\r\n    )\r\n      writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.previewText)\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Ui message, length delimited. Does not implicitly {@link Ui.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {IUi} message Ui message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Ui.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Ui()\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.previewText = reader.string()\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes an Ui message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Ui} Ui\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Ui.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies an Ui message.\r\n   * @function verify\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Ui.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      if (!$util.isString(message.previewText))\r\n        return 'previewText: string expected'\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates an Ui message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Ui} Ui\r\n   */\r\n  Ui.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Ui) return object\r\n    let message = new $root.Ui()\r\n    if (object.previewText != null)\r\n      message.previewText = String(object.previewText)\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from an Ui message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Ui\r\n   * @static\r\n   * @param {Ui} message Ui\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Ui.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.defaults) object.previewText = ''\r\n    if (message.previewText != null && message.hasOwnProperty('previewText'))\r\n      object.previewText = message.previewText\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Ui to JSON.\r\n   * @function toJSON\r\n   * @memberof Ui\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Ui.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Ui\r\n})())\r\n\r\nexport const Project = ($root.Project = (() => {\r\n  /**\r\n   * Properties of a Project.\r\n   * @exports IProject\r\n   * @interface IProject\r\n   * @property {number|Long|null} [id] Project id\r\n   * @property {string|null} [name] Project name\r\n   * @property {string|null} [text] Project text\r\n   * @property {Object.<string,IGlyphFont>|null} [glyphs] Project glyphs\r\n   * @property {Array.<IGlyphImage>|null} [glyphImages] Project glyphImages\r\n   * @property {IStyle|null} [style] Project style\r\n   * @property {ILayout|null} [layout] Project layout\r\n   * @property {IMetric|null} [globalAdjustMetric] Project globalAdjustMetric\r\n   * @property {IUi|null} [ui] Project ui\r\n   */\r\n\r\n  /**\r\n   * Constructs a new Project.\r\n   * @exports Project\r\n   * @classdesc Represents a Project.\r\n   * @implements IProject\r\n   * @constructor\r\n   * @param {IProject=} [properties] Properties to set\r\n   */\r\n  function Project(properties) {\r\n    this.glyphs = {}\r\n    this.glyphImages = []\r\n    if (properties)\r\n      for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\r\n  }\r\n\r\n  /**\r\n   * Project id.\r\n   * @member {number|Long} id\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0\r\n\r\n  /**\r\n   * Project name.\r\n   * @member {string} name\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.name = ''\r\n\r\n  /**\r\n   * Project text.\r\n   * @member {string} text\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.text = ''\r\n\r\n  /**\r\n   * Project glyphs.\r\n   * @member {Object.<string,IGlyphFont>} glyphs\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphs = $util.emptyObject\r\n\r\n  /**\r\n   * Project glyphImages.\r\n   * @member {Array.<IGlyphImage>} glyphImages\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.glyphImages = $util.emptyArray\r\n\r\n  /**\r\n   * Project style.\r\n   * @member {IStyle|null|undefined} style\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.style = null\r\n\r\n  /**\r\n   * Project layout.\r\n   * @member {ILayout|null|undefined} layout\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.layout = null\r\n\r\n  /**\r\n   * Project globalAdjustMetric.\r\n   * @member {IMetric|null|undefined} globalAdjustMetric\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.globalAdjustMetric = null\r\n\r\n  /**\r\n   * Project ui.\r\n   * @member {IUi|null|undefined} ui\r\n   * @memberof Project\r\n   * @instance\r\n   */\r\n  Project.prototype.ui = null\r\n\r\n  /**\r\n   * Creates a new Project instance using the specified properties.\r\n   * @function create\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject=} [properties] Properties to set\r\n   * @returns {Project} Project instance\r\n   */\r\n  Project.create = function create(properties) {\r\n    return new Project(properties)\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encode = function encode(message, writer) {\r\n    if (!writer) writer = $Writer.create()\r\n    if (message.id != null && Object.hasOwnProperty.call(message, 'id'))\r\n      writer.uint32(/* id 1, wireType 0 =*/ 8).int64(message.id)\r\n    if (message.name != null && Object.hasOwnProperty.call(message, 'name'))\r\n      writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name)\r\n    if (message.text != null && Object.hasOwnProperty.call(message, 'text'))\r\n      writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.text)\r\n    if (message.glyphs != null && Object.hasOwnProperty.call(message, 'glyphs'))\r\n      for (\r\n        let keys = Object.keys(message.glyphs), i = 0;\r\n        i < keys.length;\r\n        ++i\r\n      ) {\r\n        writer\r\n          .uint32(/* id 4, wireType 2 =*/ 34)\r\n          .fork()\r\n          .uint32(/* id 1, wireType 2 =*/ 10)\r\n          .string(keys[i])\r\n        $root.GlyphFont.encode(\r\n          message.glyphs[keys[i]],\r\n          writer.uint32(/* id 2, wireType 2 =*/ 18).fork(),\r\n        )\r\n          .ldelim()\r\n          .ldelim()\r\n      }\r\n    if (message.glyphImages != null && message.glyphImages.length)\r\n      for (let i = 0; i < message.glyphImages.length; ++i)\r\n        $root.GlyphImage.encode(\r\n          message.glyphImages[i],\r\n          writer.uint32(/* id 5, wireType 2 =*/ 42).fork(),\r\n        ).ldelim()\r\n    if (message.style != null && Object.hasOwnProperty.call(message, 'style'))\r\n      $root.Style.encode(\r\n        message.style,\r\n        writer.uint32(/* id 6, wireType 2 =*/ 50).fork(),\r\n      ).ldelim()\r\n    if (message.layout != null && Object.hasOwnProperty.call(message, 'layout'))\r\n      $root.Layout.encode(\r\n        message.layout,\r\n        writer.uint32(/* id 7, wireType 2 =*/ 58).fork(),\r\n      ).ldelim()\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      Object.hasOwnProperty.call(message, 'globalAdjustMetric')\r\n    )\r\n      $root.Metric.encode(\r\n        message.globalAdjustMetric,\r\n        writer.uint32(/* id 8, wireType 2 =*/ 66).fork(),\r\n      ).ldelim()\r\n    if (message.ui != null && Object.hasOwnProperty.call(message, 'ui'))\r\n      $root.Ui.encode(\r\n        message.ui,\r\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork(),\r\n      ).ldelim()\r\n    return writer\r\n  }\r\n\r\n  /**\r\n   * Encodes the specified Project message, length delimited. Does not implicitly {@link Project.verify|verify} messages.\r\n   * @function encodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {IProject} message Project message or plain object to encode\r\n   * @param {$protobuf.Writer} [writer] Writer to encode to\r\n   * @returns {$protobuf.Writer} Writer\r\n   */\r\n  Project.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim()\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer.\r\n   * @function decode\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @param {number} [length] Message length if known beforehand\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decode = function decode(reader, length) {\r\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader)\r\n    let end = length === undefined ? reader.len : reader.pos + length,\r\n      message = new $root.Project(),\r\n      key,\r\n      value\r\n    while (reader.pos < end) {\r\n      let tag = reader.uint32()\r\n      switch (tag >>> 3) {\r\n        case 1:\r\n          message.id = reader.int64()\r\n          break\r\n        case 2:\r\n          message.name = reader.string()\r\n          break\r\n        case 3:\r\n          message.text = reader.string()\r\n          break\r\n        case 4:\r\n          if (message.glyphs === $util.emptyObject) message.glyphs = {}\r\n          let end2 = reader.uint32() + reader.pos\r\n          key = ''\r\n          value = null\r\n          while (reader.pos < end2) {\r\n            let tag2 = reader.uint32()\r\n            switch (tag2 >>> 3) {\r\n              case 1:\r\n                key = reader.string()\r\n                break\r\n              case 2:\r\n                value = $root.GlyphFont.decode(reader, reader.uint32())\r\n                break\r\n              default:\r\n                reader.skipType(tag2 & 7)\r\n                break\r\n            }\r\n          }\r\n          message.glyphs[key] = value\r\n          break\r\n        case 5:\r\n          if (!(message.glyphImages && message.glyphImages.length))\r\n            message.glyphImages = []\r\n          message.glyphImages.push(\r\n            $root.GlyphImage.decode(reader, reader.uint32()),\r\n          )\r\n          break\r\n        case 6:\r\n          message.style = $root.Style.decode(reader, reader.uint32())\r\n          break\r\n        case 7:\r\n          message.layout = $root.Layout.decode(reader, reader.uint32())\r\n          break\r\n        case 8:\r\n          message.globalAdjustMetric = $root.Metric.decode(\r\n            reader,\r\n            reader.uint32(),\r\n          )\r\n          break\r\n        case 9:\r\n          message.ui = $root.Ui.decode(reader, reader.uint32())\r\n          break\r\n        default:\r\n          reader.skipType(tag & 7)\r\n          break\r\n      }\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Decodes a Project message from the specified reader or buffer, length delimited.\r\n   * @function decodeDelimited\r\n   * @memberof Project\r\n   * @static\r\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n   * @returns {Project} Project\r\n   * @throws {Error} If the payload is not a reader or valid buffer\r\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n   */\r\n  Project.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader)\r\n    return this.decode(reader, reader.uint32())\r\n  }\r\n\r\n  /**\r\n   * Verifies a Project message.\r\n   * @function verify\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} message Plain object to verify\r\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n   */\r\n  Project.verify = function verify(message) {\r\n    if (typeof message !== 'object' || message === null)\r\n      return 'object expected'\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (\r\n        !$util.isInteger(message.id) &&\r\n        !(\r\n          message.id &&\r\n          $util.isInteger(message.id.low) &&\r\n          $util.isInteger(message.id.high)\r\n        )\r\n      )\r\n        return 'id: integer|Long expected'\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      if (!$util.isString(message.name)) return 'name: string expected'\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      if (!$util.isString(message.text)) return 'text: string expected'\r\n    if (message.glyphs != null && message.hasOwnProperty('glyphs')) {\r\n      if (!$util.isObject(message.glyphs)) return 'glyphs: object expected'\r\n      let key = Object.keys(message.glyphs)\r\n      for (let i = 0; i < key.length; ++i) {\r\n        let error = $root.GlyphFont.verify(message.glyphs[key[i]])\r\n        if (error) return 'glyphs.' + error\r\n      }\r\n    }\r\n    if (message.glyphImages != null && message.hasOwnProperty('glyphImages')) {\r\n      if (!Array.isArray(message.glyphImages))\r\n        return 'glyphImages: array expected'\r\n      for (let i = 0; i < message.glyphImages.length; ++i) {\r\n        let error = $root.GlyphImage.verify(message.glyphImages[i])\r\n        if (error) return 'glyphImages.' + error\r\n      }\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style')) {\r\n      let error = $root.Style.verify(message.style)\r\n      if (error) return 'style.' + error\r\n    }\r\n    if (message.layout != null && message.hasOwnProperty('layout')) {\r\n      let error = $root.Layout.verify(message.layout)\r\n      if (error) return 'layout.' + error\r\n    }\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    ) {\r\n      let error = $root.Metric.verify(message.globalAdjustMetric)\r\n      if (error) return 'globalAdjustMetric.' + error\r\n    }\r\n    if (message.ui != null && message.hasOwnProperty('ui')) {\r\n      let error = $root.Ui.verify(message.ui)\r\n      if (error) return 'ui.' + error\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Creates a Project message from a plain object. Also converts values to their respective internal types.\r\n   * @function fromObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Object.<string,*>} object Plain object\r\n   * @returns {Project} Project\r\n   */\r\n  Project.fromObject = function fromObject(object) {\r\n    if (object instanceof $root.Project) return object\r\n    let message = new $root.Project()\r\n    if (object.id != null)\r\n      if ($util.Long)\r\n        (message.id = $util.Long.fromValue(object.id)).unsigned = false\r\n      else if (typeof object.id === 'string')\r\n        message.id = parseInt(object.id, 10)\r\n      else if (typeof object.id === 'number') message.id = object.id\r\n      else if (typeof object.id === 'object')\r\n        message.id = new $util.LongBits(\r\n          object.id.low >>> 0,\r\n          object.id.high >>> 0,\r\n        ).toNumber()\r\n    if (object.name != null) message.name = String(object.name)\r\n    if (object.text != null) message.text = String(object.text)\r\n    if (object.glyphs) {\r\n      if (typeof object.glyphs !== 'object')\r\n        throw TypeError('.Project.glyphs: object expected')\r\n      message.glyphs = {}\r\n      for (let keys = Object.keys(object.glyphs), i = 0; i < keys.length; ++i) {\r\n        if (typeof object.glyphs[keys[i]] !== 'object')\r\n          throw TypeError('.Project.glyphs: object expected')\r\n        message.glyphs[keys[i]] = $root.GlyphFont.fromObject(\r\n          object.glyphs[keys[i]],\r\n        )\r\n      }\r\n    }\r\n    if (object.glyphImages) {\r\n      if (!Array.isArray(object.glyphImages))\r\n        throw TypeError('.Project.glyphImages: array expected')\r\n      message.glyphImages = []\r\n      for (let i = 0; i < object.glyphImages.length; ++i) {\r\n        if (typeof object.glyphImages[i] !== 'object')\r\n          throw TypeError('.Project.glyphImages: object expected')\r\n        message.glyphImages[i] = $root.GlyphImage.fromObject(\r\n          object.glyphImages[i],\r\n        )\r\n      }\r\n    }\r\n    if (object.style != null) {\r\n      if (typeof object.style !== 'object')\r\n        throw TypeError('.Project.style: object expected')\r\n      message.style = $root.Style.fromObject(object.style)\r\n    }\r\n    if (object.layout != null) {\r\n      if (typeof object.layout !== 'object')\r\n        throw TypeError('.Project.layout: object expected')\r\n      message.layout = $root.Layout.fromObject(object.layout)\r\n    }\r\n    if (object.globalAdjustMetric != null) {\r\n      if (typeof object.globalAdjustMetric !== 'object')\r\n        throw TypeError('.Project.globalAdjustMetric: object expected')\r\n      message.globalAdjustMetric = $root.Metric.fromObject(\r\n        object.globalAdjustMetric,\r\n      )\r\n    }\r\n    if (object.ui != null) {\r\n      if (typeof object.ui !== 'object')\r\n        throw TypeError('.Project.ui: object expected')\r\n      message.ui = $root.Ui.fromObject(object.ui)\r\n    }\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Creates a plain object from a Project message. Also converts values to other types if specified.\r\n   * @function toObject\r\n   * @memberof Project\r\n   * @static\r\n   * @param {Project} message Project\r\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n   * @returns {Object.<string,*>} Plain object\r\n   */\r\n  Project.toObject = function toObject(message, options) {\r\n    if (!options) options = {}\r\n    let object = {}\r\n    if (options.arrays || options.defaults) object.glyphImages = []\r\n    if (options.objects || options.defaults) object.glyphs = {}\r\n    if (options.defaults) {\r\n      if ($util.Long) {\r\n        let long = new $util.Long(0, 0, false)\r\n        object.id =\r\n          options.longs === String\r\n            ? long.toString()\r\n            : options.longs === Number\r\n            ? long.toNumber()\r\n            : long\r\n      } else object.id = options.longs === String ? '0' : 0\r\n      object.name = ''\r\n      object.text = ''\r\n      object.style = null\r\n      object.layout = null\r\n      object.globalAdjustMetric = null\r\n      object.ui = null\r\n    }\r\n    if (message.id != null && message.hasOwnProperty('id'))\r\n      if (typeof message.id === 'number')\r\n        object.id = options.longs === String ? String(message.id) : message.id\r\n      else\r\n        object.id =\r\n          options.longs === String\r\n            ? $util.Long.prototype.toString.call(message.id)\r\n            : options.longs === Number\r\n            ? new $util.LongBits(\r\n                message.id.low >>> 0,\r\n                message.id.high >>> 0,\r\n              ).toNumber()\r\n            : message.id\r\n    if (message.name != null && message.hasOwnProperty('name'))\r\n      object.name = message.name\r\n    if (message.text != null && message.hasOwnProperty('text'))\r\n      object.text = message.text\r\n    let keys2\r\n    if (message.glyphs && (keys2 = Object.keys(message.glyphs)).length) {\r\n      object.glyphs = {}\r\n      for (let j = 0; j < keys2.length; ++j)\r\n        object.glyphs[keys2[j]] = $root.GlyphFont.toObject(\r\n          message.glyphs[keys2[j]],\r\n          options,\r\n        )\r\n    }\r\n    if (message.glyphImages && message.glyphImages.length) {\r\n      object.glyphImages = []\r\n      for (let j = 0; j < message.glyphImages.length; ++j)\r\n        object.glyphImages[j] = $root.GlyphImage.toObject(\r\n          message.glyphImages[j],\r\n          options,\r\n        )\r\n    }\r\n    if (message.style != null && message.hasOwnProperty('style'))\r\n      object.style = $root.Style.toObject(message.style, options)\r\n    if (message.layout != null && message.hasOwnProperty('layout'))\r\n      object.layout = $root.Layout.toObject(message.layout, options)\r\n    if (\r\n      message.globalAdjustMetric != null &&\r\n      message.hasOwnProperty('globalAdjustMetric')\r\n    )\r\n      object.globalAdjustMetric = $root.Metric.toObject(\r\n        message.globalAdjustMetric,\r\n        options,\r\n      )\r\n    if (message.ui != null && message.hasOwnProperty('ui'))\r\n      object.ui = $root.Ui.toObject(message.ui, options)\r\n    return object\r\n  }\r\n\r\n  /**\r\n   * Converts this Project to JSON.\r\n   * @function toJSON\r\n   * @memberof Project\r\n   * @instance\r\n   * @returns {Object.<string,*>} JSON object\r\n   */\r\n  Project.prototype.toJSON = function toJSON() {\r\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions)\r\n  }\r\n\r\n  return Project\r\n})())\r\n\r\nexport { $root as default }\r\n","import * as proto1000000 from './1.0.0'\r\nimport * as proto1000001 from './1.0.1'\r\nimport * as proto1000002 from './1.0.2'\r\n\r\nexport interface OldProto {\r\n  1000000: typeof proto1000000\r\n  1000001: typeof proto1000001\r\n  1000002: typeof proto1000002\r\n}\r\n\r\nexport const oldProto: OldProto = {\r\n  1000000: proto1000000,\r\n  1000001: proto1000001,\r\n  1000002: proto1000002,\r\n}\r\n\r\nexport { default as encodeProject } from './encodeProject'\r\nexport { default as toOriginBuffer } from './toOriginBuffer'\r\nexport * from './project'\r\nexport { default } from './project'\r\n","import { IProject, oldProto, OldProto } from './proto'\r\n\r\ntype OldKey = keyof OldProto\r\n\r\nconst verions: OldKey[] = Object.keys(oldProto)\r\n  .map((verion) => `${Number(verion)}` as unknown as OldKey)\r\n  .sort()\r\n\r\nfunction updateOldProject(project: IProject, version: number): IProject {\r\n  verions.forEach((v) => {\r\n    if (version <= v && oldProto[v]) oldProto[v].updateToNext(project)\r\n  })\r\n  return project\r\n}\r\n\r\nexport default updateOldProject\r\n","import { Project } from 'src/store'\r\nimport { encodeProject } from './proto'\r\n\r\nimport prefix from './prefix'\r\n\r\nexport default function encode(project: Project): Uint8Array {\r\n  const perfixBuffer = prefix()\r\n  const projectBuffer = encodeProject(project)\r\n\r\n  const buffer = new Uint8Array(\r\n    perfixBuffer.byteLength + projectBuffer.byteLength,\r\n  )\r\n\r\n  buffer.set(perfixBuffer, 0)\r\n  buffer.set(projectBuffer, perfixBuffer.byteLength)\r\n\r\n  return buffer\r\n}\r\n","import { Project } from 'src/store'\r\nimport { Project as ProjectProto, IProject } from './project'\r\n\r\nexport default function saveProject(project: Project): Uint8Array {\r\n  // font\r\n  if (project.style.font.fonts && project.style.font.fonts.length) {\r\n    project.style.font.fonts.forEach(\r\n      (fontResource) => (fontResource.font = new Uint8Array(fontResource.font)),\r\n    )\r\n  }\r\n\r\n  // images\r\n  project.glyphImages.forEach((glyphImage) => {\r\n    if (glyphImage.buffer) glyphImage.buffer = new Uint8Array(glyphImage.buffer)\r\n  })\r\n\r\n  // fill\r\n  if (project.style.fill.patternTexture.buffer) {\r\n    project.style.fill.patternTexture.buffer = new Uint8Array(\r\n      project.style.fill.patternTexture.buffer,\r\n    )\r\n  }\r\n\r\n  // stroke\r\n  if (project.style.stroke.patternTexture.buffer) {\r\n    project.style.stroke.patternTexture.buffer = new Uint8Array(\r\n      project.style.stroke.patternTexture.buffer,\r\n    )\r\n  }\r\n\r\n  return ProjectProto.encode(\r\n    ProjectProto.create(project as unknown as IProject),\r\n  ).finish()\r\n}\r\n","import { ConversionFileItem } from '../type'\r\nimport check from './check'\r\nimport decode from './decode'\r\n\r\nconst sbfFile: ConversionFileItem = {\r\n  ext: '.sbf',\r\n  check,\r\n  decode,\r\n}\r\n\r\nexport { default as encode } from './encode'\r\nexport default sbfFile\r\n","import { DecodeProjectFunction } from '../type'\r\nimport {\r\n  Project as ProjectProto,\r\n  oldProto,\r\n  OldProto,\r\n  toOriginBuffer,\r\n} from './proto'\r\nimport prefix from './prefix'\r\nimport getVersion from './getVersion'\r\nimport updateOldProject from './updateOldProject'\r\n\r\nconst decode: DecodeProjectFunction = (buffer) => {\r\n  if (!(buffer instanceof ArrayBuffer)) throw new Error('unknow file')\r\n\r\n  const version = getVersion(buffer)\r\n\r\n  if (version === 0) throw new Error('unknow file')\r\n\r\n  const perfixBuffer = prefix()\r\n  const u8 = new Uint8Array(buffer)\r\n  const filePrefix = u8.slice(0, perfixBuffer.byteLength)\r\n\r\n  const decodeProto =\r\n    oldProto[version as keyof OldProto]?.Project || ProjectProto\r\n  console.log(oldProto, version, decodeProto)\r\n  const project = decodeProto.decode(u8.slice(filePrefix.byteLength))\r\n  console.log(project)\r\n\r\n  return toOriginBuffer(updateOldProject(project, version))\r\n}\r\n\r\nexport default decode\r\n","import { Project } from 'src/store'\r\nimport { IProject } from './project'\r\n\r\nexport default function toOriginBuffer(protoProject: IProject): Project {\r\n  const project = protoProject as unknown as Project\r\n  const map = new Map()\r\n\r\n  // font\r\n  if (protoProject?.style?.font?.fonts) {\r\n    protoProject.style.font.fonts.forEach((fontResource, idx) => {\r\n      if (fontResource.font)\r\n        project.style.font.fonts[idx].font = fontResource.font.slice().buffer\r\n    })\r\n  }\r\n\r\n  // images\r\n  if (protoProject?.glyphImages) {\r\n    protoProject.glyphImages.forEach((glyphImage, idx) => {\r\n      if (glyphImage.buffer) {\r\n        project.glyphImages[idx].buffer = glyphImage.buffer.slice().buffer\r\n      }\r\n      if (glyphImage.kerning) {\r\n        const imgKerning = new Map()\r\n        Object.keys(glyphImage.kerning).forEach((key) => {\r\n          if (glyphImage && glyphImage.kerning && glyphImage.kerning[key])\r\n            imgKerning.set(key, glyphImage.kerning[key] || 0)\r\n        })\r\n        glyphImage.kerning = imgKerning as {}\r\n      }\r\n    })\r\n  }\r\n\r\n  if (protoProject?.glyphs) {\r\n    Object.keys(protoProject.glyphs).forEach((k) => {\r\n      if (protoProject && protoProject.glyphs && protoProject.glyphs[k]) {\r\n        const gl = protoProject.glyphs[k]\r\n        const glyphKerning = new Map()\r\n        if (gl && gl.kerning) {\r\n          Object.keys(gl.kerning).forEach((key) => {\r\n            if (gl.kerning) glyphKerning.set(key, gl.kerning[key] || 0)\r\n          })\r\n        }\r\n        map.set(k, { ...gl, kerning: glyphKerning })\r\n      }\r\n    })\r\n    project.glyphs = map\r\n  }\r\n\r\n  // fill\r\n  if (protoProject?.style?.fill?.patternTexture?.buffer) {\r\n    project.style.fill.patternTexture.buffer =\r\n      protoProject.style.fill.patternTexture.buffer.slice().buffer\r\n  }\r\n\r\n  // stroke\r\n  if (protoProject?.style?.stroke?.patternTexture?.buffer) {\r\n    project.style.stroke.patternTexture.buffer =\r\n      protoProject.style.stroke.patternTexture.buffer.slice().buffer\r\n  }\r\n\r\n  return project\r\n}\r\n","import Ajv, { JTDSchemaType } from 'ajv/dist/jtd'\r\nimport glow, { GlowData } from './glow'\r\nimport fill, { FillData } from './fill'\r\nimport settings, { SettingsData } from './settings'\r\nimport shadow, { ShadowData } from './shadow'\r\nimport stroke, { StrokeData } from './stroke'\r\nimport background, { BackgroundData } from './background'\r\nimport bevel, { BevelData } from './bevel'\r\nimport glyphs, { GlyphsData } from './glyphs'\r\nimport font, { FontData } from './font'\r\n\r\nconst ajv = new Ajv()\r\n\r\nexport interface LitteraData {\r\n  glow: GlowData\r\n  fill: FillData\r\n  settings: SettingsData\r\n  shadow: ShadowData\r\n  stroke: StrokeData\r\n  background: BackgroundData\r\n  bevel: BevelData\r\n  glyphs: GlyphsData\r\n  font: FontData\r\n  fallbackfont?: string\r\n}\r\n\r\nconst schema: JTDSchemaType<LitteraData> = {\r\n  properties: {\r\n    glow,\r\n    fill,\r\n    settings,\r\n    shadow,\r\n    stroke,\r\n    background,\r\n    bevel,\r\n    glyphs,\r\n    font,\r\n  },\r\n  optionalProperties: {\r\n    fallbackfont: { type: 'string' },\r\n  },\r\n}\r\n\r\nexport * from './glow'\r\nexport * from './fill'\r\nexport * from './settings'\r\nexport * from './shadow'\r\nexport * from './stroke'\r\nexport * from './background'\r\nexport * from './bevel'\r\nexport * from './glyphs'\r\nexport * from './font'\r\n\r\nexport const validate = ajv.compile(schema)\r\n\r\nexport default validate\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface GlowData {\r\n  quality: number\r\n  colors: number[]\r\n  glowEnabled: boolean\r\n  alphas: number[]\r\n  ratios: number[]\r\n  blurX: number\r\n  angle: number\r\n  blurY: number\r\n  strength: number\r\n  distance: number\r\n}\r\n\r\nconst glow: JTDSchemaType<GlowData> = {\r\n  properties: {\r\n    quality: { type: 'float32' },\r\n    colors: { elements: { type: 'float32' } },\r\n    glowEnabled: { type: 'boolean' },\r\n    alphas: { elements: { type: 'float32' } },\r\n    ratios: { elements: { type: 'float32' } },\r\n    blurX: { type: 'float32' },\r\n    angle: { type: 'float32' },\r\n    blurY: { type: 'float32' },\r\n    strength: { type: 'float32' },\r\n    distance: { type: 'float32' },\r\n  },\r\n}\r\n\r\nexport default glow\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface FillData {\r\n  gradientAlphas: number[]\r\n  yOffset: number\r\n  gradientType: 'linear' | 'radial'\r\n  gradientRotation: number\r\n  fillType: 'gradientFill' | 'textureFill'\r\n  textureScale: number\r\n  distanceFieldEnabled: boolean\r\n  distanceFieldColor: number\r\n  gradientColors: number[]\r\n  distanceFieldDownscale: number\r\n  distanceFieldSpread: number\r\n  distanceFieldType: 'Type 1' | 'Type 2'\r\n  gradientRatios: number[]\r\n  xOffset: number\r\n  texture?: string\r\n}\r\n\r\nconst fill: JTDSchemaType<FillData> = {\r\n  properties: {\r\n    gradientAlphas: { elements: { type: 'float32' } },\r\n    yOffset: { type: 'float32' },\r\n    gradientType: { enum: ['linear', 'radial'] },\r\n    gradientRotation: { type: 'float32' },\r\n    fillType: { enum: ['gradientFill', 'textureFill'] },\r\n    textureScale: { type: 'float32' },\r\n    distanceFieldEnabled: { type: 'boolean' },\r\n    distanceFieldColor: { type: 'float32' },\r\n    gradientColors: { elements: { type: 'float32' } },\r\n    distanceFieldDownscale: { type: 'float32' },\r\n    distanceFieldSpread: { type: 'float32' },\r\n    distanceFieldType: { enum: ['Type 1', 'Type 2'] },\r\n    gradientRatios: { elements: { type: 'float32' } },\r\n    xOffset: { type: 'float32' },\r\n  },\r\n  optionalProperties: {\r\n    texture: { type: 'string' },\r\n  },\r\n}\r\n\r\nexport default fill\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface SettingsData {\r\n  postfixes: string\r\n  filename: string\r\n  scalings: string\r\n}\r\n\r\nconst settings: JTDSchemaType<SettingsData> = {\r\n  properties: {\r\n    postfixes: { type: 'string' },\r\n    filename: { type: 'string' },\r\n    scalings: { type: 'string' },\r\n  },\r\n}\r\n\r\nexport default settings\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface ShadowData {\r\n  quality: number\r\n  color: number\r\n  strength: number\r\n  blurX: number\r\n  angle: number\r\n  blurY: number\r\n  shadowEnabled: boolean\r\n  alpha: number\r\n  distance: number\r\n}\r\n\r\nconst shadow: JTDSchemaType<ShadowData> = {\r\n  properties: {\r\n    quality: { type: 'float32' },\r\n    color: { type: 'float32' },\r\n    strength: { type: 'float32' },\r\n    blurX: { type: 'float32' },\r\n    angle: { type: 'float32' },\r\n    blurY: { type: 'float32' },\r\n    shadowEnabled: { type: 'boolean' },\r\n    alpha: { type: 'float32' },\r\n    distance: { type: 'float32' },\r\n  },\r\n}\r\n\r\nexport default shadow\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface StrokeData {\r\n  gradientAlphas: number[]\r\n  yOffset: number\r\n  gradientType: 'linear' | 'radial'\r\n  gradientRotation: number\r\n  fillType: 'gradientFill' | 'textureFill'\r\n  pixelHinting: boolean\r\n  textureScale: number\r\n  gradientColors: number[]\r\n  strokeEnabled: boolean\r\n  miterLimit: number\r\n  jointStyle: 'miter' | 'bevel' | 'round'\r\n  size: number\r\n  gradientRatios: number[]\r\n  xOffset: number\r\n  texture?: string\r\n}\r\n\r\nconst stroke: JTDSchemaType<StrokeData> = {\r\n  properties: {\r\n    gradientAlphas: { elements: { type: 'float32' } },\r\n    yOffset: { type: 'float32' },\r\n    gradientType: { enum: ['linear', 'radial'] },\r\n    gradientRotation: { type: 'float32' },\r\n    fillType: { enum: ['gradientFill', 'textureFill'] },\r\n    pixelHinting: { type: 'boolean' },\r\n    textureScale: { type: 'float32' },\r\n    gradientColors: { elements: { type: 'float32' } },\r\n    strokeEnabled: { type: 'boolean' },\r\n    miterLimit: { type: 'float32' },\r\n    jointStyle: { enum: ['miter', 'bevel', 'round'] },\r\n    size: { type: 'float32' },\r\n    gradientRatios: { elements: { type: 'float32' } },\r\n    xOffset: { type: 'float32' },\r\n  },\r\n  optionalProperties: {\r\n    texture: { type: 'string' },\r\n  },\r\n}\r\n\r\nexport default stroke\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface BackgroundData {\r\n  color: number\r\n  alpha: number\r\n}\r\n\r\nconst background: JTDSchemaType<BackgroundData> = {\r\n  properties: {\r\n    color: { type: 'float32' },\r\n    alpha: { type: 'float32' },\r\n  },\r\n}\r\n\r\nexport default background\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface BevelData {\r\n  bevelEnabled: boolean\r\n  highlightColor: number\r\n  highlightAlpha: number\r\n  quality: number\r\n  angle: number\r\n  shadowColor: number\r\n  shadowAlpha: number\r\n  blurX: number\r\n  blurY: number\r\n  type: 'inner' | 'outer' | 'full'\r\n  strength: number\r\n  distance: number\r\n}\r\n\r\nconst bevel: JTDSchemaType<BevelData> = {\r\n  properties: {\r\n    bevelEnabled: { type: 'boolean' },\r\n    highlightColor: { type: 'float32' },\r\n    highlightAlpha: { type: 'float32' },\r\n    quality: { type: 'float32' },\r\n    angle: { type: 'float32' },\r\n    shadowColor: { type: 'float32' },\r\n    shadowAlpha: { type: 'float32' },\r\n    blurX: { type: 'float32' },\r\n    blurY: { type: 'float32' },\r\n    type: { enum: ['inner', 'outer', 'full'] },\r\n    strength: { type: 'float32' },\r\n    distance: { type: 'float32' },\r\n  },\r\n}\r\n\r\nexport default bevel\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface GlyphsData {\r\n  glyphs: string\r\n  powerOfTwo: boolean\r\n  canvasHeight: string\r\n  padding: number\r\n  packMethod: number\r\n  canvasWidth: string\r\n  roundValues: boolean\r\n  descriptionFormat: number\r\n}\r\n\r\nconst glyphs: JTDSchemaType<GlyphsData> = {\r\n  properties: {\r\n    glyphs: { type: 'string' },\r\n    powerOfTwo: { type: 'boolean' },\r\n    canvasHeight: { type: 'string' },\r\n    padding: { type: 'float32' },\r\n    packMethod: { type: 'float32' },\r\n    canvasWidth: { type: 'string' },\r\n    roundValues: { type: 'boolean' },\r\n    descriptionFormat: { type: 'float32' },\r\n  },\r\n}\r\n\r\nexport default glyphs\r\n","import { JTDSchemaType } from 'ajv/dist/jtd'\r\n\r\nexport interface FontData {\r\n  size: number\r\n  data?: string\r\n  spacing: number\r\n}\r\n\r\nconst font: JTDSchemaType<FontData> = {\r\n  properties: {\r\n    size: { type: 'float32' },\r\n    spacing: { type: 'float32' },\r\n  },\r\n  optionalProperties: {\r\n    data: { type: 'string' },\r\n  },\r\n}\r\n\r\nexport default font\r\n","import * as Sentry from '@sentry/react'\r\nimport validate from './schema'\r\nimport { CheckFunction } from '../type'\r\n\r\nconst check: CheckFunction = (litteraStr) => {\r\n  let litteraData\r\n\r\n  if (typeof litteraStr === 'string') {\r\n    try {\r\n      litteraData = JSON.parse(litteraStr)\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (typeof litteraData !== 'object') return false\r\n\r\n  const isLittera = validate(litteraData)\r\n\r\n  if (!isLittera) {\r\n    if (process.env.NODE_ENV === 'development')\r\n      console.log(isLittera, validate.errors)\r\n\r\n    validate.errors?.forEach((item) => {\r\n      Sentry.addBreadcrumb({\r\n        category: 'littera',\r\n        message: 'Littera validate error',\r\n        level: Sentry.Severity.Info,\r\n        data: item,\r\n      })\r\n    })\r\n    Sentry.captureMessage('Littera validate error')\r\n  }\r\n\r\n  return isLittera\r\n}\r\n\r\nexport default check\r\n","import Color from 'color'\r\nimport {\r\n  Font,\r\n  Style,\r\n  Layout,\r\n  Project,\r\n  FillType,\r\n  Gradient,\r\n  GlyphFont,\r\n  FontResource,\r\n  GradientType,\r\n  PatternTexture,\r\n  FontStyleConfig,\r\n  ShadowStyleConfig,\r\n  StrokeStyleConfig,\r\n} from 'src/store'\r\nimport base64ToArrayBuffer from 'src/utils/base64ToArrayBuffer'\r\nimport { DecodeProjectFunction } from '../type'\r\nimport { LitteraData, FillData, StrokeData } from './schema'\r\nimport check from './check'\r\n\r\nfunction transformFill(litteraFill: FillData | StrokeData): FontStyleConfig {\r\n  const fill = {} as FontStyleConfig\r\n  if (litteraFill.fillType === 'gradientFill') {\r\n    // solid color\r\n    if (litteraFill.gradientColors.length < 2) {\r\n      fill.type = FillType.SOLID\r\n      fill.color = Color(litteraFill.gradientColors[0])\r\n        .alpha(litteraFill.gradientAlphas[0])\r\n        .hex()\r\n    } else {\r\n      fill.type = FillType.GRADIENT\r\n      fill.gradient = {} as Gradient\r\n      fill.gradient.palette = []\r\n      fill.gradient.type =\r\n        litteraFill.gradientType === 'radial'\r\n          ? GradientType.RADIAL\r\n          : GradientType.LINEAR\r\n\r\n      litteraFill.gradientColors.forEach((color, idx) => {\r\n        fill.gradient.palette.push({\r\n          id: idx + 1,\r\n          color: Color(color).alpha(litteraFill.gradientAlphas[idx]).hex(),\r\n          offset: litteraFill.gradientRatios[idx] / 255,\r\n        })\r\n      })\r\n      fill.gradient.angle = litteraFill.gradientRotation\r\n    }\r\n  } else {\r\n    fill.patternTexture = {\r\n      scale: litteraFill.textureScale,\r\n    } as PatternTexture\r\n\r\n    if (litteraFill.texture) {\r\n      fill.patternTexture.buffer = base64ToArrayBuffer(litteraFill.texture)\r\n    }\r\n  }\r\n\r\n  return fill\r\n}\r\n\r\nconst decode: DecodeProjectFunction = (litteraData) => {\r\n  if (!check(litteraData)) throw new Error('unknow file')\r\n\r\n  if (typeof litteraData === 'string') litteraData = JSON.parse(litteraData)\r\n\r\n  const data = litteraData as LitteraData\r\n  const project: Partial<Project> = {}\r\n\r\n  project.text = data.glyphs.glyphs\r\n\r\n  project.glyphs = new Map()\r\n\r\n  data.glyphs.glyphs\r\n    .split('')\r\n    .forEach((letter) => project.glyphs?.set(letter, { letter } as GlyphFont))\r\n\r\n  /**\r\n   * style\r\n   */\r\n\r\n  /**\r\n   * style.font\r\n   */\r\n  //#region style.font\r\n  const font = {} as Font\r\n  font.size = data.font.size\r\n\r\n  if (data.font.data) {\r\n    font.fonts = []\r\n    font.fonts.push({\r\n      font: base64ToArrayBuffer(data.font.data),\r\n    } as FontResource)\r\n    if (data.fallbackfont) {\r\n      font.fonts.push({\r\n        font: base64ToArrayBuffer(data.fallbackfont),\r\n      } as FontResource)\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  /**\r\n   * style.fill\r\n   */\r\n  //#region style.fill\r\n  const fill = transformFill(data.fill) as FontStyleConfig\r\n  //#endregion\r\n\r\n  /**\r\n   * style.stroke\r\n   */\r\n  //#region style.stroke\r\n  const stroke = {} as StrokeStyleConfig\r\n  stroke.width = data.stroke.size\r\n  stroke.lineJoin = data.stroke.jointStyle\r\n  Object.assign(stroke, transformFill(data.stroke))\r\n  //#endregion\r\n\r\n  /**\r\n   * style.shadow\r\n   */\r\n  //#region style.shadow\r\n  const shadow = {} as ShadowStyleConfig\r\n  shadow.color = Color(data.shadow.color).alpha(data.shadow.alpha).hex()\r\n  shadow.blur = data.shadow.quality + data.shadow.blurX - data.shadow.strength\r\n  shadow.offsetX = Math.round(\r\n    Math.cos((data.shadow.angle * Math.PI) / 180) * data.shadow.distance,\r\n  )\r\n  shadow.offsetY = Math.round(\r\n    Math.sin((data.shadow.angle * Math.PI) / 180) * data.shadow.distance,\r\n  )\r\n  //#endregion\r\n\r\n  project.style = {\r\n    font,\r\n    fill,\r\n    useStroke: data.stroke.strokeEnabled,\r\n    stroke,\r\n    useShadow: data.shadow.shadowEnabled,\r\n    shadow,\r\n  } as Style\r\n\r\n  /**\r\n   * layout\r\n   */\r\n  project.layout = {} as Layout\r\n  project.layout.padding = data.glyphs.padding\r\n  if (!isNaN(Number(data.glyphs.canvasWidth))) {\r\n    project.layout.width = Number(data.glyphs.canvasWidth)\r\n  }\r\n  if (!isNaN(Number(data.glyphs.canvasHeight))) {\r\n    project.layout.width = Number(data.glyphs.canvasHeight)\r\n  }\r\n  if (project.layout.width && project.layout.height) {\r\n    project.layout.auto = false\r\n    project.layout.fixedSize = true\r\n  }\r\n\r\n  return project\r\n}\r\n\r\nexport default decode\r\n","import { ConversionFileItem } from './type'\r\nimport sbf from './sbf'\r\nimport littera from './littera'\r\n\r\nconst conversionList: ConversionFileItem[] = [sbf, littera]\r\n\r\nexport default conversionList\r\n","import { ConversionFileItem } from '../type'\r\nimport check from './check'\r\nimport decode from './decode'\r\n\r\nconst litteraFile: ConversionFileItem = {\r\n  ext: '.ltr',\r\n  check,\r\n  decode,\r\n}\r\n\r\nexport default litteraFile\r\n","import conversionList from './types'\r\nexport { encode } from './types/sbf'\r\n\r\nfunction conversion(inputFile: unknown) {\r\n  const conversion = conversionList.find((item) => item.check(inputFile))\r\n  if (!conversion) throw new Error('unknow file')\r\n  return conversion.decode(inputFile)\r\n}\r\n\r\nexport default conversion\r\n","import React, { FunctionComponent, useRef } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { useSnackbar } from 'notistack'\r\nimport * as Sentry from '@sentry/react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { useWorkspace } from 'src/store/hooks'\r\n\r\nimport readFile from 'src/utils/readFile'\r\nimport conversion from 'src/file/conversion'\r\n\r\ninterface ButtonOpenProps {\r\n  className?: string\r\n}\r\n\r\nconst ButtonOpen: FunctionComponent<ButtonOpenProps> = (\r\n  props: ButtonOpenProps,\r\n) => {\r\n  const { className } = props\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const worckSpace = useWorkspace()\r\n  const labelRef = useRef<HTMLLabelElement>(null)\r\n  const { addProject } = worckSpace\r\n\r\n  const handleLoad = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target?.files || !e.target.files[0]) return\r\n    const file = e.target.files[0]\r\n    const isText = /\\.ltr$/.test(file.name)\r\n\r\n    readFile(file, isText).then((buffer) => {\r\n      try {\r\n        const project = conversion(buffer)\r\n        if (!project.name) project.name = file.name\r\n        addProject(project)\r\n      } catch (e) {\r\n        console.log(e)\r\n        Sentry.captureException(e)\r\n        enqueueSnackbar((e as Error).toString(), { variant: 'error' })\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className={className}\r\n      title='Open Project (⌘ + O)'\r\n      component='label'\r\n      ref={labelRef}\r\n    >\r\n      Open\r\n      <input type='file' onChange={handleLoad} accept='.sbf,.ltr' hidden />\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default observer(ButtonOpen)\r\n","import React, { useEffect, FunctionComponent, useCallback } from 'react'\r\nimport { toJS } from 'mobx'\r\nimport hotkeys from 'hotkeys-js'\r\nimport { saveAs } from 'file-saver'\r\nimport { observer } from 'mobx-react'\r\nimport { useSnackbar } from 'notistack'\r\nimport * as Sentry from '@sentry/react'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport { encode } from 'src/file/conversion'\r\nimport { useWorkspace } from 'src/store/hooks'\r\n\r\ninterface ButtonSaveProps {\r\n  className?: string\r\n}\r\n\r\nconst ButtonSave: FunctionComponent<ButtonSaveProps> = (\r\n  props: ButtonSaveProps,\r\n) => {\r\n  const { className } = props\r\n\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const worckSpace = useWorkspace()\r\n  const { currentProject: project } = worckSpace\r\n\r\n  const handleSaveProject = useCallback(\r\n    (e: { preventDefault(): void }) => {\r\n      e.preventDefault()\r\n      try {\r\n        const buffer = encode(toJS(project))\r\n        saveAs(new Blob([buffer]), `${project.name}.sbf`)\r\n      } catch (e) {\r\n        Sentry.captureException(e)\r\n        enqueueSnackbar((e as Error).message)\r\n      }\r\n    },\r\n    [enqueueSnackbar, project],\r\n  )\r\n\r\n  useEffect(() => {\r\n    hotkeys.unbind('ctrl+s')\r\n    hotkeys('ctrl+s', handleSaveProject)\r\n    return () => {\r\n      hotkeys.unbind('ctrl+s')\r\n    }\r\n  }, [handleSaveProject])\r\n\r\n  return (\r\n    <Button\r\n      className={className}\r\n      title='Save Project (⌘ + S)'\r\n      onClick={handleSaveProject}\r\n    >\r\n      Save\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default observer(ButtonSave)\r\n","export default function formatStr(\n  str: string,\n  obj: Record<string, unknown>,\n): string {\n  return str.replace(/\\$\\w+\\$/gi, (matchs: string): string => {\n    const returns = obj[matchs.replace(/\\$/g, '')]\n    return `${returns}` === 'undefined' ? '' : `${returns}`\n  })\n}\n","import formatStr from 'src/utils/formatStr'\r\nimport { Output, FontToString } from '../type'\r\n\r\nconst TEMP_INFO = `info face=\"$face$\" size=$size$ bold=$bold$ italic=$italic$ charset=$charset$ unicode=$unicode$ stretchH=$stretchH$ smooth=$smooth$ aa=$aa$ padding=$padding$ spacing=$spacing$\\n`\r\nconst TEMP_COMMON = `common lineHeight=$lineHeight$ base=$base$ scaleW=$scaleW$ scaleH=$scaleH$ pages=$pages$ packed=$packed$\\n`\r\nconst TEMP_PAGE = `page id=$id$ file=\"$file$\"\\n`\r\nconst TEMP_CHARS = `chars count=$count$\\n`\r\nconst TEMP_CHAR = `char id=$id$ x=$x$ y=$y$ width=$width$ height=$height$ xoffset=$xoffset$ yoffset=$yoffset$ xadvance=$xadvance$ page=$page$ chnl=$chnl$\\n`\r\nconst TEMP_KERNINGS = `kernings count=$count$\\n`\r\nconst TEMP_KERNING = `kerning first=$first$ second=$second$ amount=$amount$\\n`\r\n\r\nconst type = 'TEXT'\r\n\r\nconst exts = ['fnt', 'txt']\r\n\r\nconst getString: FontToString = (bmfont) => {\r\n  const { info, common, pages, chars, kernings } = bmfont\r\n\r\n  let str = ''\r\n\r\n  str += formatStr(TEMP_INFO, { ...info, charset: info.charset || '\"\"' })\r\n\r\n  str += formatStr(TEMP_COMMON, common)\r\n\r\n  pages.forEach((p) => {\r\n    str += formatStr(TEMP_PAGE, p)\r\n  })\r\n\r\n  str += formatStr(TEMP_CHARS, chars)\r\n\r\n  chars.list.forEach((char) => {\r\n    str += formatStr(TEMP_CHAR, char)\r\n  })\r\n\r\n  if (kernings.count) {\r\n    str += formatStr(TEMP_KERNINGS, kernings)\r\n\r\n    kernings.list.forEach((kerning) => {\r\n      str += formatStr(TEMP_KERNING, kerning)\r\n    })\r\n  }\r\n\r\n  return str\r\n}\r\n\r\nconst outputConfig: Output = { type, exts, getString }\r\n\r\nexport default outputConfig\r\n","import formatStr from 'src/utils/formatStr'\r\nimport { Output, FontToString } from '../type'\r\n\r\nconst TEMP_INFO = `<info face=\"$face$\" size=\"$size$\" bold=\"$bold$\" italic=\"$italic$\" charset=\"$charset$\" unicode=\"$unicode$\" stretchH=\"$stretchH$\" smooth=\"$smooth$\" aa=\"$aa$\" padding=\"$padding$\" spacing=\"$spacing$\" />`\r\nconst TEMP_COMMON = `<common lineHeight=\"$lineHeight$\" base=\"$base$\" scaleW=\"$scaleW$\" scaleH=\"$scaleH$\" pages=\"$pages$\" packed=\"$packed$\" />`\r\nconst TEMP_PAGE = `<page id=\"$id$\" file=\"$file$\" />`\r\nconst TEMP_CHARS = `<chars count=\"$count$\" />`\r\nconst TEMP_CHAR = `<char id=\"$id$\" x=\"$x$\" y=\"$y$\" width=\"$width$\" height=\"$height$\" xoffset=\"$xoffset$\" yoffset=\"$yoffset$\" xadvance=\"$xadvance$\" page=\"$page$\" chnl=\"$chnl$\" />`\r\nconst TEMP_KERNINGS = `<kernings count=\"$count$\" />`\r\nconst TEMP_KERNING = `<kerning first=\"$first$\" second=\"$second$\" amount=\"$amount$\" />`\r\n\r\nconst type = 'XML'\r\n\r\nconst exts = ['xml', 'fnt']\r\n\r\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\r\nconst getString: FontToString = (bmfont) => {\r\n  const { info, common, pages, chars, kernings } = bmfont\r\n\r\n  const parser = new DOMParser()\r\n  const xmlDOM = document.implementation.createDocument('', 'font', null)\r\n\r\n  const infoDoc = parser.parseFromString(formatStr(TEMP_INFO, info), 'text/xml')\r\n  xmlDOM.documentElement.appendChild(infoDoc.childNodes[0])\r\n\r\n  const commonDoc = parser.parseFromString(\r\n    formatStr(TEMP_COMMON, common),\r\n    'text/xml',\r\n  )\r\n  xmlDOM.documentElement.appendChild(commonDoc.childNodes[0])\r\n\r\n  const pagesDoc = parser.parseFromString(\r\n    `<pages>${pages.map((p) => formatStr(TEMP_PAGE, p))}</pages>`,\r\n    'text/xml',\r\n  )\r\n  xmlDOM.documentElement.appendChild(pagesDoc.childNodes[0])\r\n\r\n  const charsDoc = parser.parseFromString(\r\n    formatStr(TEMP_CHARS, chars),\r\n    'text/xml',\r\n  )\r\n\r\n  chars.list.forEach((char) => {\r\n    const charDoc = parser.parseFromString(\r\n      formatStr(TEMP_CHAR, char),\r\n      'text/xml',\r\n    )\r\n    charsDoc.childNodes[0].appendChild(charDoc.childNodes[0])\r\n  })\r\n\r\n  xmlDOM.documentElement.appendChild(charsDoc.childNodes[0])\r\n\r\n  if (kernings.count) {\r\n    const kerningsDoc = parser.parseFromString(\r\n      formatStr(TEMP_KERNINGS, kernings),\r\n      'text/xml',\r\n    )\r\n\r\n    kernings.list.forEach((kerning) => {\r\n      const kerningDoc = parser.parseFromString(\r\n        formatStr(TEMP_KERNING, kerning),\r\n        'text/xml',\r\n      )\r\n      kerningsDoc.childNodes[0].appendChild(kerningDoc.childNodes[0])\r\n    })\r\n\r\n    xmlDOM.documentElement.appendChild(kerningsDoc.childNodes[0])\r\n  }\r\n\r\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${new XMLSerializer().serializeToString(\r\n    xmlDOM,\r\n  )}`\r\n}\r\n\r\nconst outputConfig: Output = { type, exts, getString }\r\n\r\nexport default outputConfig\r\n","import { Project } from 'src/store'\r\nimport {\r\n  BMFont,\r\n  BMFontInfo,\r\n  BMFontPage,\r\n  BMFontChars,\r\n  BMFontCommon,\r\n  BMFontKernings,\r\n} from './type'\r\n\r\n// http://www.angelcode.com/products/bmfont/doc/file_format.html\r\nexport default function toBmfInfo(project: Project): BMFont {\r\n  const {\r\n    name,\r\n    style,\r\n    layout,\r\n    globalAdjustMetric,\r\n    glyphList,\r\n    ui: { width, height },\r\n  } = project\r\n  const { opentype, size } = style.font\r\n  let fontScale = 1\r\n  if (opentype) {\r\n    fontScale = (1 / opentype.unitsPerEm) * size\r\n  }\r\n  const info: BMFontInfo = {\r\n    face: style.font.mainFamily,\r\n    size: style.font.size,\r\n    bold: 0,\r\n    italic: 0,\r\n    charset: '',\r\n    unicode: 1,\r\n    stretchH: 100,\r\n    smooth: 1,\r\n    aa: 1,\r\n    padding: new Array(4).fill(layout.padding),\r\n    spacing: new Array(2).fill(layout.spacing),\r\n  }\r\n\r\n  const common: BMFontCommon = {\r\n    lineHeight: style.font.size,\r\n    base: style.font.size,\r\n    scaleW: width,\r\n    scaleH: height,\r\n    pages: 1,\r\n    packed: 0,\r\n  }\r\n\r\n  const pages: BMFontPage[] = [\r\n    {\r\n      id: 0,\r\n      file: `${name}.png`,\r\n    },\r\n  ]\r\n\r\n  const chars: BMFontChars = {\r\n    count: glyphList.length,\r\n    list: [],\r\n  }\r\n\r\n  const kernings: BMFontKernings = {\r\n    count: 0,\r\n    list: [],\r\n  }\r\n\r\n  glyphList.forEach((glyph) => {\r\n    const isUnEmpty = !!(glyph.width && glyph.height)\r\n    chars.list.push({\r\n      letter: glyph.letter,\r\n      id: glyph.letter.charCodeAt(0),\r\n      source: glyph.source,\r\n      x: glyph.x,\r\n      y: glyph.y,\r\n      width: isUnEmpty ? glyph.width + layout.padding * 2 : 0,\r\n      height: isUnEmpty ? glyph.height + layout.padding * 2 : 0,\r\n      xoffset:\r\n        globalAdjustMetric.xOffset +\r\n        glyph.adjustMetric.xOffset -\r\n        (isUnEmpty ? glyph.trimOffsetLeft : 0),\r\n      yoffset:\r\n        globalAdjustMetric.yOffset +\r\n        glyph.adjustMetric.yOffset -\r\n        (isUnEmpty ? glyph.trimOffsetTop : 0),\r\n      xadvance:\r\n        Math.ceil(glyph.fontWidth) +\r\n        globalAdjustMetric.xAdvance +\r\n        glyph.adjustMetric.xAdvance,\r\n      page: 0,\r\n      chnl: 15,\r\n    })\r\n    if (opentype) {\r\n      glyphList.forEach(({ letter }) => {\r\n        const amount = Math.round(\r\n          opentype.getKerningValue(\r\n            opentype.charToGlyphIndex(glyph.letter),\r\n            opentype.charToGlyphIndex(letter),\r\n          ) *\r\n            fontScale +\r\n            (glyph.kerning.get(letter) || 0),\r\n        )\r\n        if (amount) {\r\n          kernings.list.push({\r\n            first: glyph.letter.charCodeAt(0),\r\n            second: letter.charCodeAt(0),\r\n            amount,\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      glyph.kerning.forEach((amount, letter) => {\r\n        if (amount)\r\n          kernings.list.push({\r\n            first: glyph.letter.charCodeAt(0),\r\n            second: letter.charCodeAt(0),\r\n            amount,\r\n          })\r\n      })\r\n    }\r\n  })\r\n  kernings.count = kernings.list.length\r\n\r\n  chars.list.sort((a, b) => a.id - b.id)\r\n\r\n  return {\r\n    info,\r\n    common,\r\n    pages,\r\n    chars,\r\n    kernings,\r\n  }\r\n}\r\n","import { ConfigItem } from './type'\r\nimport text from './types/text'\r\nimport xml from './types/xml'\r\n\r\nconst list = [text, xml]\r\n\r\nexport const configList: ConfigItem[] = []\r\n\r\nlist.forEach(({ type, exts, getString }) => {\r\n  exts.forEach((ext) => {\r\n    configList.push({\r\n      id: type + ext,\r\n      ext,\r\n      type,\r\n      getString,\r\n    })\r\n  })\r\n})\r\n\r\nexport * from './type'\r\nexport * from './toBmfInfo'\r\nexport { default as toBmfInfo } from './toBmfInfo'\r\nexport { default as exportFile } from './exportFile'\r\nexport default configList\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  FunctionComponent,\r\n} from 'react'\r\nimport hotkeys from 'hotkeys-js'\r\nimport { observer } from 'mobx-react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\nimport { configList, exportFile } from 'src/file/export'\r\nimport GridInput from 'src/app/components/GridInput/GridInput'\r\n\r\ninterface ButtonExportProps {\r\n  className?: string\r\n}\r\n\r\nconst ButtonExport: FunctionComponent<ButtonExportProps> = (\r\n  props: ButtonExportProps,\r\n) => {\r\n  const { className } = props\r\n  const project = useProject()\r\n  const { name, ui } = project\r\n  const { setShowPreview } = ui\r\n  const [open, setOpen] = useState(false)\r\n  const [list] = useState(configList)\r\n  const [val, setVal] = useState(0)\r\n\r\n  const handleOpen = useCallback(() => {\r\n    setShowPreview(false)\r\n    setOpen(true)\r\n  }, [setShowPreview])\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleChange = (\r\n    e: React.ChangeEvent<{\r\n      name?: string | undefined\r\n      value: unknown\r\n    }>,\r\n  ) => {\r\n    setVal(e.target.value as number)\r\n  }\r\n\r\n  const handleSave = useCallback(() => {\r\n    exportFile(project, list[val])\r\n    handleClose()\r\n  }, [list, project, val])\r\n\r\n  useEffect(() => {\r\n    hotkeys.unbind('ctrl+shift+s,command+shift+s')\r\n    hotkeys('ctrl+shift+s,command+shift+s', handleOpen)\r\n    return () => {\r\n      hotkeys.unbind('ctrl+shift+s,command+shift+s')\r\n    }\r\n  }, [handleOpen])\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        className={className}\r\n        title='Export BitmapFont (⌘⇧ + S)'\r\n        onClick={handleOpen}\r\n      >\r\n        Export\r\n      </Button>\r\n      <Dialog onClose={handleClose} open={open} fullWidth maxWidth='xs'>\r\n        <DialogTitle>Export Config</DialogTitle>\r\n        <DialogContent dividers>\r\n          <GridInput before='Export Type:' childrenWidth={8}>\r\n            <Select displayEmpty value={val} onChange={handleChange}>\r\n              {list.map((item, idx) => (\r\n                <MenuItem value={idx} key={item.id}>\r\n                  {`${name}.${item.ext} (BMFont ${item.type.toUpperCase()})`}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </GridInput>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleSave} color='default'>\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(ButtonExport)\r\n","import JSZip from 'jszip'\r\nimport { saveAs } from 'file-saver'\r\nimport { Project } from 'src/store'\r\nimport toBmfInfo from './toBmfInfo'\r\nimport { ConfigItem } from './type'\r\n\r\nexport default function exportFile(project: Project, config: ConfigItem): void {\r\n  const zip = new JSZip()\r\n  const { packCanvas, name } = project\r\n  const bmfont = toBmfInfo(project)\r\n  const text = config.getString(bmfont)\r\n\r\n  zip.file(`${name}.${config.ext}`, text)\r\n\r\n  if (packCanvas) {\r\n    packCanvas.toBlob((blob) => {\r\n      if (blob) zip.file(`${name}.png`, blob)\r\n      zip\r\n        .generateAsync({ type: 'blob' })\r\n        .then((content) => saveAs(content, `${name}.zip`))\r\n    })\r\n  }\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport Box from '@material-ui/core/Box'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport ButtonNew from './ButtonNew'\r\nimport ButtonOpen from './ButtonOpen'\r\nimport ButtonSave from './ButtonSave'\r\nimport ButtonExport from './ButtonExport'\r\n\r\nconst useStyles = makeStyles(({ zIndex, spacing }) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'relative',\r\n      zIndex: zIndex.appBar,\r\n    },\r\n    appName: {\r\n      fontSize: '1.25rem',\r\n      fontWeight: 'bolder',\r\n      marginRight: spacing(4),\r\n    },\r\n    appNameSup: {\r\n      fontWeight: 'lighter',\r\n      fontSize: '0.5em',\r\n      marginLeft: '0.5rem',\r\n    },\r\n    btn: {\r\n      textTransform: 'none',\r\n    },\r\n  }),\r\n)\r\n\r\nconst TitleBar: FunctionComponent<unknown> = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Box\r\n      className={classes.root}\r\n      bgcolor='background.titleBar'\r\n      paddingX={4}\r\n      display='flex'\r\n      alignItems='center'\r\n    >\r\n      <Typography variant='h1' className={classes.appName}>\r\n        SnowB BMF\r\n        <sup className={classes.appNameSup}>BETA</sup>\r\n      </Typography>\r\n      <Box flex='auto' paddingX={4}>\r\n        <ButtonNew className={classes.btn} />\r\n        <ButtonOpen className={classes.btn} />\r\n        <ButtonSave className={classes.btn} />\r\n        <ButtonExport className={classes.btn} />\r\n      </Box>\r\n      <IconButton\r\n        size='small'\r\n        component='a'\r\n        href='https://github.com/SilenceLeo/snowb-bmf'\r\n        target='_blank'\r\n        title='GitHub'\r\n      >\r\n        <GitHubIcon />\r\n      </IconButton>\r\n    </Box>\r\n  )\r\n}\r\nexport default TitleBar\r\n","import React, { FunctionComponent } from 'react'\nimport { SketchPicker, ColorResult } from 'react-color'\nimport { useTheme, makeStyles, createStyles } from '@material-ui/core/styles'\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper'\n\nexport interface ChildrenProps {\n  open: boolean\n  color: string\n  placement: PopperPlacementType\n  anchorEl: HTMLDivElement | null\n  onChange(color: string): void\n}\n\nconst usePickerStyle = () => {\n  const theme = useTheme()\n  const { palette } = theme\n\n  if (palette.type === 'light') return {}\n\n  return {\n    default: {\n      picker: {\n        background: palette.background.titleBar,\n        shadow: theme.shadows[24],\n      },\n      alpha: {\n        background: '#fff',\n      },\n      color: {\n        background: '#fff',\n      },\n    },\n  }\n}\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    picker: {\n      '& *': {\n        color: `${palette.text.primary} !important`,\n        borderColor: `${palette.divider} !important`,\n      },\n      '& input': {\n        background: 'none',\n        color: `${palette.text.primary} !important`,\n        boxShadow: `none !important`,\n        border: `1px solid ${palette.divider} !important`,\n      },\n    },\n  }),\n)\n\nconst WrappedSketchPicker: FunctionComponent<Partial<ChildrenProps>> = (\n  props: Partial<ChildrenProps>,\n) => {\n  const { open, anchorEl, color, onChange, placement } = props\n  const classes = useStyles()\n  const pickerStyle = usePickerStyle()\n  return (\n    <Popper\n      open={!!open}\n      anchorEl={anchorEl}\n      placement={placement || 'bottom'}\n      style={{ zIndex: 999999 }}\n    >\n      <SketchPicker\n        color={color}\n        styles={pickerStyle}\n        className={classes.picker}\n        onChange={({ rgb }: ColorResult) => {\n          if (onChange)\n            onChange(\n              `rgba(${rgb.r},${rgb.g},${rgb.b},${\n                typeof rgb.a === 'undefined' ? 1 : rgb.a\n              })`,\n            )\n        }}\n      />\n    </Popper>\n  )\n}\n\nexport default WrappedSketchPicker\n","import React, { FunctionComponent, useRef, useState } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport WrappedSketchPicker from '../WrappedSketchPicker'\n\nexport interface ColorInputProps {\n  color?: string\n  onChange?: (color: string) => void\n}\n\nconst useStyles = makeStyles(({ palette, bgPixel }: Theme) =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n    swatch: {\n      ...bgPixel,\n      display: 'inline-block',\n      cursor: 'pointer',\n    },\n    color: {\n      width: '46px',\n      height: '24px',\n      border: `5px solid ${palette.primary.main}`,\n      backgroundColor: (props: ColorInputProps) => props.color || '',\n    },\n  }),\n)\n\nconst ColorInput: FunctionComponent<ColorInputProps> = (\n  props: ColorInputProps,\n) => {\n  const { color, onChange } = props\n  const classes = useStyles(props)\n  const anchorEl = useRef(null)\n  const [open, setOpen] = useState(false)\n\n  return (\n    <ClickAwayListener\n      mouseEvent='onMouseDown'\n      onClickAway={() => setOpen(false)}\n    >\n      <div aria-hidden className={classes.swatch} ref={anchorEl}>\n        <div\n          aria-hidden\n          className={classes.color}\n          onClick={() => setOpen(!open)}\n        />\n        <WrappedSketchPicker\n          open={open}\n          anchorEl={anchorEl.current}\n          color={color || '#000000'}\n          onChange={onChange}\n        />\n      </div>\n    </ClickAwayListener>\n  )\n}\n\nexport default ColorInput\n","import React, { FunctionComponent } from 'react'\n\nimport GridInput from 'src/app/components/GridInput'\nimport ColorInput from 'src/app/components/ColorInput'\n\ninterface FormColorProps {\n  color: string\n  onChange(color: string): void\n}\n\nconst FormColor: FunctionComponent<FormColorProps> = (\n  props: FormColorProps,\n) => {\n  const { color, onChange } = props\n\n  return (\n    <GridInput before='Color:' childrenWidth={3}>\n      <ColorInput color={color} onChange={onChange} />\n    </GridInput>\n  )\n}\n\nexport default FormColor\n","import React, {\n  FunctionComponent,\n  DetailedHTMLProps,\n  HTMLAttributes,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\ninterface ColorStopPorps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  left?: string | number\n  top?: string | number\n  color: string\n  isActive: boolean\n}\n\nconst useStyles = makeStyles(({ bgPixel, palette }: Theme) =>\n  createStyles({\n    root: {\n      ...bgPixel,\n      width: '12px',\n      height: '12px',\n      border: `solid ${palette.primary.main}`,\n      borderWidth: '0 1px 1px',\n      position: 'absolute',\n      cursor: 'pointer',\n      marginLeft: '-6px',\n      left: (props) => props.left || 0,\n      zIndex: (props) => (props.isActive ? 2 : 1),\n      '&:before,&:after': {\n        position: 'absolute',\n        content: '\"\"',\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        left: '0',\n      },\n      '&:before': {\n        top: '-6px',\n        left: '-1px',\n        borderWidth: '0 6px 6px 6px',\n        borderColor: `transparent transparent ${palette.primary.dark} transparent`,\n      },\n      '&:after': {\n        top: '-5px',\n        borderWidth: '0 5px 5px 5px',\n        borderColor: (props) => {\n          const activeColor =\n            palette.type === 'dark'\n              ? palette.common.white\n              : palette.common.black\n\n          return `transparent transparent ${\n            props.isActive ? activeColor : palette.grey[600]\n          } transparent`\n        },\n      },\n    },\n    color: {\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none',\n      backgroundColor: ({ color }: ColorStopPorps) => color || 'transparent',\n    },\n  }),\n)\n\nconst ColorStop: FunctionComponent<ColorStopPorps> = (\n  props: ColorStopPorps,\n) => {\n  const { left, top, color, isActive, className, ...divProps } = props\n  const classes = useStyles({ left, top, color, isActive })\n\n  return (\n    <div className={clsx(classes.root, className)} {...divProps}>\n      <div className={classes.color} />\n    </div>\n  )\n}\n\nexport default ColorStop\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useRef,\n  MutableRefObject,\n  useState,\n  useEffect,\n} from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport ColorStop from './ColorStop'\n\nexport interface AddPaletteItem {\n  offset: number\n  color: string\n}\n\nexport interface PaletteItem extends AddPaletteItem {\n  id: number\n  offset: number\n  color: string\n}\n\ninterface ColorStopsHolderProps {\n  className?: string\n  palette: PaletteItem[]\n  activeId?: number\n  onAdd(offset: number): void\n  onUpdate(paletteItem: Partial<AddPaletteItem>, isDelete?: boolean): void\n  onSelect(id?: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '17px',\n      position: 'relative',\n      cursor: 'crosshair',\n    },\n  }),\n)\n\nconst ColorStopsHolder: FunctionComponent<ColorStopsHolderProps> = (\n  props: ColorStopsHolderProps,\n) => {\n  const { className, palette, activeId, onAdd, onUpdate, onSelect } = props\n  const classes = useStyles(props)\n  const [width, setWidth] = useState(0)\n  const [startPoint, setStartPoint] = useState({ x: 0, y: 0, offset: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const rootRef: MutableRefObject<HTMLDivElement | null> = useRef(null)\n\n  useEffect(() => {\n    if (rootRef.current) {\n      setWidth(rootRef.current.clientWidth)\n    }\n  }, [rootRef])\n\n  const handleAddPalette = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    const target = rootRef.current\n    if (!target || e.buttons !== 1) return\n    const { left } = target.getBoundingClientRect()\n    const offset = (e.clientX - left) / width\n    onAdd(offset)\n    setIsDragging(true)\n    setStartPoint({ x: e.clientX, y: e.clientY, offset })\n  }\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    paletteItem: PaletteItem,\n  ) => {\n    if (e.buttons !== 1) return\n    e.preventDefault()\n    e.stopPropagation()\n    setStartPoint({ x: e.clientX, y: e.clientY, offset: paletteItem.offset })\n    setIsDragging(true)\n    onSelect(paletteItem.id)\n  }\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging || !activeId) return\n      if (e.buttons !== 1) {\n        setIsDragging(false)\n        return\n      }\n      const idx = palette.findIndex(\n        (paletteItem) => paletteItem.id === activeId,\n      )\n\n      if (idx < 0) return\n      const newPalette = [...palette]\n\n      if (Math.abs(e.clientY - startPoint.y) > 50) {\n        onUpdate(newPalette[idx], true)\n        return\n      }\n\n      const paletteItem = newPalette[idx]\n      const offset = Math.min(\n        Math.max((e.clientX - startPoint.x) / width + startPoint.offset, 0),\n        1,\n      )\n      newPalette[idx] = { ...paletteItem, offset }\n      onUpdate({ offset })\n    },\n    [\n      activeId,\n      isDragging,\n      onUpdate,\n      palette,\n      startPoint.offset,\n      startPoint.x,\n      startPoint.y,\n      width,\n    ],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      ref={rootRef}\n      className={clsx(classes.root, className)}\n      onMouseDown={handleAddPalette}\n    >\n      {palette.map((paletteItem) => (\n        <ColorStop\n          key={paletteItem.id}\n          left={width * paletteItem.offset}\n          color={paletteItem.color}\n          isActive={paletteItem.id === activeId}\n          onMouseDown={(e) => handleMouseDown(e, paletteItem)}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default ColorStopsHolder\n","import React, { FunctionComponent, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nexport interface PaletteItem {\n  id: number | string\n  offset: number\n  color: string\n}\n\ninterface PaletteProps {\n  width?: number | string\n  height?: number | string\n  palette: PaletteItem[]\n}\n\nconst useStyles = makeStyles(({ bgPixel }) => ({\n  root: {\n    ...bgPixel,\n    width: (props: PaletteProps) => props.width || '100%',\n    height: (props: PaletteProps) => props.height || '100%',\n    border: '1px solid #ccc',\n  },\n  svg: {\n    width: '100%',\n    height: '100%',\n    verticalAlign: 'top',\n  },\n}))\n\nconst Palette: FunctionComponent<PaletteProps> = (\n  props: PaletteProps,\n): JSX.Element => {\n  const classes = useStyles(props)\n  const { palette } = props\n  const [id] = useState(`palette_${Math.random().toString().substr(2, 9)}`)\n  const sortedPalette = [...palette].sort(\n    ({ offset: offset1 }, { offset: offset2 }) => offset1 - offset2,\n  )\n\n  return (\n    <div className={classes.root}>\n      <svg className={classes.svg}>\n        <defs>\n          <linearGradient id={id} x1='0' y1='0.5' x2='1' y2='0.5'>\n            {sortedPalette.map((item) => (\n              <stop\n                key={item.id}\n                offset={item.offset}\n                style={{ stopColor: item.color }}\n              />\n            ))}\n          </linearGradient>\n        </defs>\n        <rect x='0' y='0' width='100%' height='100%' fill={`url(#${id})`} />\n      </svg>\n    </div>\n  )\n}\n\nexport default Palette\n","import React, { FunctionComponent, useRef, useState, useEffect } from 'react'\r\nimport Color from 'color'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\n\r\nimport ColorStopsHolder, {\r\n  AddPaletteItem,\r\n  PaletteItem,\r\n} from './ColorStopsHolder'\r\nimport Palette from '../Palette'\r\n\r\nexport interface GradientBuilderProps {\r\n  children?: JSX.Element\r\n  palette: PaletteItem[]\r\n  onAdd: (addPaletteItem: AddPaletteItem) => void\r\n  onUpdate: (palette: PaletteItem[]) => void\r\n}\r\n\r\nexport interface ChildrenProps {\r\n  open: boolean\r\n  anchorEl: HTMLDivElement | null\r\n  color: string\r\n  onChange(color: string): void\r\n}\r\n\r\nconst GradientBuilder: FunctionComponent<GradientBuilderProps> = (\r\n  props: GradientBuilderProps,\r\n) => {\r\n  const { children, palette, onUpdate, onAdd } = props\r\n  const rootEl: React.MutableRefObject<HTMLDivElement | null> = useRef(null)\r\n  const [oldPalette, setOldPalette] = useState([...palette])\r\n  const [activeId, setActiveId] = useState<number>(0)\r\n  const [activeColor, setActiveColor] = useState<string>('')\r\n  const [isAdd, setIsAdd] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (isAdd) {\r\n      const newIds = palette.map(({ id }) => id)\r\n      const oldIds = oldPalette.map(({ id }) => id)\r\n      const diff = Array.from(new Set([...newIds, ...oldIds])).filter(\r\n        (id) => !oldIds.includes(id),\r\n      )\r\n      if (diff.length > 0) {\r\n        setActiveId(diff[0])\r\n      }\r\n      setIsAdd(() => false)\r\n    }\r\n  }, [palette, isAdd, oldPalette])\r\n\r\n  useEffect(() => {\r\n    setOldPalette([...palette])\r\n  }, [palette])\r\n\r\n  useEffect(() => {\r\n    if (activeId) {\r\n      const paletteItem = palette.find((item) => item.id === activeId)\r\n      if (paletteItem) {\r\n        setActiveColor(paletteItem.color)\r\n      }\r\n    }\r\n  }, [activeId, palette])\r\n\r\n  const handleAdd = (offset: number) => {\r\n    const list = [...palette]\r\n    const current = { offset, color: '#000' }\r\n    let left: PaletteItem | undefined\r\n    let right: PaletteItem | undefined\r\n    setActiveId(0)\r\n\r\n    list.forEach((item) => {\r\n      if (\r\n        item.offset < current.offset &&\r\n        (!left || left.offset < item.offset)\r\n      ) {\r\n        left = item\r\n      } else if (!right || right.offset > item.offset) {\r\n        right = item\r\n      }\r\n    })\r\n\r\n    if (left && right) {\r\n      const offsetSpace =\r\n        (current.offset - left.offset) / (right.offset - left.offset)\r\n      const leftColor = Color(left.color)\r\n      const rightColor = Color(right.color)\r\n\r\n      const r =\r\n        (rightColor.red() - leftColor.red()) * offsetSpace + leftColor.red()\r\n      const g =\r\n        (rightColor.green() - leftColor.green()) * offsetSpace +\r\n        leftColor.green()\r\n      const b =\r\n        (rightColor.blue() - leftColor.blue()) * offsetSpace + leftColor.blue()\r\n      const a =\r\n        (rightColor.alpha() - leftColor.alpha()) * offsetSpace +\r\n        leftColor.alpha()\r\n      current.color = `rgba(${Math.round(r)},${Math.round(g)},${Math.round(\r\n        b,\r\n      )},${Math.round(a)})`\r\n    } else if (left || right) {\r\n      current.color = ((left || right) as PaletteItem).color\r\n    }\r\n\r\n    onAdd(current)\r\n    setIsAdd(true)\r\n  }\r\n\r\n  const handleUpdate = (item: Partial<AddPaletteItem>, isDelete = false) => {\r\n    if (!activeId) return\r\n\r\n    const newPalette = [...palette]\r\n    const idx = newPalette.findIndex(\r\n      (paletteItem) => paletteItem.id === activeId,\r\n    )\r\n    if (isDelete) {\r\n      onUpdate([...newPalette.slice(0, idx), ...newPalette.slice(idx + 1)])\r\n      setActiveId(0)\r\n    } else {\r\n      const updateItem = { ...newPalette[idx], ...item }\r\n      onUpdate([\r\n        ...newPalette.slice(0, idx),\r\n        updateItem,\r\n        ...newPalette.slice(idx + 1),\r\n      ])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener\r\n      mouseEvent='onMouseDown'\r\n      onClickAway={() => setActiveId(0)}\r\n    >\r\n      <div ref={rootEl}>\r\n        <Palette palette={palette} height='35px' />\r\n        <ColorStopsHolder\r\n          palette={palette}\r\n          activeId={activeId}\r\n          onAdd={handleAdd}\r\n          onUpdate={handleUpdate}\r\n          onSelect={(id) => setActiveId(id || 0)}\r\n        />\r\n        {children\r\n          ? React.cloneElement(children, {\r\n              open: !!activeId || isAdd,\r\n              anchorEl: rootEl.current,\r\n              color: activeColor,\r\n              onChange: (color: string) =>\r\n                handleUpdate({\r\n                  color,\r\n                }),\r\n            })\r\n          : null}\r\n      </div>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\nexport default GradientBuilder\r\n","import React, {\n  useState,\n  useRef,\n  useEffect,\n  FunctionComponent,\n  useCallback,\n} from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nexport interface AnglePickerProps {\n  width?: number\n  angle: number\n  onChange(angle: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: (props: AnglePickerProps) =>\n        props.width ? `${props.width}px` : '36px',\n      height: (props) => (props.width ? `${props.width}px` : '36px'),\n      position: 'relative',\n      cursor: 'crosshair',\n      overflow: 'hidden',\n      borderRadius: '100%',\n      background: '#FFF',\n    },\n    point: {\n      width: '6px',\n      height: '6px',\n      borderRadius: '100%',\n      position: 'relative',\n      left: '50%',\n      top: '50%',\n      marginTop: '-2px',\n      background: '#000',\n      pointerEvents: 'none',\n      transformOrigin: `0 50%`,\n      transform: (props) =>\n        `rotate(${props.angle || 0}deg) translate(${\n          (props.width || 36) / 2 - 8\n        }px, 0)`,\n    },\n  }),\n)\n\nconst AnglePicker: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { onChange } = props\n  const rootRef = useRef<HTMLDivElement>(null)\n  const [isDragging, setIsDragging] = useState(false)\n  const classes = useStyles(props)\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent> | MouseEvent) => {\n      if (!rootRef.current) return\n\n      const { clientX, clientY } = e\n      const bounds = rootRef.current.getBoundingClientRect()\n      const radians = Math.atan2(\n        clientY - (bounds.y + bounds.height / 2),\n        clientX - (bounds.x + bounds.width / 2),\n      )\n      onChange(Math.round(radians * (180 / Math.PI)))\n    },\n    [onChange],\n  )\n\n  const handleMouseUp = useCallback((e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setIsDragging(false)\n  }, [])\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!rootRef.current) return\n    setIsDragging(true)\n    handleMouseMove(e)\n  }\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [handleMouseMove, handleMouseUp, isDragging])\n\n  return (\n    <div\n      aria-hidden\n      className={classes.root}\n      ref={rootRef}\n      onMouseDown={handleMouseDown}\n    >\n      <div className={classes.point} />\n    </div>\n  )\n}\n\nexport default AnglePicker\n","import React, { FunctionComponent } from 'react'\nimport Input from '@material-ui/core/Input'\n\nimport GridInput from 'src/app/components/GridInput'\nimport AnglePicker, { AnglePickerProps } from 'src/app/components/AnglePicker'\n\nconst FormAngle: FunctionComponent<AnglePickerProps> = (\n  props: AnglePickerProps,\n) => {\n  const { angle, onChange } = props\n\n  return (\n    <GridInput\n      before='Angle:'\n      after={<AnglePicker width={24} angle={angle} onChange={onChange} />}\n    >\n      <Input\n        value={angle}\n        fullWidth\n        type='number'\n        onChange={(e) => onChange(Number(e.target.value))}\n      />\n    </GridInput>\n  )\n}\n\nexport default FormAngle\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\n\r\nimport GradientPicker from 'src/app/components/GradientPicker'\r\nimport WrappedSketchPicker from 'src/app/components/WrappedSketchPicker'\r\nimport { Gradient, GradientType } from 'src/store'\r\nimport GridInput from 'src/app/components/GridInput'\r\n\r\nimport FormAngle from '../FormAngle'\r\n\r\ninterface FormGradientProps {\r\n  gradient: Gradient\r\n}\r\n\r\nconst FormGradient: FunctionComponent<FormGradientProps> = (\r\n  props: FormGradientProps,\r\n) => {\r\n  const {\r\n    gradient: {\r\n      type,\r\n      angle,\r\n      palette,\r\n      addColor,\r\n      updatePalette,\r\n      setAngle,\r\n      setType,\r\n    },\r\n  } = props\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <FormAngle angle={angle} onChange={setAngle} />\r\n      </Box>\r\n\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='Type:' component='div' childrenWidth={8}>\r\n          <RadioGroup\r\n            row\r\n            name='type'\r\n            value={type}\r\n            onChange={(e) => setType(Number(e.target.value))}\r\n            style={{ flexWrap: 'nowrap' }}\r\n          >\r\n            <FormControlLabel\r\n              value={GradientType.LINEAR}\r\n              control={<Radio size='small' color='default' />}\r\n              label='Linear'\r\n            />\r\n            <FormControlLabel\r\n              value={GradientType.RADIAL}\r\n              control={<Radio size='small' color='default' />}\r\n              label='Radial'\r\n            />\r\n          </RadioGroup>\r\n        </GridInput>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GradientPicker\r\n          palette={palette}\r\n          onAdd={(e) => addColor(e.offset, e.color)}\r\n          onUpdate={updatePalette}\r\n        >\r\n          <WrappedSketchPicker />\r\n        </GradientPicker>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(FormGradient)\r\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\nimport readFile from 'src/utils/readFile'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      width: theme.spacing(12),\n      height: theme.spacing(12),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n      border: `1px solid ${theme.palette.primary.main}`,\n      cursor: 'pointer',\n      ...theme.bgPixel,\n    },\n    image: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      pointerEvents: 'none',\n    },\n  }),\n)\n\ninterface FileSelectorProps {\n  src: string\n  onChange(image: ArrayBuffer): void\n}\n\nconst FileSelector: FunctionComponent<FileSelectorProps> = (\n  props: FileSelectorProps,\n) => {\n  const { src, onChange } = props\n  const classes = useStyles()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    if (!e.target.files) return\n    if (e.target.files.length > 0) {\n      readFile(e.target.files[0]).then((buffer) => {\n        if (buffer instanceof ArrayBuffer) onChange(buffer)\n      })\n    }\n  }\n\n  return (\n    <Box component='label' className={classes.root}>\n      <input\n        hidden\n        type='file'\n        multiple\n        accept='image/*'\n        onChange={handleChange}\n      />\n      <img className={classes.image} src={src} alt='' />\n    </Box>\n  )\n}\n\nexport default FileSelector\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport GridInput from 'src/app/components/GridInput'\r\nimport Box from '@material-ui/core/Box'\r\nimport Input from '@material-ui/core/Input'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\nimport { PatternTexture, Repetition } from 'src/store'\r\n\r\nimport FileSelector from './FileSelector'\r\n\r\ninterface FormImageProps {\r\n  patternTexture: PatternTexture\r\n  scale: number\r\n  src: string\r\n  // onChangeImage(buffer: ArrayBuffer): void\r\n  // onChangeScale(scale: number): void\r\n}\r\n\r\nconst FormImage: FunctionComponent<FormImageProps> = (\r\n  props: FormImageProps,\r\n) => {\r\n  const { patternTexture } = props\r\n  const {\r\n    src,\r\n    scale,\r\n    repetition,\r\n    setRepetition,\r\n    setScale,\r\n    setImage,\r\n  } = patternTexture\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput\r\n          component='div'\r\n          before='Scale:'\r\n          after={<FileSelector src={src} onChange={setImage} />}\r\n        >\r\n          <Input\r\n            value={scale}\r\n            fullWidth\r\n            type='number'\r\n            inputProps={{ min: 0.01, step: 0.1 }}\r\n            onChange={(e) => setScale(Number(e.target.value))}\r\n          />\r\n        </GridInput>\r\n      </Box>\r\n      <Box paddingX={2} marginY={4}>\r\n        <GridInput before='Repeat:'>\r\n          <Select\r\n            value={repetition}\r\n            onChange={(e) => setRepetition(e.target.value as Repetition)}\r\n            displayEmpty\r\n            fullWidth\r\n          >\r\n            <MenuItem value='repeat'>Repeat</MenuItem>\r\n            <MenuItem value='repeat-x'>Repeat-x</MenuItem>\r\n            <MenuItem value='repeat-y'>Repeat-y</MenuItem>\r\n            <MenuItem value='no-repeat'>No Repeat</MenuItem>\r\n          </Select>\r\n        </GridInput>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FormImage\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\n\r\nimport { FontStyleConfig, FillType } from 'src/store'\r\n\r\nimport FormColor from '../FormColor'\r\nimport FormGradient from '../FormGradient'\r\nimport FormImage from '../FormImage'\r\n\r\ninterface FormFillProps {\r\n  config: FontStyleConfig\r\n}\r\n\r\nconst FormFill: FunctionComponent<FormFillProps> = (props: FormFillProps) => {\r\n  const {\r\n    config: { type, color, gradient, patternTexture, setType, setColor },\r\n  } = props\r\n\r\n  return (\r\n    <>\r\n      <Box paddingX={2} marginY={4}>\r\n        <RadioGroup\r\n          row\r\n          name='type'\r\n          value={type}\r\n          onChange={(e) => setType(Number(e.target.value))}\r\n        >\r\n          <FormControlLabel\r\n            value={FillType.SOLID}\r\n            control={<Radio size='small' color='default' />}\r\n            label='Solid'\r\n          />\r\n          <FormControlLabel\r\n            value={FillType.GRADIENT}\r\n            control={<Radio size='small' color='default' />}\r\n            label='Gradient'\r\n          />\r\n          <FormControlLabel\r\n            value={FillType.IMAGE}\r\n            control={<Radio size='small' color='default' />}\r\n            label='Image'\r\n          />\r\n        </RadioGroup>\r\n      </Box>\r\n      {type === 0 ? (\r\n        <Box paddingX={2} marginY={4}>\r\n          <FormColor color={color} onChange={setColor} />\r\n        </Box>\r\n      ) : null}\r\n      {type === 1 ? <FormGradient gradient={gradient} /> : null}\r\n      {type === 2 ? (\r\n        <FormImage\r\n          patternTexture={patternTexture}\r\n          src={patternTexture.src}\r\n          scale={patternTexture.scale}\r\n          // onChangeImage={patternTexture.setImage}\r\n          // onChangeScale={patternTexture.setScale}\r\n        />\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(FormFill)\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useFill } from 'src/store/hooks'\nimport FormFill from '../../../common/FormFill'\n\nconst Fill: FunctionComponent<unknown> = () => {\n  const fill = useFill()\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Fill</Typography>\n      </Box>\n      <FormFill config={fill} />\n    </>\n  )\n}\n\nexport default observer(Fill)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\n\nimport FormFill from 'src/app/layout/common/FormFill'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Stroke: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const { stroke, useStroke, setUseStroke } = useStyle()\n  const { setWidth, lineJoin, setLineJoin, lineCap, setLineCap } = stroke\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Stroke\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useStroke}\n          onChange={(e) => setUseStroke(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useStroke ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Width:' after='px'>\n            <Input\n              value={stroke?.width || 0}\n              fullWidth\n              type='number'\n              inputProps={{ min: 0 }}\n              onChange={(e) => setWidth(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Cap:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineCap('butt')}\n                variant={lineCap === 'butt' ? 'contained' : 'outlined'}\n              >\n                Butt\n              </Button>\n              <Button\n                onClick={() => setLineCap('round')}\n                variant={lineCap === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineCap('square')}\n                variant={lineCap === 'square' ? 'contained' : 'outlined'}\n              >\n                Square\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Line Join:' component='div' childrenWidth={8}>\n            <ButtonGroup size='small' color='primary'>\n              <Button\n                onClick={() => setLineJoin('miter')}\n                variant={lineJoin === 'miter' ? 'contained' : 'outlined'}\n              >\n                Miter\n              </Button>\n              <Button\n                onClick={() => setLineJoin('round')}\n                variant={lineJoin === 'round' ? 'contained' : 'outlined'}\n              >\n                Round\n              </Button>\n              <Button\n                onClick={() => setLineJoin('bevel')}\n                variant={lineJoin === 'bevel' ? 'contained' : 'outlined'}\n              >\n                Bevel\n              </Button>\n            </ButtonGroup>\n          </GridInput>\n        </Box>\n        <FormFill config={stroke} />\n      </div>\n    </>\n  )\n}\n\nexport default observer(Stroke)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport Switch from '@material-ui/core/Switch'\n\nimport { useStyle } from 'src/store/hooks'\nimport GridInput from 'src/app/components/GridInput'\nimport FormColor from '../../../common/FormColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    disabled: {\n      opacity: 0.3,\n      pointerEvents: 'none',\n    },\n    title: {\n      flex: 1,\n    },\n  }),\n)\n\nconst Shadow: FunctionComponent<unknown> = () => {\n  const { shadow, useShadow, setUseShadow } = useStyle()\n  const { setOffsetX, setOffsetY, setBlur, setColor } = shadow\n  const classes = useStyles()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography component='div' className={classes.title}>\n          Shadow\n        </Typography>\n        Off\n        <Switch\n          size='small'\n          checked={useShadow}\n          onChange={(e) => setUseShadow(e.target.checked)}\n        />\n        On\n      </Box>\n      <div className={useShadow ? '' : classes.disabled}>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset X:' after='px'>\n            <Input\n              value={shadow?.offsetX || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetX(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Offset Y:' after='px'>\n            <Input\n              value={shadow?.offsetY || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              onChange={(e) => setOffsetY(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <GridInput before='Blur:' after='px'>\n            <Input\n              value={shadow?.blur || 0}\n              fullWidth\n              type='number'\n              disabled={!useShadow}\n              inputProps={{ style: { textAlign: 'right' }, min: 0 }}\n              onChange={(e) => setBlur(Number(e.target.value))}\n            />\n          </GridInput>\n        </Box>\n        <Box paddingX={2} marginY={4}>\n          <FormColor color={shadow?.color || ''} onChange={setColor} />\n        </Box>\n      </div>\n    </>\n  )\n}\nexport default observer(Shadow)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useStyle } from 'src/store/hooks'\nimport FormColor from '../../../common/FormColor'\n\nconst BackgroundColor: FunctionComponent<unknown> = () => {\n  const { bgColor, setBgColor } = useStyle()\n\n  return (\n    <>\n      <Box\n        component='label'\n        display='flex'\n        alignItems='center'\n        paddingX={2}\n        marginY={4}\n      >\n        <Typography>Background Color</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <FormColor color={bgColor || ''} onChange={setBgColor} />\n      </Box>\n    </>\n  )\n}\n\nexport default observer(BackgroundColor)\n","import React, { FunctionComponent } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport Fill from './modules/Fill'\nimport Stroke from './modules/Stroke'\nimport Shadow from './modules/Shadow'\nimport BackgroundColor from './modules/BackgroundColor'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      width: '256px',\n    },\n  }),\n)\n\nconst RightBar: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box\n      bgcolor='background.sidebar'\n      display='flex'\n      flexDirection='column'\n      overflow='hidden'\n      className={classes.root}\n    >\n      <Box bgcolor='background.sidebar' boxShadow={2} padding={2}>\n        <Typography variant='subtitle2'>Style Config</Typography>\n      </Box>\n      <Box flex={1} height={0} overflow='hidden auto'>\n        <Fill />\n        <Divider />\n        <Stroke />\n        <Divider />\n        <Shadow />\n        <Divider />\n        <BackgroundColor />\n      </Box>\n    </Box>\n  )\n}\n\nexport default RightBar\n","import { useEffect, useCallback, RefObject, DependencyList } from 'react'\r\n\r\ninterface DeltaInfo {\r\n  deltaScale: number\r\n  deltaX: number\r\n  deltaY: number\r\n}\r\n\r\ninterface WheelCallback {\r\n  (deltaInfo: DeltaInfo): void\r\n}\r\n\r\nfunction useWheel(\r\n  ref: RefObject<HTMLElement>,\r\n  onWheel: WheelCallback,\r\n  deps: DependencyList = [],\r\n): void {\r\n  const callback = useCallback(onWheel, [onWheel, deps])\r\n  const handleWheel = useCallback(\r\n    (e: WheelEvent) => {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      const { ctrlKey, altKey, deltaX, deltaY } = e\r\n      if (ctrlKey) {\r\n        let d = -0.01\r\n        if (Math.abs(deltaY) > 50) d *= 0.1\r\n        callback({ deltaScale: deltaY * d, deltaX: 0, deltaY: 0 })\r\n      } else {\r\n        let x = -deltaX\r\n        let y = -deltaY\r\n        if (deltaX === 0 && altKey && Math.abs(deltaY) > 50) {\r\n          x = -deltaY\r\n          y = 0\r\n        }\r\n        callback({\r\n          deltaX: x,\r\n          deltaY: y,\r\n          deltaScale: 0,\r\n        })\r\n      }\r\n    },\r\n    [callback],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return undefined\r\n\r\n    const dom = ref.current\r\n\r\n    dom.addEventListener('wheel', handleWheel, {\r\n      passive: false,\r\n    })\r\n\r\n    return () => dom.removeEventListener('wheel', handleWheel)\r\n  }, [ref, handleWheel])\r\n}\r\nexport default useWheel\r\n","import {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useCallback,\r\n  DependencyList,\r\n} from 'react'\r\n\r\ninterface OffsetInfo {\r\n  offsetX: number\r\n  offsetY: number\r\n}\r\n\r\ninterface WheelCallback {\r\n  (offsetInfo: OffsetInfo): void\r\n}\r\n\r\nconst point = {\r\n  x: 0,\r\n  y: 0,\r\n}\r\n\r\nfunction useSpaceDrag<T extends HTMLElement>(\r\n  onMove: WheelCallback,\r\n  deps: DependencyList = [],\r\n): [0 | 1 | 2, (e: React.MouseEvent<T, MouseEvent>) => void] {\r\n  const [moveState, setMoveState] = useState({\r\n    ks: false,\r\n    ms: false,\r\n  })\r\n\r\n  const dragStatus = useMemo(() => {\r\n    if (moveState.ks && moveState.ms) return 2\r\n    if (moveState.ks) return 1\r\n    return 0\r\n  }, [moveState.ks, moveState.ms])\r\n\r\n  const moveCallback = useCallback(onMove, [onMove, ...deps])\r\n\r\n  const handleKeyEvent = useCallback(\r\n    (e: KeyboardEvent) => {\r\n      const state = e.keyCode === 32 && e.type === 'keydown'\r\n      if (moveState.ks === state) return\r\n      setMoveState((s) => {\r\n        return {\r\n          ...s,\r\n          ks: e.keyCode === 32 && e.type === 'keydown',\r\n        }\r\n      })\r\n    },\r\n    [moveState.ks],\r\n  )\r\n\r\n  const handleMouseDown = (e: React.MouseEvent<T, MouseEvent>) => {\r\n    if (!moveState.ks) return\r\n    const { clientX, clientY } = e\r\n    point.x = clientX\r\n    point.y = clientY\r\n    setMoveState((s) => {\r\n      return {\r\n        ...s,\r\n        ms: true,\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleMove = useCallback(\r\n    (e: MouseEvent) => {\r\n      const { clientX, clientY } = e\r\n      const { x, y } = point\r\n\r\n      if (clientX - x === 0 && clientY - y === 0) return\r\n\r\n      moveCallback({\r\n        offsetX: clientX - x,\r\n        offsetY: clientY - y,\r\n      })\r\n\r\n      point.x = clientX\r\n      point.y = clientY\r\n    },\r\n    [moveCallback],\r\n  )\r\n\r\n  const handleEnd = useCallback(() => {\r\n    setMoveState((s) => {\r\n      return {\r\n        ...s,\r\n        ms: false,\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyEvent)\r\n    window.addEventListener('keyup', handleKeyEvent)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyEvent)\r\n      window.removeEventListener('keyup', handleKeyEvent)\r\n    }\r\n  }, [handleKeyEvent])\r\n\r\n  useEffect(() => {\r\n    if (moveState.ks && moveState.ms) {\r\n      window.addEventListener('mousemove', handleMove)\r\n      window.addEventListener('mouseup', handleEnd)\r\n    } else {\r\n      window.removeEventListener('mousemove', handleMove)\r\n      window.removeEventListener('mouseup', handleEnd)\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMove)\r\n      window.removeEventListener('mouseup', handleEnd)\r\n    }\r\n  }, [handleEnd, handleMove, moveState.ks, moveState.ms])\r\n\r\n  return [dragStatus, handleMouseDown]\r\n}\r\nexport default useSpaceDrag\r\n","import React, { useRef, useEffect, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\nimport useWheel from 'src/app/hooks/useWheel'\r\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\r\n\r\ninterface StyleProps {\r\n  width: number\r\n  height: number\r\n  scale: number\r\n  offsetX: number\r\n  offsetY: number\r\n  dragState: number\r\n}\r\n\r\nconst useStyles = makeStyles(({ bgPixel }) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'hidden',\r\n      flex: 1,\r\n      cursor: (props: StyleProps) => {\r\n        if (props.dragState === 2) return 'grabbing'\r\n        if (props.dragState === 1) return 'grab'\r\n        return 'default'\r\n      },\r\n    },\r\n    canvas: {\r\n      ...bgPixel,\r\n      transformOrigin: '50% 50%',\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      width: (props: StyleProps) => `${props.width}px`,\r\n      height: (props: StyleProps) => `${props.height}px`,\r\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\r\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\r\n      transform: (props: StyleProps) =>\r\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\r\n      imageRendering: 'pixelated',\r\n    },\r\n  }),\r\n)\r\n\r\nconst PackCanvas: FunctionComponent<unknown> = () => {\r\n  const {\r\n    isPacking,\r\n    ui,\r\n    layout: { padding, auto, fixedSize, width: packWidth, height: packHeight },\r\n    glyphList,\r\n    style: { bgColor },\r\n    packCanvas,\r\n    setCanvas,\r\n  } = useProject()\r\n  const { width, height, scale, offsetX, offsetY } = ui\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const domRef = useRef<HTMLDivElement>(null)\r\n  const [dragState, handleMouseDown] = useSpaceDrag(\r\n    (offsetInfo) => {\r\n      const { offsetX: ix, offsetY: iy } = offsetInfo\r\n      const { scale: os, offsetX: ox, offsetY: oy, setTransform } = ui\r\n      setTransform({\r\n        offsetX: ox + ix / os,\r\n        offsetY: oy + iy / os,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n\r\n  const classes = useStyles({\r\n    width,\r\n    height,\r\n    scale,\r\n    offsetX,\r\n    offsetY,\r\n    dragState,\r\n  })\r\n\r\n  useWheel(\r\n    domRef,\r\n    (info) => {\r\n      const { offsetX: ox, offsetY: oy, scale: os, setTransform } = ui\r\n      const s = os + info.deltaScale\r\n      const x = ox + info.deltaX / s\r\n      const y = oy + info.deltaY / s\r\n      setTransform({\r\n        offsetX: x,\r\n        offsetY: y,\r\n        scale: s,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current && canvasRef.current !== packCanvas)\r\n      setCanvas(canvasRef.current)\r\n  }, [canvasRef, packCanvas, setCanvas])\r\n\r\n  useEffect(() => {\r\n    if (!glyphList || isPacking || !width || !height) return\r\n    const canvas = canvasRef.current\r\n    if (!canvas) return\r\n\r\n    canvas.width = width\r\n    canvas.height = height\r\n\r\n    const ctx = canvas.getContext('2d')\r\n    if (!ctx) return\r\n\r\n    if (bgColor) {\r\n      ctx.fillStyle = bgColor\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n\r\n    glyphList.forEach((glyph) => {\r\n      if (\r\n        glyph.source &&\r\n        glyph.source.width !== 0 &&\r\n        glyph.source.height !== 0\r\n      ) {\r\n        ctx.drawImage(\r\n          glyph.source as HTMLCanvasElement,\r\n          glyph.x + (padding || 0),\r\n          glyph.y + (padding || 0),\r\n        )\r\n      }\r\n    })\r\n  }, [\r\n    bgColor,\r\n    glyphList,\r\n    isPacking,\r\n    height,\r\n    width,\r\n    padding,\r\n    auto,\r\n    fixedSize,\r\n    packWidth,\r\n    packHeight,\r\n  ])\r\n\r\n  return (\r\n    <div\r\n      aria-hidden\r\n      ref={domRef}\r\n      className={classes.root}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      <canvas ref={canvasRef} className={classes.canvas} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(PackCanvas)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nconst useStyles = makeStyles(({ palette }) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      background: palette.background.paper,\r\n      textAlign: 'center',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      fontSize: 12,\r\n      padding: 2,\r\n      animationDuration: '300ms',\r\n      pointerEvents: 'none',\r\n      color: palette.text.secondary,\r\n      position: 'relative',\r\n    },\r\n    loading: {\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: '100%',\r\n      width: '100%',\r\n    },\r\n  }),\r\n)\r\n\r\nconst PackSizeBar: FunctionComponent<unknown> = () => {\r\n  const { isPacking, ui } = useProject()\r\n  const { width, height } = ui\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      Packed texture size: {width} x {height}\r\n      {isPacking ? <LinearProgress className={classes.loading} /> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(PackSizeBar)\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport PackCanvas from './PackCanvas'\r\nimport PackSizeBar from './PackSizeBar'\r\n\r\nconst PackView: FunctionComponent<unknown> = () => {\r\n  return (\r\n    <>\r\n      <PackSizeBar />\r\n      <PackCanvas />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PackView\r\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nimport { PreviewObject } from './getPreviewCanvas'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    letter: {\n      position: 'absolute',\n      '&:hover,&$select': {\n        background: 'rgba(0,0,0,0.2)',\n        outline: '1px solid #000',\n      },\n    },\n    select: {\n      '& + $next': {\n        background: 'rgba(0,0,0,0.1)',\n        outline: '1px dashed #666',\n      },\n    },\n    next: {},\n  }),\n)\n\ninterface LetterListProps {\n  data: PreviewObject\n}\n\nconst LetterList: FunctionComponent<LetterListProps> = (\n  props: LetterListProps,\n) => {\n  const {\n    data: { xOffset, yOffset, list },\n  } = props\n  const classes = useStyles()\n  const ui = useProjectUi()\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    letter: string,\n    next: string,\n  ) => {\n    // setSelectLetter\n    e.stopPropagation()\n    ui.setSelectLetter(letter, next)\n  }\n  return (\n    <>\n      {list.map((item, idx) => {\n        const key = `${item.letter}${idx}`\n        return (\n          <div\n            aria-hidden\n            className={clsx(classes.letter, {\n              [classes.select]: item.letter === ui.selectLetter,\n              [classes.next]: item.letter === ui.selectNextLetter,\n            })}\n            style={{\n              width: item.width,\n              height: item.height,\n              left: `${item.x - xOffset}px`,\n              top: `${item.y - yOffset}px`,\n            }}\n            key={key}\n            onClick={(e) => handleSelect(e, item.letter, item.next)}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default observer(LetterList)\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\nimport useWheel from 'src/app/hooks/useWheel'\r\nimport useSpaceDrag from 'src/app/hooks/useSpaceDrag'\r\nimport { BMFontChar, toBmfInfo } from 'src/file/export'\r\n\r\nimport getPreviewCanvas, { PreviewObject } from './getPreviewCanvas'\r\nimport LetterList from './LetterList'\r\nimport { autorun } from 'mobx'\r\n\r\ninterface StyleProps {\r\n  width: number\r\n  height: number\r\n  scale: number\r\n  offsetX: number\r\n  offsetY: number\r\n  dragState: number\r\n}\r\n\r\nconst useStyles = makeStyles(({ bgPixel }) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'relative',\r\n      flex: 1,\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'hidden',\r\n      ...bgPixel,\r\n      cursor: (props: StyleProps) => {\r\n        if (props.dragState === 2) return 'grabbing'\r\n        if (props.dragState === 1) return 'grab'\r\n        return 'default'\r\n      },\r\n    },\r\n    wrap: {\r\n      transformOrigin: '50% 50%',\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      width: (props: StyleProps) => `${props.width}px`,\r\n      height: (props: StyleProps) => `${props.height}px`,\r\n      marginLeft: (props: StyleProps) => `${props.width / -2}px`,\r\n      marginTop: (props: StyleProps) => `${props.height / -2}px`,\r\n      transform: (props: StyleProps) =>\r\n        `scale(${props.scale}) translate(${props.offsetX}px,${props.offsetY}px)`,\r\n    },\r\n    canvas: {\r\n      width: '100%',\r\n      height: '100%',\r\n      imageRendering: 'pixelated',\r\n    },\r\n  }),\r\n)\r\n\r\nconst PreviewCanvas: FunctionComponent<unknown> = () => {\r\n  const project = useProject()\r\n  const [data, setData] = useState<PreviewObject | null>(null)\r\n  const {\r\n    ui,\r\n    style: {\r\n      font: {\r\n        size,\r\n        lineHeight,\r\n        middle,\r\n        hanging,\r\n        top,\r\n        alphabetic,\r\n        ideographic,\r\n        bottom,\r\n        minBaseLine,\r\n        maxBaseLine,\r\n      },\r\n    },\r\n    isPacking,\r\n  } = project\r\n  const { previewScale, previewOffsetX, previewOffsetY } = ui\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const domRef = useRef<HTMLDivElement>(null)\r\n  const [dragState, handleMouseDown] = useSpaceDrag(\r\n    (offsetInfo) => {\r\n      const { offsetX: ix, offsetY: iy } = offsetInfo\r\n      const {\r\n        previewScale: os,\r\n        previewOffsetX: ox,\r\n        previewOffsetY: oy,\r\n        setPreviewTransform,\r\n      } = ui\r\n      setPreviewTransform({\r\n        previewOffsetX: ox + ix / os,\r\n        previewOffsetY: oy + iy / os,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n  const classes = useStyles({\r\n    width: data ? data.width : 0,\r\n    height: data ? data.height : 0,\r\n    scale: previewScale,\r\n    offsetX: previewOffsetX,\r\n    offsetY: previewOffsetY,\r\n    dragState,\r\n  })\r\n\r\n  useWheel(\r\n    domRef,\r\n    (info) => {\r\n      const {\r\n        previewOffsetX: ox,\r\n        previewOffsetY: oy,\r\n        previewScale: os,\r\n        setPreviewTransform,\r\n      } = ui\r\n      const s = os + info.deltaScale\r\n      const x = ox + info.deltaX / s\r\n      const y = oy + info.deltaY / s\r\n      setPreviewTransform({\r\n        previewOffsetX: x,\r\n        previewOffsetY: y,\r\n        previewScale: s,\r\n      })\r\n    },\r\n    [ui],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current || isPacking || !data) return\r\n\r\n    const canvas = canvasRef.current\r\n    const ctx = canvas.getContext('2d')\r\n    if (!ctx) return\r\n    const lh = size * lineHeight\r\n\r\n    canvas.width = data.width\r\n    canvas.height = data.height\r\n    data.list.forEach((item) => {\r\n      if (!item.source || item.source.width === 0 || item.source.height === 0)\r\n        return\r\n      ctx.drawImage(item.source, item.x - data.xOffset, item.y - data.yOffset)\r\n    })\r\n\r\n    for (let index = 0; index < data.lines; index += 1) {\r\n      ;[middle, hanging, top, alphabetic, ideographic, bottom].forEach(\r\n        (baseLine) => {\r\n          const basey = Math.round(baseLine - minBaseLine + index * lh)\r\n          ctx.beginPath()\r\n          ctx.moveTo(-data.xOffset, basey + 0.5 - data.yOffset)\r\n          ctx.lineTo(data.width, basey + 0.5 - data.yOffset)\r\n          if (baseLine === minBaseLine || baseLine === maxBaseLine) {\r\n            ctx.strokeStyle = 'rgba(0,0,0,1)'\r\n            ctx.setLineDash([])\r\n          } else {\r\n            ctx.strokeStyle = 'rgba(0,0,0,0.5)'\r\n            ctx.setLineDash([10, 3, 2, 3])\r\n          }\r\n          ctx.stroke()\r\n        },\r\n      )\r\n      ctx.beginPath()\r\n      ctx.moveTo(-data.xOffset + 0.5, index * lh - data.yOffset)\r\n      ctx.lineTo(\r\n        -data.xOffset + 0.5,\r\n        index * lh - data.yOffset + maxBaseLine - minBaseLine,\r\n      )\r\n      ctx.strokeStyle = 'rgba(0,0,0,1)'\r\n      ctx.setLineDash([])\r\n      ctx.stroke()\r\n    }\r\n  }, [\r\n    alphabetic,\r\n    bottom,\r\n    data,\r\n    hanging,\r\n    ideographic,\r\n    isPacking,\r\n    lineHeight,\r\n    maxBaseLine,\r\n    middle,\r\n    minBaseLine,\r\n    size,\r\n    top,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    autorun(() => {\r\n      if (!canvasRef.current || isPacking) return\r\n      const canvas = canvasRef.current\r\n      const ctx = canvas.getContext('2d')\r\n      if (!ctx) return\r\n\r\n      const { chars, kernings } = toBmfInfo(project)\r\n      const kerningMap: Map<number, Map<number, number>> = new Map()\r\n      kernings.list.forEach(({ first, second, amount }) => {\r\n        if (!kerningMap.has(first)) kerningMap.set(first, new Map())\r\n        const k = kerningMap.get(first)\r\n        k?.set(second, amount)\r\n      })\r\n      const charMap: Map<string, BMFontChar> = new Map()\r\n      chars.list.forEach((char) => {\r\n        charMap.set(char.letter, char)\r\n      })\r\n      const lh = size * lineHeight\r\n      const obj = getPreviewCanvas(\r\n        ui.previewText,\r\n        charMap,\r\n        kerningMap,\r\n        lh,\r\n        maxBaseLine - minBaseLine,\r\n      )\r\n      setData(() => obj)\r\n    })\r\n  }, [\r\n    isPacking,\r\n    lineHeight,\r\n    maxBaseLine,\r\n    minBaseLine,\r\n    project,\r\n    size,\r\n    ui.previewText,\r\n  ])\r\n\r\n  return (\r\n    <div\r\n      aria-hidden\r\n      ref={domRef}\r\n      className={classes.root}\r\n      onMouseDown={handleMouseDown}\r\n      onClick={() => ui.setSelectLetter('', '')}\r\n    >\r\n      <div className={classes.wrap}>\r\n        <canvas ref={canvasRef} className={classes.canvas} />\r\n        {data ? <LetterList data={data} /> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(PreviewCanvas)\r\n","import { BMFontChar } from 'src/file/export'\r\n\r\ninterface PreviewItem {\r\n  x: number\r\n  y: number\r\n  width: number\r\n  height: number\r\n  source: HTMLImageElement | HTMLCanvasElement | null\r\n  letter: string\r\n  next: string\r\n}\r\n\r\nexport interface PreviewObject {\r\n  xOffset: number\r\n  yOffset: number\r\n  width: number\r\n  height: number\r\n  list: PreviewItem[]\r\n  lines: number\r\n}\r\n\r\nexport default function getPreviewCanvas(\r\n  text: string,\r\n  chars: Map<string, BMFontChar>,\r\n  kernings: Map<number, Map<number, number>>,\r\n  lineHeight: number,\r\n  fontHeight: number,\r\n): PreviewObject {\r\n  // const letters = Array.from(new Set(text.replace(/\\r\\n|\\r|\\n/g, '').split('')))\r\n  const list: PreviewItem[] = []\r\n  const lines = text.split(/\\r\\n|\\r|\\n/)\r\n  let minX = 0\r\n  let minY = 0\r\n  let maxX = 0\r\n  let maxY = 0\r\n  let y = 0\r\n  let x = 0\r\n\r\n  lines.forEach((str, index) => {\r\n    y = lineHeight * index\r\n    x = 0\r\n    const arr = Array.from(str)\r\n    arr.forEach((letter, idx) => {\r\n      const char = chars.get(letter)\r\n      if (!char) return\r\n      const next = arr[idx + 1]\r\n      const lk = kernings.get(letter.charCodeAt(0))\r\n      let kering = 0\r\n      if (next && lk && lk.has(next.charCodeAt(0))) {\r\n        kering = lk.get(next.charCodeAt(0)) || 0\r\n      }\r\n      const obj = {\r\n        x: x + char.xoffset,\r\n        y: y + char.yoffset,\r\n        width: char.width || char.xadvance,\r\n        height: char.height || fontHeight,\r\n        source: char.source,\r\n        letter: char.letter,\r\n        next,\r\n      }\r\n      x += char.xadvance + kering\r\n      minX = Math.min(obj.x, minX)\r\n      minY = Math.min(obj.y, minY)\r\n      maxX = Math.max(obj.x + obj.width, maxX)\r\n      maxY = Math.max(obj.y + char.height, maxY)\r\n      list.push(obj)\r\n    })\r\n  })\r\n\r\n  return {\r\n    lines: lines.length,\r\n    list,\r\n    xOffset: minX,\r\n    yOffset: minY,\r\n    width: maxX - minX,\r\n    height: Math.max(maxY - minY, lines.length * lineHeight - minY),\r\n  }\r\n}\r\n","import React, { useState, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\n\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  const { previewText, setPreviewText } = useProjectUi()\n  const [isIME, setIsIME] = useState(false)\n  const [inputText, setInputText] = useState(previewText)\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = event.target\n    if (isIME) {\n      setInputText(value)\n    } else {\n      setInputText(value)\n      if (value !== previewText) setPreviewText(value)\n    }\n  }\n\n  const handleCompositionEnd = (): void => {\n    setIsIME(false)\n    setInputText(inputText)\n    if (inputText !== previewText) setPreviewText(inputText)\n  }\n\n  return (\n    <Box>\n      <Box paddingX={2} marginY={4}>\n        <Typography>Glyphs</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <TextField\n          margin='none'\n          value={isIME ? inputText : previewText}\n          fullWidth\n          multiline\n          rows={7}\n          variant='outlined'\n          inputProps={{ spellCheck: false }}\n          onChange={handleInput}\n          onCompositionStart={() => setIsIME(true)}\n          onCompositionEnd={handleCompositionEnd}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default observer(Preview)\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useProject } from 'src/store/hooks'\n\nimport FormAdjustMetric from 'src/app/layout/common/FormAdjustMetric'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const project = useProject()\n  const { glyphList, ui } = project\n  const glyph = glyphList.find((gl) => gl.letter === ui.selectLetter)\n  if (!glyph) return null\n  const { adjustMetric, letter } = glyph\n  const {\n    xAdvance,\n    xOffset,\n    yOffset,\n    setXAdvance,\n    setXOffset,\n    setYOffset,\n  } = adjustMetric\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>{`\"${letter}\" Adjustment`}</Typography>\n      </Box>\n      <FormAdjustMetric\n        xAdvance={xAdvance}\n        xOffset={xOffset}\n        yOffset={yOffset}\n        setXAdvance={setXAdvance}\n        setXOffset={setXOffset}\n        setYOffset={setYOffset}\n      />\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { useState, useEffect, FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { deepObserve } from 'mobx-utils'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Input from '@material-ui/core/Input'\nimport GridInput from 'src/app/components/GridInput'\n\nimport { useProject } from 'src/store/hooks'\nimport { GlyphFont, GlyphImage } from 'src/store'\n\nconst GlobalMetric: FunctionComponent<unknown> = () => {\n  const {\n    glyphList,\n    ui,\n    style: {\n      font: { opentype, size },\n    },\n  } = useProject()\n  const [offset, setOffset] = useState(0)\n  const [glyph, setGlyph] = useState<GlyphFont | GlyphImage | undefined>()\n  const [kerning, setKerning] = useState(0)\n\n  useEffect(() => {\n    setGlyph(glyphList.find((gl) => gl.letter === ui.selectLetter))\n  }, [glyphList, ui.selectLetter])\n\n  useEffect(() => {\n    if (glyph && ui.selectNextLetter && opentype) {\n      const fontScale = (1 / opentype.unitsPerEm) * size\n      setOffset(\n        Math.round(\n          opentype.getKerningValue(\n            opentype.charToGlyphIndex(glyph.letter),\n            opentype.charToGlyphIndex(ui.selectNextLetter),\n          ) * fontScale,\n        ),\n      )\n    }\n  }, [glyph, opentype, size, ui.selectNextLetter])\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    if (glyph)\n      glyph.steKerning(ui.selectNextLetter, Number(e.target.value) - offset)\n  }\n\n  useEffect(() => {\n    let disposer\n\n    if (glyph) {\n      setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      disposer = deepObserve(glyph.kerning, () => {\n        setKerning(glyph.kerning.get(ui.selectNextLetter) || 0)\n      })\n    }\n\n    return disposer\n  }, [glyph, ui.selectNextLetter])\n\n  if (!glyph || !ui.selectNextLetter) return null\n\n  return (\n    <>\n      <Box paddingX={2} marginY={4}>\n        <Typography>{`\"${glyph.letter}\" - \"${ui.selectNextLetter}\" Kerning`}</Typography>\n      </Box>\n      <Box paddingX={2} marginY={4}>\n        <GridInput before='Amount:' after='px'>\n          <Input\n            value={kerning + offset}\n            fullWidth\n            type='number'\n            onChange={handleChange}\n          />\n        </GridInput>\n      </Box>\n    </>\n  )\n}\n\nexport default observer(GlobalMetric)\n","import React, { FunctionComponent } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport PreviewCanvas from './PreviewCanvas'\nimport PreviewText from './PreviewText'\nimport PreviewMertic from './PreviewMertic'\nimport PreviewKerning from './PreviewKerning'\n\nconst Preview: FunctionComponent<unknown> = () => {\n  return (\n    <>\n      <PreviewCanvas />\n      <Grid container alignItems='flex-start'>\n        <Grid item xs={4}>\n          <PreviewText />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewMertic />\n        </Grid>\n        <Grid item xs={4}>\n          <PreviewKerning />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default Preview\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\n\r\nimport { useProjectUi } from 'src/store/hooks'\r\n\r\nimport PackView from '../PackView'\r\nimport Preview from '../Preview'\r\n\r\nconst useStyles = makeStyles(({ palette }) =>\r\n  createStyles({\r\n    '@keyframes slideDown': {\r\n      from: { opacity: 0, transform: 'translate(0, -100%)' },\r\n      to: { opacity: 1, transform: 'translate(0, 0)' },\r\n    },\r\n    root: {\r\n      backgroundColor: palette.background.default,\r\n      position: 'relative',\r\n      display: 'flex',\r\n      flex: 1,\r\n      flexDirection: 'column',\r\n    },\r\n    toast: {\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      width: '100%',\r\n      zIndex: 10,\r\n      background: palette.error.main,\r\n      textAlign: 'center',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      fontSize: 14,\r\n      padding: 2,\r\n      animationName: '$slideDown',\r\n      animationDuration: '300ms',\r\n      pointerEvents: 'none',\r\n    },\r\n    icon: {\r\n      marginRight: 5,\r\n    },\r\n  }),\r\n)\r\n\r\nconst MainView: FunctionComponent<unknown> = () => {\r\n  const { showPreview, packFailed } = useProjectUi()\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {packFailed ? (\r\n        <div className={classes.toast}>\r\n          <ErrorOutlineIcon className={classes.icon} fontSize='inherit' />\r\n          Packaging failed, try to increase the size of the package please.\r\n        </div>\r\n      ) : null}\r\n      {showPreview ? <Preview /> : <PackView />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(MainView)\r\n","import React, { useRef, useState, useEffect, FunctionComponent } from 'react'\n// import { observer } from 'mobx-react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n// import Input from '@material-ui/core/Input'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles(({ palette }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      minWidth: '80px',\n      maxWidth: 'none',\n      height: '34px',\n      lineHeight: '16px',\n      padding: '10px',\n      color: 'rgba(255,255,255,0.5)',\n      backgroundColor: 'rgb(45, 45, 45)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      cursor: 'pointer',\n      '&:hover': {\n        '& $icon': {\n          opacity: 1,\n        },\n      },\n      '&:last-child': {\n        borderRight: '0 none',\n      },\n    },\n    selected: {\n      background: palette.background.default,\n      color: '#fff',\n      '& $icon': {\n        opacity: 1,\n      },\n    },\n    name: {\n      whiteSpace: 'nowrap',\n      position: 'relative',\n      background: 'inherit',\n    },\n    editor: {\n      color: 'rgba(0,0,0,0)',\n    },\n    input: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      left: 0,\n      fontSize: 'inherit',\n      padding: 0,\n      border: '0 none',\n      appearance: 'none',\n      color: 'inherit',\n      background: 'inherit',\n    },\n    icon: {\n      width: '16px',\n      height: '16px',\n      marginLeft: '10px',\n      opacity: 0,\n    },\n  }),\n)\n\ninterface ProjectTabProps {\n  name: string\n  value: number\n  selected?: boolean\n  useRemove?: boolean\n  onRemove?: (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value: number,\n  ) => void\n  onChange?: (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    value: number,\n  ) => void\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  onRename?: (name: string, value: number) => void\n}\n\nconst ProjectTab: FunctionComponent<ProjectTabProps> = (\n  props: ProjectTabProps,\n) => {\n  const {\n    name,\n    useRemove,\n    selected,\n    value,\n    onChange,\n    onClick,\n    onRemove,\n    onRename,\n  } = props\n  const [editor, setEditor] = useState(false)\n  const [sname, setSName] = useState(name)\n  const editorRef = useRef<HTMLInputElement>(null)\n  const classes = useStyles()\n\n  const handleRemove = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    e.stopPropagation()\n    if (onRemove) onRemove(e, value)\n  }\n\n  const handleSelect = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (onChange) onChange(e, value)\n    if (onClick) onClick(e)\n  }\n\n  const handleDoubleClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ): void => {\n    e.stopPropagation()\n    if (editorRef.current) {\n      setEditor(true)\n    }\n  }\n\n  const handleEditorEnd = (e: { preventDefault?(): void }) => {\n    if (e.preventDefault) e.preventDefault()\n    setEditor(false)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === 13 && editorRef.current) {\n      editorRef.current.blur()\n    }\n  }\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSName(e.target.value)\n  }\n\n  useEffect(() => {\n    if (editor && editorRef.current) editorRef.current.focus()\n    if (!editor && onRename) onRename(sname, value)\n  }, [editor, onRename, sname, value])\n\n  useEffect(() => {\n    setSName(name)\n  }, [name])\n\n  return (\n    <div\n      aria-hidden\n      className={clsx(classes.root, {\n        [classes.selected]: selected,\n      })}\n      onClick={handleSelect}\n      onDoubleClick={handleDoubleClick}\n      title='Double click rename'\n    >\n      <span aria-hidden className={classes.name}>\n        {editor ? sname : name}\n        <input\n          className={classes.input}\n          hidden={!editor}\n          ref={editorRef}\n          value={editor ? sname : name}\n          type='text'\n          onKeyDown={handleKeyDown}\n          onBlur={handleEditorEnd}\n          //   onInput={handleInput}\n          onChange={handleInput}\n        />\n      </span>\n      {useRemove ? (\n        <CloseIcon\n          className={classes.icon}\n          onClick={handleRemove}\n          onDoubleClick={handleRemove}\n        />\n      ) : null}\n    </div>\n  )\n}\n\nexport default ProjectTab\n","import React, { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Tabs from '@material-ui/core/Tabs'\nimport { useWorkspace } from 'src/store/hooks'\nimport ProjectTab from './ProjectTab'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n  }),\n)\n\nconst ProjectTabs: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n  const workSpace = useWorkspace()\n  const {\n    addProject,\n    selectProject,\n    removeProject,\n    setProjectName,\n    namedList,\n    activeId,\n  } = workSpace\n\n  const handleChange = (e: unknown, value: number): void => {\n    selectProject(value)\n  }\n\n  const handleRemove = (\n    e: React.MouseEvent<SVGSVGElement, MouseEvent>,\n    value?: number,\n  ): void => {\n    if (typeof value !== 'undefined') removeProject(value)\n  }\n\n  const handleDoubleClick = (): void => {\n    addProject()\n  }\n\n  return (\n    <Tabs\n      classes={classes}\n      value={activeId}\n      onChange={handleChange}\n      indicatorColor='primary'\n      textColor='primary'\n      variant='scrollable'\n      scrollButtons='off'\n      selectionFollowsFocus\n      TabIndicatorProps={{ hidden: true }}\n      onDoubleClick={handleDoubleClick}\n    >\n      {namedList.map((item) => {\n        return (\n          <ProjectTab\n            useRemove={namedList.length > 1}\n            name={item.name}\n            value={item.id}\n            key={item.id}\n            onRename={setProjectName}\n            onRemove={handleRemove}\n          />\n        )\n      })}\n    </Tabs>\n  )\n}\n\nexport default observer(ProjectTabs)\n","import React, { FunctionComponent, useState, useRef } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Popper from '@material-ui/core/Popper'\nimport Slider from '@material-ui/core/Slider'\nimport Switch from '@material-ui/core/Switch'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport MenuList from '@material-ui/core/MenuList'\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\n\nimport { useProjectUi } from 'src/store/hooks'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    slider: {\n      width: '200px',\n    },\n  }),\n)\n\nconst ControlerBar: FunctionComponent<unknown> = () => {\n  const {\n    scale,\n    setTransform,\n    previewScale,\n    setPreviewTransform,\n    showPreview,\n    setShowPreview,\n  } = useProjectUi()\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n  const anchorRef = useRef<HTMLButtonElement>(null)\n  const [list] = useState([0.25, 0.5, 0.75, 1, 1.25, 1.5, 5, 10])\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen)\n  }\n\n  const handleClose = (event: React.MouseEvent<EventTarget>) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  const handleChange = (event: unknown, val: number | number[]) => {\n    if (showPreview) {\n      setPreviewTransform({ previewScale: val as number })\n    } else {\n      setTransform({ scale: val as number })\n    }\n  }\n\n  const handleSelect = (val: number) => {\n    // setTransform({ scale: val })\n    handleChange(null, val)\n    setOpen(false)\n  }\n\n  return (\n    <Box paddingX={2} display='flex' justifyContent='space-between'>\n      <Box component='label' display='flex' alignItems='center'>\n        Preview\n        <Switch\n          size='small'\n          color='primary'\n          checked={showPreview}\n          onChange={(e) => setShowPreview(e.target.checked)}\n        />\n      </Box>\n      <Slider\n        className={classes.slider}\n        value={showPreview ? previewScale : scale}\n        min={0.01}\n        max={10}\n        step={0.01}\n        onChange={handleChange}\n      />\n      <Button ref={anchorRef} onClick={handleToggle}>\n        {`${Math.round((showPreview ? previewScale : scale) * 1000) / 10}%`}\n      </Button>\n      <Popper open={open} anchorEl={anchorRef.current} placement='top-end'>\n        <Paper>\n          <ClickAwayListener onClickAway={handleClose}>\n            <MenuList>\n              {list.map((n) => (\n                <MenuItem key={n} onClick={() => handleSelect(n)}>\n                  {`${n * 100}%`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </ClickAwayListener>\n        </Paper>\n      </Popper>\n    </Box>\n  )\n}\n\nexport default observer(ControlerBar)\n","import React, { useState, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\n\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nimport { GlyphImage } from 'src/store'\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: theme.spacing(24),\r\n      height: theme.spacing(24),\r\n      margin: theme.spacing(2),\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      position: 'relative',\r\n    },\r\n    image: {\r\n      maxWidth: '100%',\r\n      maxHeight: '100%',\r\n      pointerEvents: 'none',\r\n    },\r\n    actions: {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n    },\r\n    inputLabel: {\r\n      width: '100%',\r\n      height: '100%',\r\n      '& input': {\r\n        textAlign: 'center',\r\n      },\r\n    },\r\n  }),\r\n)\r\n\r\ninterface ImageGlyphProps {\r\n  glyph: GlyphImage\r\n  selected?: boolean\r\n}\r\n\r\nconst ImageGlyph: FunctionComponent<ImageGlyphProps> = (\r\n  props: ImageGlyphProps,\r\n) => {\r\n  const classes = useStyles()\r\n  const { removeImage } = useProject()\r\n  const [isIME, setIsIME] = useState(false)\r\n  const { glyph } = props\r\n  const [inputValue, setInputValue] = useState(glyph.letter)\r\n  const { changeSelect, selected, setGlyph } = glyph\r\n\r\n  const handleChangeGlyph = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value } = e.target\r\n    if (!isIME) {\r\n      setGlyph(value)\r\n    } else {\r\n      setInputValue(value.slice(0, 1))\r\n      setGlyph(value.slice(0, 1))\r\n    }\r\n  }\r\n\r\n  const handleCompositionEnd = (): void => {\r\n    setIsIME(false)\r\n    setInputValue((iv) => iv.slice(0, 1))\r\n    setGlyph(inputValue.slice(0, 1))\r\n  }\r\n\r\n  return (\r\n    <Paper variant='outlined' className={classes.root}>\r\n      <img className={classes.image} src={glyph.src} alt={glyph.fileName} />\r\n      <Grid container direction='column' className={classes.actions}>\r\n        <Grid item container justifyContent='space-between' alignItems='center'>\r\n          <Checkbox\r\n            checked={selected}\r\n            size='small'\r\n            color='default'\r\n            onChange={(e) => changeSelect(e.target.checked)}\r\n          />\r\n          <IconButton\r\n            color='primary'\r\n            size='small'\r\n            onClick={() => removeImage(glyph)}\r\n          >\r\n            <DeleteIcon fontSize='small' />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs\r\n          component='label'\r\n          className={classes.inputLabel}\r\n          container\r\n          alignItems='flex-end'\r\n        >\r\n          <InputBase\r\n            fullWidth\r\n            value={isIME ? inputValue : glyph.letter}\r\n            onFocus={(e) => e.target.select()}\r\n            onInput={handleChangeGlyph}\r\n            onCompositionEnd={handleCompositionEnd}\r\n            onCompositionStart={() => setIsIME(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default observer(ImageGlyph)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles, createStyles } from '@material-ui/core'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nimport ImageGlyph from './ImageGlyph'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n  }),\r\n)\r\n\r\nconst ImageGlyphList: FunctionComponent<unknown> = () => {\r\n  const { glyphImages } = useProject()\r\n  const classes = useStyles()\r\n  return (\r\n    <Box className={classes.root}>\r\n      {glyphImages.map((glyph) => {\r\n        return <ImageGlyph glyph={glyph} key={glyph.src} />\r\n      })}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default observer(ImageGlyphList)\r\n","import React, { FunctionComponent, useState, useEffect } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport Accordion from '@material-ui/core/Accordion'\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen'\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary'\r\n\r\nimport { FileInfo } from 'src/store'\r\nimport { useProject } from 'src/store/hooks'\r\n\r\nimport readFile from 'src/utils/readFile'\r\n\r\nimport ImageGlyphList from './ImageGlyphList'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      position: 'relative',\r\n    },\r\n    fixed: {\r\n      position: 'fixed',\r\n      left: 0,\r\n      top: 0,\r\n      zIndex: 999999,\r\n      width: '100%',\r\n      height: '100%',\r\n      '& $panel': {\r\n        maxHeight: 'none',\r\n      },\r\n    },\r\n    panel: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      maxHeight: '305px',\r\n    },\r\n    continer: {\r\n      flex: 1,\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n    },\r\n    listWrap: {\r\n      minHeight: '224px',\r\n      height: '100%',\r\n      width: '100%',\r\n      overflow: 'hidden',\r\n      overflowY: 'auto',\r\n    },\r\n  }),\r\n)\r\n\r\nconst LayerBox: FunctionComponent<unknown> = () => {\r\n  const classes = useStyles()\r\n  const { addImages } = useProject()\r\n  const [isFullscreen, setFullscreen] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  // const [isDroping, setIsDroping] = useState(false)\r\n\r\n  const handleLoadFile = (files: FileList) => {\r\n    const list = Array.from(files).filter((file) => /^image\\//.test(file.type))\r\n    if (!list.length) return\r\n    Promise.all(\r\n      list.map((file) =>\r\n        readFile(file).then((buffer) => {\r\n          if (!buffer || typeof buffer === 'string') return null\r\n\r\n          const matched = file.name.match(/(\\S)\\.[a-zA-Z0-9]+$/i)\r\n          return {\r\n            letter: matched ? matched[1] : '',\r\n            fileName: file.name,\r\n            fileType: file.type,\r\n            buffer,\r\n          }\r\n        }),\r\n      ),\r\n    ).then((fileList) => {\r\n      addImages(fileList.filter((f) => f) as FileInfo[])\r\n    })\r\n  }\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLElement>): void => {\r\n    e.preventDefault()\r\n    handleLoadFile(e.dataTransfer.files)\r\n  }\r\n\r\n  const hanfleToggleFullScreen = (\r\n    e?: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n  ) => {\r\n    if (e) e.stopPropagation()\r\n    setFullscreen((f) => !f)\r\n  }\r\n\r\n  const handleToggleOpen = () => {\r\n    setOpen((o) => isFullscreen || !o)\r\n  }\r\n  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (!e.target.files) return\r\n    const { files } = e.target\r\n    handleLoadFile(files)\r\n  }\r\n\r\n  const handleKeyDown = (e: KeyboardEvent) => {\r\n    const target = e.target as HTMLElement\r\n    if (e.keyCode === 27) {\r\n      if (!target || target.tagName !== 'INPUT') setFullscreen(false)\r\n      else if (target) target.blur()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isFullscreen) window.addEventListener('keydown', handleKeyDown)\r\n    else window.removeEventListener('keydown', handleKeyDown)\r\n    return () => window.removeEventListener('keydown', handleKeyDown)\r\n  }, [isFullscreen])\r\n\r\n  return (\r\n    <Box\r\n      onDragEnter={(e) => e.preventDefault()}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      // onDragLeave={handleDrop}\r\n      onDrop={handleDrop}\r\n      className={clsx(classes.root, {\r\n        [classes.fixed]: isFullscreen,\r\n      })}\r\n    >\r\n      <Accordion\r\n        className={classes.panel}\r\n        expanded={isFullscreen || open}\r\n        onChange={handleToggleOpen}\r\n        TransitionProps={{\r\n          style:\r\n            isFullscreen || open\r\n              ? { flex: 1, overflow: 'hidden', overflowY: 'auto' }\r\n              : {},\r\n        }}\r\n      >\r\n        <AccordionSummary\r\n          expandIcon={isFullscreen ? undefined : <ExpandMoreIcon />}\r\n        >\r\n          <Grid container alignItems='center'>\r\n            <Grid item>\r\n              <Typography>Image Glyph List</Typography>\r\n            </Grid>\r\n            <Grid item xs container justifyContent='center'>\r\n              <Button\r\n                component='label'\r\n                color='primary'\r\n                size='small'\r\n                variant='contained'\r\n                startIcon={<PhotoLibraryIcon />}\r\n              >\r\n                Select Images\r\n                <input\r\n                  hidden\r\n                  type='file'\r\n                  multiple\r\n                  accept='image/*'\r\n                  onChange={handleFilesChange}\r\n                />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton component='div' onClick={hanfleToggleFullScreen}>\r\n                {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={classes.continer}>\r\n          <Box className={classes.listWrap}>\r\n            <ImageGlyphList />\r\n          </Box>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </Box>\r\n  )\r\n}\r\nexport default observer(LayerBox)\r\n","import React, { FunctionComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport MainView from './modules/MainView'\nimport ProjectTabs from './modules/ProjectTabs'\nimport ControlerBar from './modules/ControlerBar'\nimport ImageGlyphList from './modules/ImageGlyphList'\n\nconst useStyles = makeStyles(({ palette, shadows }) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      width: 0,\n    },\n    tabsRoot: {\n      minHeight: 'auto',\n      width: '100%',\n      boxShadow: shadows[2],\n      background: palette.background.sidebar,\n      position: 'relative',\n      zIndex: 1,\n    },\n    tabRoot: {\n      minHeight: 'auto',\n      minWidth: 'auto',\n      maxWidth: 'none',\n      height: '34px',\n      color: 'rgba(255,255,255,0.5)',\n      borderRight: `1px solid ${palette.background.default}`,\n      textTransform: 'none',\n    },\n    tabSelected: {\n      background: palette.background.default,\n    },\n    tabWrapper: {\n      color: '#FFF',\n    },\n  }),\n)\n\nconst WorkSpace: FunctionComponent<unknown> = () => {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.root}>\n      <ProjectTabs />\n      <MainView />\n      <ControlerBar />\n      <ImageGlyphList />\n    </Box>\n  )\n}\n\nexport default WorkSpace\n","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    close: {\r\n      padding: theme.spacing(0.5),\r\n    },\r\n  }),\r\n)\r\n\r\nexport interface SnackbarMessage {\r\n  message: string\r\n  key: number\r\n}\r\n\r\nexport interface State {\r\n  open: boolean\r\n  snackPack: SnackbarMessage[]\r\n  messageInfo?: SnackbarMessage\r\n}\r\n\r\nexport default function ConsecutiveSnackbars() {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleClose = (\r\n    event: React.SyntheticEvent | MouseEvent,\r\n    reason?: string,\r\n  ) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    setOpen(false)\r\n  }\r\n\r\n  const updateVersion = React.useCallback((event) => {\r\n    const { detail } = event\r\n    setOpen(!!detail)\r\n  }, [])\r\n\r\n  const handleReload = () => {\r\n    window.location.reload()\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener('updateVerion', updateVersion, false)\r\n    return () =>\r\n      window.removeEventListener('updateVerion', updateVersion, false)\r\n  }, [updateVersion])\r\n\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={open}\r\n      onClose={handleClose}\r\n      message='New version is available.'\r\n      action={\r\n        <React.Fragment>\r\n          <Button color='secondary' size='small' onClick={handleReload}>\r\n            Reload\r\n          </Button>\r\n          <IconButton\r\n            aria-label='close'\r\n            color='inherit'\r\n            className={classes.close}\r\n            onClick={handleClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </React.Fragment>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Backdrop from '@material-ui/core/Backdrop'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\r\n\r\nimport useStores from 'src/store/hooks'\r\n\r\nimport LeftBar from '../LeftBar'\r\nimport TitleBar from '../TitleBar'\r\nimport RightBar from '../RightBar'\r\nimport WorkSpace from '../WorkSpace'\r\nimport UpdateToast from './UpdateToast'\r\n\r\nconst useStyles = makeStyles(({ zIndex }) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      flex: 1,\r\n      position: 'relative',\r\n      height: '0',\r\n      overflow: 'hidden',\r\n    },\r\n    loadingBackdrop: {\r\n      zIndex: zIndex.drawer + 1,\r\n      color: '#fff',\r\n    },\r\n  }),\r\n)\r\n\r\nconst Wrap: FunctionComponent<unknown> = () => {\r\n  const classes = useStyles()\r\n  const { ui } = useStores()\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <TitleBar />\r\n      <UpdateToast />\r\n      <Box className={classes.content}>\r\n        <LeftBar />\r\n        <WorkSpace />\r\n        <RightBar />\r\n      </Box>\r\n      <Backdrop className={classes.loadingBackdrop} open={!!ui.globalLoader}>\r\n        <CircularProgress color='inherit' />\r\n      </Backdrop>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default observer(Wrap)\r\n","import React from 'react'\r\nimport { Provider } from 'mobx-react'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\n\r\nimport createStore from 'src/store'\r\nimport theme from './theme'\r\n\r\nimport Wrap from './layout/Wrap'\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Provider {...createStore()}>\r\n        <SnackbarProvider\r\n          anchorOrigin={{\r\n            horizontal: 'center',\r\n            vertical: 'top',\r\n          }}\r\n        >\r\n          <Wrap />\r\n        </SnackbarProvider>\r\n      </Provider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as Sentry from '@sentry/react'\r\nimport { Integrations } from '@sentry/tracing'\r\n\r\nimport App from './app/App'\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\n\r\nif (process.env.REACT_APP_SENTRY_DSN) {\r\n  Sentry.init({\r\n    dsn: process.env.REACT_APP_SENTRY_DSN,\r\n    release: process.env.REACT_APP_SENTRY_RELEASE || 'test',\r\n    integrations: [new Integrations.BrowserTracing()],\r\n    tracesSampleRate: 1.0,\r\n    environment: process.env.NODE_ENV,\r\n  })\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({\r\n  onUpdate(registration) {\r\n    const worker = registration.waiting\r\n    if (!worker) return\r\n\r\n    const channel = new MessageChannel()\r\n\r\n    channel.port1.onmessage = () => {\r\n      window.dispatchEvent(new CustomEvent('updateVerion', { detail: worker }))\r\n    }\r\n\r\n    worker.postMessage({ type: 'SKIP_WAITING' }, [channel.port2])\r\n  },\r\n})\r\n"],"sourceRoot":""}